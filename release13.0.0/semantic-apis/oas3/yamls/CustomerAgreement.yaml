openapi: 3.0.1
info:
  title: Customer Agreement
  description: This service domain maintains the master customer agreement/legal contract. Note that a customer can be a complex corporate entity with many subsidiaries operating in different geopolitical areas. The customer agreement is linked to as many Sales Product Agreements as needed for all in-force products
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerAgreement/13.0.0
paths:
  /CustomerAgreement/Evaluate:
    post:
      tags:
        - CR - CustomerAgreement
      summary: EvCR Establish a customer master agreement (evaluate applicable rules)
      description: EvCR Establish a customer master agreement (evaluate applicable rules)
      operationId: Evaluate
      requestBody:
        $ref: '#/components/requestBodies/CustomerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/Update':
    put:
      tags:
        - CR - CustomerAgreement
      summary: UpCR Update details of an active customer master agreement
      description: UpCR Update details of an active customer master agreement
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/Control':
    put:
      tags:
        - CR - CustomerAgreement
      summary: CoCR Control the processing of an agreement
      description: CoCR Control the processing of an agreement
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/Exchange':
    put:
      tags:
        - CR - CustomerAgreement
      summary: 'EcCR Accept, reject etc an agreement'
      description: 'EcCR Accept, reject etc an agreement'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/Request':
    put:
      tags:
        - CR - CustomerAgreement
      summary: RqCR Request check of a proposed activity is compatible
      description: RqCR Request check of a proposed activity is compatible
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/Grant':
    put:
      tags:
        - CR - CustomerAgreement
      summary: GrCR Obtain grant authority to act under the terms of the agreement
      description: GrCR Obtain grant authority to act under the terms of the agreement
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/Retrieve':
    get:
      tags:
        - CR - CustomerAgreement
      summary: ReCR Retrieve details about a customer master agreement
      description: ReCR Retrieve details about a customer master agreement
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/LegalTerms/Evaluate':
    post:
      tags:
        - BQ - LegalTerms
      summary: EvBQ Establish the legal terms for a customer master agreement
      description: EvBQ Establish the legal terms for a customer master agreement
      operationId: EvaluateLegalTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/LegalTerms'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/LegalTerms/{legaltermsid}/Update':
    put:
      tags:
        - BQ - LegalTerms
      summary: UpBQ Update the legal terms for a customer master agreement
      description: UpBQ Update the legal terms for a customer master agreement
      operationId: UpdateLegalTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
        - $ref: '#/components/parameters/legaltermsid'
      requestBody:
        $ref: '#/components/requestBodies/LegalTerms'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/LegalTerms/{legaltermsid}/Retrieve':
    get:
      tags:
        - BQ - LegalTerms
      summary: ReBQ Retrieve details about the legal terms of an agreement
      description: ReBQ Retrieve details about the legal terms of an agreement
      operationId: RetrieveLegalTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
        - $ref: '#/components/parameters/legaltermsid'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/RegulatoryTerms/Evaluate':
    post:
      tags:
        - BQ - RegulatoryTerms
      summary: EvBQ Establish the regulatory terms for a customer master agreement
      description: EvBQ Establish the regulatory terms for a customer master agreement
      operationId: EvaluateRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/RegulatoryTerms'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/RegulatoryTerms/{regulatorytermsid}/Update':
    put:
      tags:
        - BQ - RegulatoryTerms
      summary: UpBQ Update the regulatory terms for a customer master agreement
      description: UpBQ Update the regulatory terms for a customer master agreement
      operationId: UpdateRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
        - $ref: '#/components/parameters/regulatorytermsid'
      requestBody:
        $ref: '#/components/requestBodies/RegulatoryTerms'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/RegulatoryTerms/{regulatorytermsid}/Retrieve':
    get:
      tags:
        - BQ - RegulatoryTerms
      summary: ReBQ Retrieve details about the regulatory terms of an agreement
      description: ReBQ Retrieve details about the regulatory terms of an agreement
      operationId: RetrieveRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
        - $ref: '#/components/parameters/regulatorytermsid'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/PolicyTerms/Evaluate':
    post:
      tags:
        - BQ - PolicyTerms
      summary: EvBQ Establish the corporate policy terms for a customer master agreement
      description: EvBQ Establish the corporate policy terms for a customer master agreement
      operationId: EvaluatePolicyTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/PolicyTerms'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/PolicyTerms/{policytermsid}/Update':
    put:
      tags:
        - BQ - PolicyTerms
      summary: UpBQ Update the corporate policy terms for a customer master agreement
      description: UpBQ Update the corporate policy terms for a customer master agreement
      operationId: UpdatePolicyTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
        - $ref: '#/components/parameters/policytermsid'
      requestBody:
        $ref: '#/components/requestBodies/PolicyTerms'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerAgreement/{customeragreementid}/PolicyTerms/{policytermsid}/Retrieve':
    get:
      tags:
        - BQ - PolicyTerms
      summary: ReBQ Retrieve details about the corporate policy terms of an agreement
      description: ReBQ Retrieve details about the corporate policy terms of an agreement
      operationId: RetrievePolicyTerms
      parameters:
        - $ref: '#/components/parameters/customeragreementid'
        - $ref: '#/components/parameters/policytermsid'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    regulatoryauthority:
      type: object
      properties:
        RegulatoryAuthority:
          type: string
          description: An organisation that is alowed to impose regulations
          format: class
      description: The applicable regulatory authority
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: ''
    regulation:
      type: object
      properties:
        RegulationDefinition:
          $ref: '#/components/schemas/text'
      description: Reference to any regulatory requirements
    RegulatoryTerms:
      type: object
      properties:
        RegulatoryAuthority:
          $ref: '#/components/schemas/regulatoryauthority'
        ApplicableRegulationReference:
          $ref: '#/components/schemas/regulation'
        ApplicableRegulationInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\nExamples: Required disclosures"
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its actions in pursuit of long-term goals. (Business Dictionary)\n\r\n* `Regulation` - A rule used to carry out a law (FIBO)\n\nBusiness Dictionary: a rule (with or without the coercive power of law) employed in controlling, directing, or managing an activity, organization, or system. \n\nThe set of rules and legislation governing certain actions. \nhttps://financial-dictionary.thefreedictionary.com/Regulatory\r\n* `Law` - A binding rule that the courts will enforce.\nA system of rules and guidelines which are enforced through social institutions to govern behavior. (FIBO)\n\r\n* `Guideline` - A recommended practice (adapted from Business Dictionary)\nA general rule, principle, or piece of advice.\r\n* `Criterion` - A principle or standard by which something may be judged or decided.\n\nRead more: http://www.businessdictionary.com/definition/criterion.html\r\n* `Standard` - A rule considered by an authority or by general consent as a basis of comparison\r\n"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: ''
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: The term of the agreement ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to signatories ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: Reference to the bank's policies or rules
    PolicyTerms:
      type: object
      properties:
        BankPolicy-RuleType:
          $ref: '#/components/schemas/text'
        ApplicableBankPolicy-RuleReference:
          $ref: '#/components/schemas/ruleset'
        ApplicableBankPolicy-RuleInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\nExamples: Required disclosures"
    jurisdiction:
      type: object
      properties:
        Jurisdiction:
          type: string
          description: Jurisdiction that will be assigned in case of legal dispute.
          format: class
      description: The contractual jurisdiction or coverage of the agreement (e.g. "governed by State") Jurisdiction|Jurisdiction (https://www.iso20022.org/standardsrepository/type/Jurisdiction)|Standard|ISO20022 BM ()
    law:
      type: object
      properties:
        LawType:
          $ref: '#/components/schemas/text'
        LawDescription:
          $ref: '#/components/schemas/text'
        LegalPenalty:
          $ref: '#/components/schemas/text'
        LegalGuideline:
          $ref: '#/components/schemas/text'
      description: Reference to any legal requirements
    LegalTerms:
      type: object
      properties:
        Jurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        ApplicableLawReference:
          $ref: '#/components/schemas/law'
        ApplicableLawInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\nExamples: Required disclosures"
    organisationidentificationtypevalues:
      enum:
        - LEI
        - ELF
        - MIC
        - BICFI
        - Bankpartyidentification
        - Centralbankidentificationnumber
        - Clearingidentificationnumber
        - Certificateofincorporationnumber
        - Countryidentificationcode
        - Customernumber
        - Datauniversalnumberingsystem
        - Employeridentificationnumber
        - Gs1glnidentifier
        - SIREN
        - SIRET
        - Taxidentificationnumber
        - EANGLN
      type: string
      description: ">\r\n* `LEI` - Legal Entity Identifier is a code allocated to a party as described in ISO 17442 \"Financial Services - Legal Entity Identifier (LEI)\".\r\n* `ELF` - Entity Legal Forms is a code allocated to a party as described in ISO 20275 \"Financial services  Entity legal forms (ELF)\". \r\n* `MIC` - Market Identifier Code. Identification of a financial market, as stipulated in the norm ISO 10383 \"Codes for exchanges and market identifications\".\r\n* `BICFI` - Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \"Banking - Banking telecommunication messages - Business identifier code (BIC)\".\r\n* `Bankpartyidentification` - Unique and unambiguous assignment made by a specific bank or similar financial institution to identify a relationship as defined between the bank and its client.\r\n* `Centralbankidentificationnumber` - A unique identification number assigned by a central bank to identify an organisation.\r\n* `Clearingidentificationnumber` - A unique identification number assigned by a clearing house to identify an organisation\r\n* `Certificateofincorporationnumber` - A unique identification number assigned by a designated authority to a certificate of incorporation and used to identify an organisation.\r\n* `Countryidentificationcode` - Country authority given organisation identification (e.g., corporate registration number)\r\n* `Customernumber` - Number assigned by an issuer to identify a customer.\nNumber assigned by a party to identify a creditor or debtor relationship.\r\n* `Datauniversalnumberingsystem` - A unique identification number provided by Dun & Bradstreet to identify an organisation.\r\n* `Employeridentificationnumber` - Number assigned by a registration authority to an employer.\r\n* `Gs1glnidentifier` - Global Location Number. A non-significant reference number used to identify legal entities, functional entities, or physical entities according to GS1 numbering scheme rules.The number is used to retrieve detailed information that is linked to it.\r\n* `SIREN` - The SIREN number is a 9 digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation in France.\r\n* `SIRET` - The SIRET number is a 14 digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation unit in France. It consists of the SIREN number, followed by a five digit classification number, to identify the local geographical unit of that entity\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to identify an organisation.\r\n* `EANGLN` - Global Location Number. A non-significant reference number used to identify legal entities, functional entities, or physical entities according to the European Association for Numbering (EAN) numbering scheme rules. The number is used to retrieve detailed information that is linked to it. (iso20022)\r\n"
    organisationidentification:
      type: object
      properties:
        OrganisationIdentificationType:
          $ref: '#/components/schemas/organisationidentificationtypevalues'
        OrganisationIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    organisationdatetimetypevalues:
      enum:
        - RegistrationDate
        - EstablishmentDate
        - EntityExpirationDate
      type: string
      description: ">\r\n* `RegistrationDate` - Date and time at which a given organisation was officially registered. (ISO20022)\r\n* `EstablishmentDate` - Date when the organisation was established. ISO20022\r\n* `EntityExpirationDate` - The date the Legal Entity ceased operation or was merged. ISO20022\r\n"
    organisationdatetime:
      type: object
      properties:
        OrganisatioDate:
          $ref: '#/components/schemas/datetime'
        OrganisatioDateType:
          $ref: '#/components/schemas/organisationdatetimetypevalues'
      description: ''
    organisationtypevalues:
      enum:
        - LegalEntity
        - Authority
        - OrganisationUnit
        - FinancialInstitution
        - Charity
        - GovernmentBody
      type: string
      description: ">\r\n* `LegalEntity` - \r\n* `Authority` - \r\n* `OrganisationUnit` - \r\n* `FinancialInstitution` - \r\n* `Charity` - \r\n* `GovernmentBody` - \r\n"
    organisationnametypevalues:
      enum:
        - ShortName
        - TradingName
        - LegalName
      type: string
      description: ">\r\n* `ShortName` - \r\n* `TradingName` - \r\n* `LegalName` - \r\n"
    organisationname:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/name'
        NameType:
          $ref: '#/components/schemas/organisationnametypevalues'
      description: ''
    organisationlegalstructuretypevalues:
      enum:
        - Corporation
        - Individual
        - Supranational
        - Sovereign
        - Municipal
        - Province
        - State
        - County
        - Partnership
        - Financialinstitution
        - National
      type: string
      description: ">\r\n* `Corporation` - Legal structure is a corporation.\r\n* `Individual` - Legal structure is an individual.\r\n* `Supranational` - Legal structure is a supranational.\r\n* `Sovereign` - Legal structure is a sovereign.\r\n* `Municipal` - Legal structure is a municipal.\r\n* `Province` - Legal structure is a province.\r\n* `State` - Legal structure is a state.\r\n* `County` - Legal structure is a county.\r\n* `Partnership` - Legal structure is a partnership.\r\n* `Financialinstitution` - Legal structure is a financial institution.\r\n* `National` - Legal structure is a state.\r\n"
    organisation:
      type: object
      properties:
        OrganisationStructureHierarchy:
          $ref: '#/components/schemas/text'
        OrganisationIdentification:
          $ref: '#/components/schemas/organisationidentification'
        OrganisationSector:
          $ref: '#/components/schemas/text'
        LegalEntityIndicator:
          type: string
          description: ''
          format: string
        OrganisationDate:
          $ref: '#/components/schemas/organisationdatetime'
        OrganisationType:
          $ref: '#/components/schemas/organisationtypevalues'
        OrganisationName:
          $ref: '#/components/schemas/organisationname'
        OrganisationLegalStructure:
          $ref: '#/components/schemas/organisationlegalstructuretypevalues'
      description: "Reference to the legal entity that is the subject of the agreement Organisation _x000D_\n|Organisation  (https://www.iso20022.org/standardsrepository/type/Organisation)|Standard|ISO20022 BM ()"
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - BrokerAgreement
        - SalesAgreement
        - PurchaseAgreement
        - MaintenanceAgreement
        - ProductAgreement
        - ProductSalesAgreement
        - ResourceAgreement
      type: string
      description: "The type of customer agreement (e.g. individual, corporate) ||\r\n|"
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: "Reference to any associated documents ||\r\n|"
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: "Reference to product specific T&Cs maintained elsewhere but subordinate to this agreement ||\r\n|"
    partyrelationshiplifecyclephase:
      type: object
      properties:
        Description:
          $ref: '#/components/schemas/text'
        IsCurrentPhase:
          $ref: '#/components/schemas/text'
        PhaseName:
          $ref: '#/components/schemas/name'
        PhaseStatus:
          $ref: '#/components/schemas/status'
        PhasePeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: "Reference to KYC/Regulatory assessments maintained elsewhere for the customer ||\r\n|"
    CustomerAgreement:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        LegalEntityReference:
          $ref: '#/components/schemas/organisation'
        AgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        AgreementJurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        AgreementValidFromToDate:
          $ref: '#/components/schemas/datetime'
        AgreementSignatoriesResponsibleParties:
          $ref: '#/components/schemas/involvedparty'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        SalesProductAgreementReference:
          $ref: '#/components/schemas/productagreement'
        PartyLife-cycleManagementReference:
          $ref: '#/components/schemas/partyrelationshiplifecyclephase'
      description: "Maintain the terms and conditions that apply to a commercial relationship within Customer Agreement.\n\n\n"
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerAgreement:
      description: CustomerAgreement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerAgreement'
    LegalTerms:
      description: LegalTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LegalTerms'
    RegulatoryTerms:
      description: RegulatoryTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegulatoryTerms'
    PolicyTerms:
      description: PolicyTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyTerms'
  parameters:
    customeragreementid:
      name: customeragreementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    legaltermsid:
      name: legaltermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    regulatorytermsid:
      name: regulatorytermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    policytermsid:
      name: policytermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerAgreement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerAgreement'
      required: true
    LegalTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LegalTerms'
      required: true
    RegulatoryTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegulatoryTerms'
      required: true
    PolicyTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyTerms'
      required: true