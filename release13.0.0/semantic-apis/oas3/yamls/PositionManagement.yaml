openapi: 3.0.1
info:
  title: Position Management
  description: The Service Domain tracks the bank's consolidated financial positions for major customers and complex market conditions
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/PositionManagement/13.0.0
paths:
  /PositionManagement/Initiate:
    post:
      tags:
        - CR - FinancialPositionState
      summary: InCR Initialize a monitored financial position
      description: InCR Initialize a monitored financial position
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/FinancialPositionState'
      responses:
        '200':
          $ref: '#/components/responses/FinancialPositionState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/Update':
    put:
      tags:
        - CR - FinancialPositionState
      summary: UpCR Update the settings and notification arrangements for a position
      description: UpCR Update the settings and notification arrangements for a position
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/FinancialPositionState'
      responses:
        '200':
          $ref: '#/components/responses/FinancialPositionState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/Control':
    put:
      tags:
        - CR - FinancialPositionState
      summary: CoCR Change the status/handling of a monitored position
      description: CoCR Change the status/handling of a monitored position
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/FinancialPositionState'
      responses:
        '200':
          $ref: '#/components/responses/FinancialPositionState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/Request':
    put:
      tags:
        - CR - FinancialPositionState
      summary: ReCR Get details and the current value of a monitored position
      description: ReCR Get details and the current value of a monitored position
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/FinancialPositionState'
      responses:
        '200':
          $ref: '#/components/responses/FinancialPositionState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/TrialTransaction/Initiate':
    post:
      tags:
        - BQ - TrialTransaction
      summary: InBQ Initiate the evaluation impact of a trial transaction
      description: InBQ Initiate the evaluation impact of a trial transaction
      operationId: InitiateTrialTransaction
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/TrialTransaction'
      responses:
        '200':
          $ref: '#/components/responses/TrialTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/TrialTransaction/{trialtransactionid}/Update':
    put:
      tags:
        - BQ - TrialTransaction
      summary: UpBQ Update details of a trial transaction
      description: UpBQ Update details of a trial transaction
      operationId: UpdateTrialTransaction
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
        - $ref: '#/components/parameters/trialtransactionid'
      requestBody:
        $ref: '#/components/requestBodies/TrialTransaction'
      responses:
        '200':
          $ref: '#/components/responses/TrialTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/TrialTransaction/{trialtransactionid}/Retrieve':
    get:
      tags:
        - BQ - TrialTransaction
      summary: ReBQ Retrieve details about a trial transaction and its position impact
      description: ReBQ Retrieve details about a trial transaction and its position impact
      operationId: RetrieveTrialTransaction
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
        - $ref: '#/components/parameters/trialtransactionid'
      responses:
        '200':
          $ref: '#/components/responses/TrialTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/TransactionApplication/Initiate':
    post:
      tags:
        - BQ - TransactionApplication
      summary: InBQ Initiate the registering of a transaction against the position
      description: InBQ Initiate the registering of a transaction against the position
      operationId: InitiateTransactionApplication
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/TransactionApplication'
      responses:
        '200':
          $ref: '#/components/responses/TransactionApplication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/TransactionApplication/{transactionapplicationid}/Update':
    put:
      tags:
        - BQ - TransactionApplication
      summary: UpBQ Update details of a registered transaction
      description: UpBQ Update details of a registered transaction
      operationId: UpdateTransactionApplication
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
        - $ref: '#/components/parameters/transactionapplicationid'
      requestBody:
        $ref: '#/components/requestBodies/TransactionApplication'
      responses:
        '200':
          $ref: '#/components/responses/TransactionApplication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PositionManagement/{positionmanagementid}/TransactionApplication/{transactionapplicationid}/Retrieve':
    get:
      tags:
        - BQ - TransactionApplication
      summary: ReBQ Retrieve details about a registered transaction and its position impact
      description: ReBQ Retrieve details about a registered transaction and its position impact
      operationId: RetrieveTransactionApplication
      parameters:
        - $ref: '#/components/parameters/positionmanagementid'
        - $ref: '#/components/parameters/transactionapplicationid'
      responses:
        '200':
          $ref: '#/components/responses/TransactionApplication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "Details of the requirements/schedule for position notification ||\r\n|"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "The customer or customer type associated with the position if applicable ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: An identifier that allows to uniquely refer to an instance of a transaction.
    transactiondatetimetypevalues:
      enum:
        - ExecutedDate
        - FulfillmentDate
        - InitiatedDate
        - CancelledDate
        - ApprovedDate
        - ValueDate
        - BookingDate
      type: string
      description: ">\r\n* `ExecutedDate` - \r\n* `FulfillmentDate` - \r\n* `InitiatedDate` - \r\n* `CancelledDate` - \r\n* `ApprovedDate` - \r\n* `ValueDate` - \r\n* `BookingDate` - \r\n"
    transactiondatetime:
      type: object
      properties:
        TransactionDate:
          $ref: '#/components/schemas/datetime'
        TransactionDateType:
          $ref: '#/components/schemas/transactiondatetimetypevalues'
      description: "The Date that the transaction has occurred or is planned to occur.\nA characteristic of transaction which refers to the LifecycleDate of transaction (e.g., initiated date, executed date, fulfillment date). "
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: ">\r\n* `FinancialTransaction` - \r\n* `BusinessTransaction` - \r\n* `BankingTransaction` - \r\n* `AccountingTransaction` - \r\n* `BookingTransaction` - \r\n* `AllocationTransaction` - \r\n* `DeliveryTransaction` - \r\n* `ProductionTransaction` - \r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    transactionstatustypevalues:
      enum:
        - Initiated
        - Executed
        - Cancelled
        - Confirmed
        - Suspended
        - Pending
        - Completed
        - Notified
        - Booked
        - Rejected
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Executed` - \r\n* `Cancelled` - \r\n* `Confirmed` - \r\n* `Suspended` - \r\n* `Pending` - \r\n* `Completed` - \r\n* `Notified` - \r\n* `Booked` - \r\n* `Rejected` - \r\n"
    transactionstatus:
      type: object
      properties:
        TransactionStatus:
          $ref: '#/components/schemas/status'
        TransactionStatusType:
          $ref: '#/components/schemas/transactionstatustypevalues'
      description: 'A characteristic of transaction which refers to the LifecycleStatus of transaction (e.g., initiated, executed, confirmed, cancelled, etc.) '
    transaction:
      type: object
      properties:
        TransactionIdentification:
          $ref: '#/components/schemas/identifier'
        TransactionDate:
          $ref: '#/components/schemas/transactiondatetime'
        TransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TransactionDescription:
          $ref: '#/components/schemas/text'
        TransactionStatus:
          $ref: '#/components/schemas/transactionstatus'
        TransactionName:
          $ref: '#/components/schemas/name'
      description: A trial transaction that will impacts a managed position)
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: 'The current, historical and if applicable projected values of the monitored position CurrencyAndAmount|CurrencyAndAmount (https://www.iso20022.org/standardsrepository/type/CurrencyAndAmount)|Standard|ISO20022  ()'
    assessmenttypevalues:
      enum:
        - AssetValuation
        - ProductMatching
        - Authorization
        - Authentication
        - QualityAssurance
        - Audit
        - ComplianceCheck
        - FundingCheck
        - SuitabilityCheck
        - PerformanceCheck
        - ImpactAssessment
        - RiskAssessment
        - Rating
        - UnderwritingAssessment
        - Qualification
        - Verification
        - KYCAssessment
        - PEPAssessment
        - AMLAssessment
      type: string
      description: ">\r\n* `AssetValuation` - \r\n* `ProductMatching` - \r\n* `Authorization` - An evaluation whether a party or system is allowed to do something.\n\nThe consent given by a participant (or a third party acting on behalf of that participant) in order to transfer funds or securities. (ECB)\n\nAuthorization is a mechanism by which a computer system determines whether to allow or deny specific action to a user. Authorization is often controlled by rather complex rules and algorithms, usually specified as part of an access control model. Authorization often follows (and required) authentication, however, authentication and authorization are two separate mechanisms. In rare cases, \"authorization\" is understood as a process of allowing access, granting permissions or giving approval. Such as \"authorization\" of a request to join a group. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `Authentication` - An evaluation whether a party or system is what it claims to be.\n\nA security mechanism for verifying: 1) the identity of an individual or other entity (including verification by means of a computer or computer application); and 2) the level of authority of that person or entity (i.e. the ability of that person or entity to perform specific tasks or activities). (ECB)\n\nAuthentication is a mechanism by which a computer system checks that the user is really the one she or he claims to be. Authentication can be implemented by a broad variety of mechanisms broadly divided into three categories: something you know, something you have, something you are. Traditionally, authentication is done by the means of by username and password. Authentication is often followed by authorization, however, authentication and authorization are two separate mechanisms. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `QualityAssurance` - \r\n* `Audit` - \r\n* `ComplianceCheck` - \r\n* `FundingCheck` - \r\n* `SuitabilityCheck` - \r\n* `PerformanceCheck` - \r\n* `ImpactAssessment` - \r\n* `RiskAssessment` - \r\n* `Rating` - \r\n* `UnderwritingAssessment` - \r\n* `Qualification` - \r\n* `Verification` - A process establishing that a particular information is correct, while the meaning of \"information\" and \"correct\" varies from context to context. When dealing with identity information, this usually means formal verification of identity attributes, checking the schema, identifier uniqueness and referential integrity. However, verification may mean deeper verification, such as checking that the information is true and up-to-date.  (ISO/IEC 24760-1:2019 - IT Security and Privacy)\n\r\n* `KYCAssessment` - An assessment conducted by businesses and financial institutions to verify and confirm the identity of their customers or clients. The primary purpose of a KYC check is to prevent illegal activities, such as money laundering, terrorist financing, and fraud, by ensuring that customers are who they claim to be.\r\n* `PEPAssessment` - A PEP check, or \"Politically Exposed Person\" check, is an assessment conducted by used by businesses, financial institutions, and government agencies to identify individuals who hold prominent public positions or have significant political influence. The purpose of a PEP check is to assess and manage the potential risks associated with doing business with these individuals, as they may be more susceptible to corruption, money laundering, or other illicit activities.\r\n* `AMLAssessment` - An AML (Anti-Money Laundering) check is an assessment conducted by businesses, financial institutions, and other organizations to prevent and detect money laundering and the financing of criminal activities. The main purpose of an AML check is to ensure that financial transactions and business relationships are not being used to disguise the illegal origins of funds.\r\n"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: ''
    model:
      type: object
      properties:
        ModelType:
          $ref: '#/components/schemas/text'
        ModelPurpose:
          $ref: '#/components/schemas/text'
        ModelVersion:
          $ref: '#/components/schemas/text'
        ModelName:
          $ref: '#/components/schemas/name'
        ModelDateAndTime:
          $ref: '#/components/schemas/datetime'
        ModelStatus:
          $ref: '#/components/schemas/status'
      description: ''
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: Document that provides background or corroborating information regarding an assessment(s).
    requirement:
      type: object
      properties:
        RequirementType:
          type: string
          description: ''
          format: string
      description: ''
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: Date when the assessment expires. (ISO20022)
    assessment:
      type: object
      properties:
        AssessmentType:
          $ref: '#/components/schemas/assessmenttypevalues'
        AssessmentMethod:
          $ref: '#/components/schemas/text'
        AssessmentSchedule:
          $ref: '#/components/schemas/schedule'
        AssessmentDescription:
          $ref: '#/components/schemas/text'
        AssessmentModel:
          $ref: '#/components/schemas/model'
        AssessmentDateTime:
          $ref: '#/components/schemas/datetime'
        AssessmentResult:
          $ref: '#/components/schemas/text'
        AssessmentSupportingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRepresentingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRequiredAdjustment:
          $ref: '#/components/schemas/text'
        AssessmentRequirement:
          $ref: '#/components/schemas/requirement'
        AssessmentExpiryDate:
          $ref: '#/components/schemas/date'
        AssessmentStatus:
          $ref: '#/components/schemas/status'
      description: The projected impact the trial transaction will have on the managed position
    TransactionApplication:
      type: object
      properties:
        TransactionReference:
          $ref: '#/components/schemas/transaction'
        TransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TransactionRecord:
          $ref: '#/components/schemas/transaction'
        TransactionAmount:
          $ref: '#/components/schemas/amount'
        TransactionDate:
          $ref: '#/components/schemas/datetime'
        TransactionBookingEntity:
          $ref: '#/components/schemas/involvedparty'
        TransactionPositionImpactAssessment:
          $ref: '#/components/schemas/assessment'
      description: "A collection of information feeds/measures that can be used to track the status of one or more items/entitites\n\nExamples: Composite position, Customer alert"
    TrialTransaction:
      type: object
      properties:
        TrialTransactionReference:
          $ref: '#/components/schemas/transaction'
        TrialTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TrialTransactionRecord:
          $ref: '#/components/schemas/transaction'
        TrialTransactionAmount:
          $ref: '#/components/schemas/amount'
        TrialTransactionDate:
          $ref: '#/components/schemas/datetime'
        TrialTransactionBookingEntity:
          $ref: '#/components/schemas/involvedparty'
        TrailTransactionPositionImpactAssessment:
          $ref: '#/components/schemas/assessment'
      description: "A collection of information feeds/measures that can be used to track the status of one or more items/entitites\n\nExamples: Composite position, Customer alert"
    positiontype:
      type: object
      properties:
        PositionType:
          type: string
          description: 'A classification of the position. '
          format: class
      description: "The type of position being monitored (e.g. consolidated customer exposure, geographic/sector exposure) ||\r\n|"
    organisationidentificationtypevalues:
      enum:
        - LEI
        - ELF
        - MIC
        - BICFI
        - Bankpartyidentification
        - Centralbankidentificationnumber
        - Clearingidentificationnumber
        - Certificateofincorporationnumber
        - Countryidentificationcode
        - Customernumber
        - Datauniversalnumberingsystem
        - Employeridentificationnumber
        - Gs1glnidentifier
        - SIREN
        - SIRET
        - Taxidentificationnumber
        - EANGLN
      type: string
      description: ">\r\n* `LEI` - Legal Entity Identifier is a code allocated to a party as described in ISO 17442 \"Financial Services - Legal Entity Identifier (LEI)\".\r\n* `ELF` - Entity Legal Forms is a code allocated to a party as described in ISO 20275 \"Financial services  Entity legal forms (ELF)\". \r\n* `MIC` - Market Identifier Code. Identification of a financial market, as stipulated in the norm ISO 10383 \"Codes for exchanges and market identifications\".\r\n* `BICFI` - Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \"Banking - Banking telecommunication messages - Business identifier code (BIC)\".\r\n* `Bankpartyidentification` - Unique and unambiguous assignment made by a specific bank or similar financial institution to identify a relationship as defined between the bank and its client.\r\n* `Centralbankidentificationnumber` - A unique identification number assigned by a central bank to identify an organisation.\r\n* `Clearingidentificationnumber` - A unique identification number assigned by a clearing house to identify an organisation\r\n* `Certificateofincorporationnumber` - A unique identification number assigned by a designated authority to a certificate of incorporation and used to identify an organisation.\r\n* `Countryidentificationcode` - Country authority given organisation identification (e.g., corporate registration number)\r\n* `Customernumber` - Number assigned by an issuer to identify a customer.\nNumber assigned by a party to identify a creditor or debtor relationship.\r\n* `Datauniversalnumberingsystem` - A unique identification number provided by Dun & Bradstreet to identify an organisation.\r\n* `Employeridentificationnumber` - Number assigned by a registration authority to an employer.\r\n* `Gs1glnidentifier` - Global Location Number. A non-significant reference number used to identify legal entities, functional entities, or physical entities according to GS1 numbering scheme rules.The number is used to retrieve detailed information that is linked to it.\r\n* `SIREN` - The SIREN number is a 9 digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation in France.\r\n* `SIRET` - The SIRET number is a 14 digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation unit in France. It consists of the SIREN number, followed by a five digit classification number, to identify the local geographical unit of that entity\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to identify an organisation.\r\n* `EANGLN` - Global Location Number. A non-significant reference number used to identify legal entities, functional entities, or physical entities according to the European Association for Numbering (EAN) numbering scheme rules. The number is used to retrieve detailed information that is linked to it. (iso20022)\r\n"
    organisationidentification:
      type: object
      properties:
        OrganisationIdentificationType:
          $ref: '#/components/schemas/organisationidentificationtypevalues'
        OrganisationIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    organisationdatetimetypevalues:
      enum:
        - RegistrationDate
        - EstablishmentDate
        - EntityExpirationDate
      type: string
      description: ">\r\n* `RegistrationDate` - Date and time at which a given organisation was officially registered. (ISO20022)\r\n* `EstablishmentDate` - Date when the organisation was established. ISO20022\r\n* `EntityExpirationDate` - The date the Legal Entity ceased operation or was merged. ISO20022\r\n"
    organisationdatetime:
      type: object
      properties:
        OrganisatioDate:
          $ref: '#/components/schemas/datetime'
        OrganisatioDateType:
          $ref: '#/components/schemas/organisationdatetimetypevalues'
      description: ''
    organisationtypevalues:
      enum:
        - LegalEntity
        - Authority
        - OrganisationUnit
        - FinancialInstitution
        - Charity
        - GovernmentBody
      type: string
      description: ">\r\n* `LegalEntity` - \r\n* `Authority` - \r\n* `OrganisationUnit` - \r\n* `FinancialInstitution` - \r\n* `Charity` - \r\n* `GovernmentBody` - \r\n"
    organisationnametypevalues:
      enum:
        - ShortName
        - TradingName
        - LegalName
      type: string
      description: ">\r\n* `ShortName` - \r\n* `TradingName` - \r\n* `LegalName` - \r\n"
    organisationname:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/name'
        NameType:
          $ref: '#/components/schemas/organisationnametypevalues'
      description: ''
    organisationlegalstructuretypevalues:
      enum:
        - Corporation
        - Individual
        - Supranational
        - Sovereign
        - Municipal
        - Province
        - State
        - County
        - Partnership
        - Financialinstitution
        - National
      type: string
      description: ">\r\n* `Corporation` - Legal structure is a corporation.\r\n* `Individual` - Legal structure is an individual.\r\n* `Supranational` - Legal structure is a supranational.\r\n* `Sovereign` - Legal structure is a sovereign.\r\n* `Municipal` - Legal structure is a municipal.\r\n* `Province` - Legal structure is a province.\r\n* `State` - Legal structure is a state.\r\n* `County` - Legal structure is a county.\r\n* `Partnership` - Legal structure is a partnership.\r\n* `Financialinstitution` - Legal structure is a financial institution.\r\n* `National` - Legal structure is a state.\r\n"
    organisation:
      type: object
      properties:
        OrganisationStructureHierarchy:
          $ref: '#/components/schemas/text'
        OrganisationIdentification:
          $ref: '#/components/schemas/organisationidentification'
        OrganisationSector:
          $ref: '#/components/schemas/text'
        LegalEntityIndicator:
          type: string
          description: ''
          format: string
        OrganisationDate:
          $ref: '#/components/schemas/organisationdatetime'
        OrganisationType:
          $ref: '#/components/schemas/organisationtypevalues'
        OrganisationName:
          $ref: '#/components/schemas/organisationname'
        OrganisationLegalStructure:
          $ref: '#/components/schemas/organisationlegalstructuretypevalues'
      description: "The sector or segment associated with the position if applicable Organisation _x000D_\n|Organisation  (https://www.iso20022.org/standardsrepository/type/Organisation)|Standard|ISO20022 BM ()"
    producttypevalues:
      enum:
        - BankingProduct
        - InsuranceProduct
      type: string
      description: "The product type or specific product associated with the position if applicable ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: The details maintained for the notification service Obligation|Obligation (https://www.iso20022.org/standardsrepository/type/Obligation)|Standard|ISO20022 BM ()
    businessunit:
      type: object
      properties:
        BusinessFunction:
          type: string
          description: ''
          format: string
        Goal:
          type: string
          description: ''
          format: string
      description: "Reference to the notified party ||\r\n|"
    notification:
      type: object
      properties:
        NotificationReference:
          type: string
          description: An identifier that allows to uniquely refer to an instance of a notification.
          format: object
        NotificationType:
          type: string
          description: "The attribute value of Notification Type, specifies the kind of Notification for this occurrence of Notification.\n\nThe concept \"Notification Type\" is A Classification Hierarchy that distinguishes between Notification according to distinguishing characteristics. \n\nCharacteristics can be\n·    Medium (letter, SMS, e-mail ...)\n·    Content Type (due date notification, overdue notification, price drop notification, ...)\n·    Involved Party (bank notification, a customer notification, ...)\n·    Urgency (high priority, medium, low)\n·    Commercial or legal \n·    etc.\nasset position"
          format: string
        NotificationContent:
          type: string
          description: ''
          format: string
      description: "The position notification record generated as required ||\r\n|"
    FinancialPositionState:
      type: object
      properties:
        PositionType:
          $ref: '#/components/schemas/positiontype'
        PositionCustomerReference:
          $ref: '#/components/schemas/involvedparty'
        PositionSector:
          $ref: '#/components/schemas/organisation'
        PositionProductType:
          $ref: '#/components/schemas/producttypevalues'
        PositionDefinition:
          $ref: '#/components/schemas/text'
        PositionThresholdsLimits:
          $ref: '#/components/schemas/arrangement'
        PositionValue:
          $ref: '#/components/schemas/amount'
        PositionNotificationArrangementReference:
          $ref: '#/components/schemas/arrangement'
        PositionNotificationArrangementRecord:
          $ref: '#/components/schemas/arrangement'
        PositionNotificationBusinessUnitReference:
          $ref: '#/components/schemas/businessunit'
        PositionNotificationDetails:
          $ref: '#/components/schemas/text'
        PositionNotificationRecord:
          $ref: '#/components/schemas/notification'
      description: 'Monitor and define the status/rating of some entity within Position Management. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    FinancialPositionState:
      description: FinancialPositionState
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FinancialPositionState'
    TrialTransaction:
      description: TrialTransaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrialTransaction'
    TransactionApplication:
      description: TransactionApplication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionApplication'
  parameters:
    positionmanagementid:
      name: positionmanagementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    trialtransactionid:
      name: trialtransactionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    transactionapplicationid:
      name: transactionapplicationid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    FinancialPositionState:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FinancialPositionState'
      required: true
    TrialTransaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrialTransaction'
      required: true
    TransactionApplication:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionApplication'
      required: true