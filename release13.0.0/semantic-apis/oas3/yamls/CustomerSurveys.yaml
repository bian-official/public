openapi: 3.0.1
info:
  title: Customer Surveys
  description: Define and execute and analyze customer surveys
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerSurveys/13.0.0
paths:
  /CustomerSurveys/Initiate:
    post:
      tags:
        - CR - CustomerSurveyProcedure
      summary: InCR Initiate customer survey processing
      description: InCR Initiate customer survey processing
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CustomerSurveyProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerSurveyProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Update':
    put:
      tags:
        - CR - CustomerSurveyProcedure
      summary: UpCR Update details of an active customer survey process
      description: UpCR Update details of an active customer survey process
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerSurveyProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerSurveyProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Control':
    put:
      tags:
        - CR - CustomerSurveyProcedure
      summary: CoCR Control the execution of a customer survey
      description: CoCR Control the execution of a customer survey
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerSurveyProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerSurveyProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Request':
    put:
      tags:
        - CR - CustomerSurveyProcedure
      summary: RqCR Request manual intervention to the survey process
      description: RqCR Request manual intervention to the survey process
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerSurveyProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerSurveyProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Retrieve':
    get:
      tags:
        - CR - CustomerSurveyProcedure
      summary: ReCR Retrieve details about a customer survey process
      description: ReCR Retrieve details about a customer survey process
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerSurveyProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Definition/{definitionid}/Update':
    put:
      tags:
        - BQ - Definition
      summary: UpBQ Update aspects of a customer survey definition/specification
      description: UpBQ Update aspects of a customer survey definition/specification
      operationId: UpdateDefinition
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/definitionid'
      requestBody:
        $ref: '#/components/requestBodies/Definition'
      responses:
        '200':
          $ref: '#/components/responses/Definition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Definition/{definitionid}/Exchange':
    put:
      tags:
        - BQ - Definition
      summary: 'EcBQ Accept, reject, verify, etc. aspects of a customer survey definition'
      description: 'EcBQ Accept, reject, verify, etc. aspects of a customer survey definition'
      operationId: ExchangeDefinition
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/definitionid'
      requestBody:
        $ref: '#/components/requestBodies/Definition'
      responses:
        '200':
          $ref: '#/components/responses/Definition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Definition/{definitionid}/Retrieve':
    get:
      tags:
        - BQ - Definition
      summary: ReBQ Retrieve details about customer survey related activity
      description: ReBQ Retrieve details about customer survey related activity
      operationId: RetrieveDefinition
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/definitionid'
      responses:
        '200':
          $ref: '#/components/responses/Definition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/ParticipantSelection/{participantselectionid}/Update':
    put:
      tags:
        - BQ - ParticipantSelection
      summary: UpBQ Update reviewer selection details
      description: UpBQ Update reviewer selection details
      operationId: UpdateParticipantSelection
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/participantselectionid'
      requestBody:
        $ref: '#/components/requestBodies/ParticipantSelection'
      responses:
        '200':
          $ref: '#/components/responses/ParticipantSelection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/ParticipantSelection/{participantselectionid}/Request':
    put:
      tags:
        - BQ - ParticipantSelection
      summary: RqBQ Request manual intervention in survey reviewer selection
      description: RqBQ Request manual intervention in survey reviewer selection
      operationId: RequestParticipantSelection
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/participantselectionid'
      requestBody:
        $ref: '#/components/requestBodies/ParticipantSelection'
      responses:
        '200':
          $ref: '#/components/responses/ParticipantSelection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/ParticipantSelection/{participantselectionid}/Retrieve':
    get:
      tags:
        - BQ - ParticipantSelection
      summary: ReBQ Retrieve details about survey reviewer selection activity
      description: ReBQ Retrieve details about survey reviewer selection activity
      operationId: RetrieveParticipantSelection
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/participantselectionid'
      responses:
        '200':
          $ref: '#/components/responses/ParticipantSelection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Execution/Initiate':
    post:
      tags:
        - BQ - Execution
      summary: InBQ Initiate customer survey execution task
      description: InBQ Initiate customer survey execution task
      operationId: InitiateExecution
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Execution/{executionid}/Update':
    put:
      tags:
        - BQ - Execution
      summary: UpBQ Update details of a survey execution task
      description: UpBQ Update details of a survey execution task
      operationId: UpdateExecution
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/executionid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Execution/{executionid}/Capture':
    put:
      tags:
        - BQ - Execution
      summary: CaBQ Capture input from a survey execution task
      description: CaBQ Capture input from a survey execution task
      operationId: CaptureExecution
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/executionid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Execution/{executionid}/Execute':
    put:
      tags:
        - BQ - Execution
      summary: ExBQ Execute an automated action for survey execution
      description: ExBQ Execute an automated action for survey execution
      operationId: ExecuteExecution
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/executionid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Execution/{executionid}/Request':
    put:
      tags:
        - BQ - Execution
      summary: RqBQ Request manual intervention in survey execution
      description: RqBQ Request manual intervention in survey execution
      operationId: RequestExecution
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/executionid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/Execution/{executionid}/Retrieve':
    get:
      tags:
        - BQ - Execution
      summary: ReBQ Retrieve details about customer survey execution activity
      description: ReBQ Retrieve details about customer survey execution activity
      operationId: RetrieveExecution
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/executionid'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/SurveyAnalysis/Initiate':
    post:
      tags:
        - BQ - SurveyAnalysis
      summary: InBQ Initiate survey result consolidation and analysis
      description: InBQ Initiate survey result consolidation and analysis
      operationId: InitiateSurveyAnalysis
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
      requestBody:
        $ref: '#/components/requestBodies/SurveyAnalysis'
      responses:
        '200':
          $ref: '#/components/responses/SurveyAnalysis'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/SurveyAnalysis/{surveyanalysisid}/Update':
    put:
      tags:
        - BQ - SurveyAnalysis
      summary: UpBQ Update details about customer survey analysis
      description: UpBQ Update details about customer survey analysis
      operationId: UpdateSurveyAnalysis
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/surveyanalysisid'
      requestBody:
        $ref: '#/components/requestBodies/SurveyAnalysis'
      responses:
        '200':
          $ref: '#/components/responses/SurveyAnalysis'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/SurveyAnalysis/{surveyanalysisid}/Request':
    put:
      tags:
        - BQ - SurveyAnalysis
      summary: ReBQ Request manual intervention in survey analysis
      description: ReBQ Request manual intervention in survey analysis
      operationId: RequestSurveyAnalysis
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/surveyanalysisid'
      requestBody:
        $ref: '#/components/requestBodies/SurveyAnalysis'
      responses:
        '200':
          $ref: '#/components/responses/SurveyAnalysis'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerSurveys/{customersurveysid}/SurveyAnalysis/{surveyanalysisid}/Retrieve':
    get:
      tags:
        - BQ - SurveyAnalysis
      summary: ReBQ Retrieve details about a customer survey analysis
      description: ReBQ Retrieve details about a customer survey analysis
      operationId: RetrieveSurveyAnalysis
      parameters:
        - $ref: '#/components/parameters/customersurveysid'
        - $ref: '#/components/parameters/surveyanalysisid'
      responses:
        '200':
          $ref: '#/components/responses/SurveyAnalysis'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: 'The type of work task (e.g. host focus group session, issue questionnaire)'
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The result/impact of the customer survey (will include summary of customer survey activity, survey response data and survey findings presentation analysis) ||\r\n|"
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: "Key dates associated with the customer survey process (e.g. initiation date, version revision date, completion date) ||\r\n|"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the business unit responsible for the survey execution ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: 'File of consolidated notes, forms and documents for the work task'
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: Reference to associated documents (e.g. required legal disclosures for participants)
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: Value of the date type ISODate|ISODate (https://www.iso20022.org/standardsrepository/type/ISODate)|Standard|ISO20022 BM ()
    Execution:
      type: object
      properties:
        CustomerSurveyExecutionWorkTaskType:
          $ref: '#/components/schemas/task'
        CustomerSurveyExecutionWorkTaskDescription:
          $ref: '#/components/schemas/text'
        CustomerSurveyExecutionWorkTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        CustomerSurveyExecutionWorkTaskResult:
          $ref: '#/components/schemas/text'
        CustomerSurveyExecutionWorkTaskDate-Time:
          $ref: '#/components/schemas/date'
      description: 'The main worsteps to be followed in th execution of Customer Survey Procedure like: Execution of the customer interaction, presenting the campaign details, recording the customer response'
    Definition:
      type: object
      properties:
        CustomerSurveyDesignWorkTaskType:
          $ref: '#/components/schemas/task'
        CustomerSurveyDesignWorkTaskDescription:
          $ref: '#/components/schemas/text'
        CustomerSurveyDesignWorkTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        CustomerSurveyDesignWorkTaskResult:
          $ref: '#/components/schemas/text'
      description: 'The main worsteps to be followed in th execution of Customer Survey Procedure like: Execution of the customer interaction, presenting the campaign details, recording the customer response'
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its actions in pursuit of long-term goals. (Business Dictionary)\n\r\n* `Regulation` - A rule used to carry out a law (FIBO)\n\nBusiness Dictionary: a rule (with or without the coercive power of law) employed in controlling, directing, or managing an activity, organization, or system. \n\nThe set of rules and legislation governing certain actions. \nhttps://financial-dictionary.thefreedictionary.com/Regulatory\r\n* `Law` - A binding rule that the courts will enforce.\nA system of rules and guidelines which are enforced through social institutions to govern behavior. (FIBO)\n\r\n* `Guideline` - A recommended practice (adapted from Business Dictionary)\nA general rule, principle, or piece of advice.\r\n* `Criterion` - A principle or standard by which something may be judged or decided.\n\nRead more: http://www.businessdictionary.com/definition/criterion.html\r\n* `Standard` - A rule considered by an authority or by general consent as a basis of comparison\r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: Details the selection criteria used to identify candidate customer reviewers
    ParticipantSelection:
      type: object
      properties:
        CustomerSurveySelectionCriteria:
          $ref: '#/components/schemas/ruleset'
        CustomerSurveyParticipantReference:
          $ref: '#/components/schemas/involvedparty'
      description: 'The main worsteps to be followed in th execution of Customer Survey Procedure like: Execution of the customer interaction, presenting the campaign details, recording the customer response'
    surveyaspecttypevalues:
      enum:
        - Demographics
        - ProductOrServiceUsage
        - Satisfaction
        - Experience
        - ProductOrServiceQuality
        - BrandPerception
        - Price
        - Competitor
        - CommunicationPreferences
        - Accessibility
        - Loyalty
        - EnvironmentalAndSocialResponsibility
      type: string
      description: ">\r\n* `Demographics` - \r\n* `ProductOrServiceUsage` - \r\n* `Satisfaction` - \r\n* `Experience` - \r\n* `ProductOrServiceQuality` - \r\n* `BrandPerception` - \r\n* `Price` - \r\n* `Competitor` - \r\n* `CommunicationPreferences` - \r\n* `Accessibility` - \r\n* `Loyalty` - \r\n* `EnvironmentalAndSocialResponsibility` - \r\n"
    SurveyAnalysis:
      type: object
      properties:
        CustomerSurveyProcedureSurveyAnalysisResult:
          $ref: '#/components/schemas/surveyaspecttypevalues'
      description: 'The main worsteps to be followed in th execution of Customer Survey Procedure like: Execution of the customer interaction, presenting the campaign details, recording the customer response'
    customersurveytypevalues:
      enum:
        - Focusgroup
        - Questionnaire
        - CustomerSatisfactionSurvey
        - ProductOrServiceFeedbackSurvey
        - MarketResearchSurvey
        - CustomerEffortScore
      type: string
      description: "The type or category of customer survey (e.g. questionnaire, in context solicitation, focus group) ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: Details of the deployment set-up/configuration of the customer survey Obligation|Obligation (https://www.iso20022.org/standardsrepository/type/Obligation)|Standard|ISO20022 BM ()
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "The customer survey processing schedule, covering survey definition, reviewer selection, survey execution and subsequent analysis. Note for some integrated surveys this can be an on-going activity that attempts provides a constant stream of feedback relating to specific activities/services rather than a specific event ||\r\n|"
    iteminventory:
      type: object
      properties:
        ItemInventoryType:
          $ref: '#/components/schemas/text'
      description: "The tracked inventory of the consumable item ||\r\n|"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    item:
      type: object
      properties:
        ItemType:
          $ref: '#/components/schemas/text'
        ItemDescription:
          $ref: '#/components/schemas/text'
        ItemLocation:
          $ref: '#/components/schemas/location'
      description: "The type of consumable item associated with the customer survey (e.g. questionnaire, participation incentive gift) ||\r\n|"
    goaltypevalues:
      enum:
        - Short-TermGoal
        - Long-TermGoal
        - BusinessGoal
        - PerformanceGoal
        - FinancialGoal
        - OutcomeGoal
        - SMARTGoal
      type: string
      description: ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
    goaldatetimetypevalues:
      enum:
        - SettingDate
        - PlanningDate
        - StartDate
        - ReviewDate
        - CompletionDate
      type: string
      description: ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
    goaldatetime:
      type: object
      properties:
        GoalDateAndTime:
          $ref: '#/components/schemas/datetime'
        GoalDateAndTimeType:
          $ref: '#/components/schemas/goaldatetimetypevalues'
      description: 'The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date.'
    goalstatustypevalues:
      enum:
        - Setting
        - Planning
        - Execution
        - MonitoringAndEvaluation
        - CompletionOrAchievement
        - MaintenanceOrSustainment
        - ClosureOrRenewal
      type: string
      description: ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
    goalstatus:
      type: object
      properties:
        GoalStatus:
          $ref: '#/components/schemas/status'
        GoalStatusType:
          $ref: '#/components/schemas/goalstatustypevalues'
      description: 'The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal'
    goal:
      type: object
      properties:
        GoalType:
          $ref: '#/components/schemas/goaltypevalues'
        GoalDefinition:
          $ref: '#/components/schemas/text'
        GoalName:
          $ref: '#/components/schemas/name'
        GoalDateAndTime:
          $ref: '#/components/schemas/goaldatetime'
        GoalStatus:
          $ref: '#/components/schemas/goalstatus'
      description: ''
    customersurvey:
      type: object
      properties:
        CustomerSurveyType:
          $ref: '#/components/schemas/customersurveytypevalues'
        CustomerSurveyDescription:
          $ref: '#/components/schemas/text'
        CustomerSurveyVersion:
          $ref: '#/components/schemas/text'
        CustomerSurveyDateTime:
          $ref: '#/components/schemas/datetime'
        CustomerSurveyAspectType:
          $ref: '#/components/schemas/surveyaspecttypevalues'
        SelectionCriteria:
          $ref: '#/components/schemas/ruleset'
        CustomerSurveyObjective:
          $ref: '#/components/schemas/goal'
      description: " ||\r\n|"
    CustomerSurveyProcedure:
      type: object
      properties:
        CustomerSurveyType:
          $ref: '#/components/schemas/customersurveytypevalues'
        CustomerSurveyDescription:
          $ref: '#/components/schemas/text'
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerSurveyProcedureSet-up:
          $ref: '#/components/schemas/arrangement'
        CustomerSurveyProcedureVersionNumber:
          type: string
          description: The customer survey version number used
          format: number
        CustomerSurveySchedule:
          $ref: '#/components/schemas/schedule'
        CustomerSurveyConsumablesInventory:
          $ref: '#/components/schemas/iteminventory'
        CustomerSurveyConsumableType:
          $ref: '#/components/schemas/item'
        CustomerSurveyConsumableHolding:
          $ref: '#/components/schemas/iteminventory'
        CustomerSurveyProcedureDateType:
          $ref: '#/components/schemas/datetimetypevalues'
        CustomerSurveyProcedureDate:
          $ref: '#/components/schemas/date'
        CustomerSurveyProcedureResult:
          $ref: '#/components/schemas/text'
        CustomerSurveyReference:
          $ref: '#/components/schemas/customersurvey'
      description: 'Complete work tasks following a defined procedure in support of general office activities and product and service delivery within Customer Surveys. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerSurveyProcedure:
      description: CustomerSurveyProcedure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerSurveyProcedure'
    Definition:
      description: Definition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Definition'
    ParticipantSelection:
      description: ParticipantSelection
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ParticipantSelection'
    Execution:
      description: Execution
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Execution'
    SurveyAnalysis:
      description: SurveyAnalysis
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SurveyAnalysis'
  parameters:
    customersurveysid:
      name: customersurveysid
      in: path
      required: true
      style: simple
      schema:
        type: string
    definitionid:
      name: definitionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    participantselectionid:
      name: participantselectionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    executionid:
      name: executionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    surveyanalysisid:
      name: surveyanalysisid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerSurveyProcedure:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerSurveyProcedure'
      required: true
    Definition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Definition'
      required: true
    ParticipantSelection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ParticipantSelection'
      required: true
    Execution:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Execution'
      required: true
    SurveyAnalysis:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SurveyAnalysis'
      required: true