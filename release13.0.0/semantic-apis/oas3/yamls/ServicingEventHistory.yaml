openapi: 3.0.1
info:
  title: Servicing Event History
  description: 'This service domain captures, classifies and stores servicing activity and events to support root cause analysis'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/ServicingEventHistory/13.0.0
paths:
  /ServicingEventHistory/Initiate:
    post:
      tags:
        - CR - ServicingEventLog
      summary: InCR Initiate servicing event history tracking for a servicing resource
      description: InCR Initiate servicing event history tracking for a servicing resource
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/ServicingEventLog'
      responses:
        '200':
          $ref: '#/components/responses/ServicingEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Update':
    put:
      tags:
        - CR - ServicingEventLog
      summary: UpCR Update details about the log
      description: UpCR Update details about the log
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingEventLog'
      responses:
        '200':
          $ref: '#/components/responses/ServicingEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Control':
    put:
      tags:
        - CR - ServicingEventLog
      summary: CoCR Control event tracking for the servicing resource (e.g. suspend)
      description: CoCR Control event tracking for the servicing resource (e.g. suspend)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingEventLog'
      responses:
        '200':
          $ref: '#/components/responses/ServicingEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Retrieve':
    get:
      tags:
        - CR - ServicingEventLog
      summary: ReCR Retrieve details about the servicing event log
      description: ReCR Retrieve details about the servicing event log
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
      responses:
        '200':
          $ref: '#/components/responses/ServicingEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Assignment/{assignmentid}/Update':
    put:
      tags:
        - BQ - Assignment
      summary: UpBQ Update captured assignment event details
      description: UpBQ Update captured assignment event details
      operationId: UpdateAssignment
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/assignmentid'
      requestBody:
        $ref: '#/components/requestBodies/Assignment'
      responses:
        '200':
          $ref: '#/components/responses/Assignment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Assignment/{assignmentid}/Capture':
    put:
      tags:
        - BQ - Assignment
      summary: CaBQ Capture servicing position assignment event details
      description: CaBQ Capture servicing position assignment event details
      operationId: CaptureAssignment
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/assignmentid'
      requestBody:
        $ref: '#/components/requestBodies/Assignment'
      responses:
        '200':
          $ref: '#/components/responses/Assignment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Assignment/{assignmentid}/Retrieve':
    get:
      tags:
        - BQ - Assignment
      summary: ReBQ Retrieve servicing position assignment event details
      description: ReBQ Retrieve servicing position assignment event details
      operationId: RetrieveAssignment
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/assignmentid'
      responses:
        '200':
          $ref: '#/components/responses/Assignment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Session/{sessionid}/Update':
    put:
      tags:
        - BQ - Session
      summary: UpBQ Update captured customer servicing session event details
      description: UpBQ Update captured customer servicing session event details
      operationId: UpdateSession
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/sessionid'
      requestBody:
        $ref: '#/components/requestBodies/Session'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Session/{sessionid}/Capture':
    put:
      tags:
        - BQ - Session
      summary: CaBQ Capture customer servicing session event details
      description: CaBQ Capture customer servicing session event details
      operationId: CaptureSession
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/sessionid'
      requestBody:
        $ref: '#/components/requestBodies/Session'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Session/{sessionid}/Retrieve':
    get:
      tags:
        - BQ - Session
      summary: ReBQ Retrieve customer servicing event details
      description: ReBQ Retrieve customer servicing event details
      operationId: RetrieveSession
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/sessionid'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Issue/{issueid}/Update':
    put:
      tags:
        - BQ - Issue
      summary: UpBQ Update captured servicing issue event details
      description: UpBQ Update captured servicing issue event details
      operationId: UpdateIssue
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/issueid'
      requestBody:
        $ref: '#/components/requestBodies/Issue'
      responses:
        '200':
          $ref: '#/components/responses/Issue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Issue/{issueid}/Capture':
    put:
      tags:
        - BQ - Issue
      summary: CaBQ Capture servicing issue event details
      description: CaBQ Capture servicing issue event details
      operationId: CaptureIssue
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/issueid'
      requestBody:
        $ref: '#/components/requestBodies/Issue'
      responses:
        '200':
          $ref: '#/components/responses/Issue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/Issue/{issueid}/Retrieve':
    get:
      tags:
        - BQ - Issue
      summary: ReBQ Retrieve servicing issue event details
      description: ReBQ Retrieve servicing issue event details
      operationId: RetrieveIssue
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/issueid'
      responses:
        '200':
          $ref: '#/components/responses/Issue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/ServicingFacility/{servicingfacilityid}/Update':
    put:
      tags:
        - BQ - ServicingFacility
      summary: UpBQ Update captured facility utilization event details
      description: UpBQ Update captured facility utilization event details
      operationId: UpdateServicingFacility
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/servicingfacilityid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingFacility'
      responses:
        '200':
          $ref: '#/components/responses/ServicingFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/ServicingFacility/{servicingfacilityid}/Capture':
    put:
      tags:
        - BQ - ServicingFacility
      summary: CaBQ Capture  facility utilization event details
      description: CaBQ Capture  facility utilization event details
      operationId: CaptureServicingFacility
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/servicingfacilityid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingFacility'
      responses:
        '200':
          $ref: '#/components/responses/ServicingFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingEventHistory/{servicingeventhistoryid}/ServicingFacility/{servicingfacilityid}/Retrieve':
    get:
      tags:
        - BQ - ServicingFacility
      summary: ReBQ Retrieve  facility utilization event details
      description: ReBQ Retrieve  facility utilization event details
      operationId: RetrieveServicingFacility
      parameters:
        - $ref: '#/components/parameters/servicingeventhistoryid'
        - $ref: '#/components/parameters/servicingfacilityid'
      responses:
        '200':
          $ref: '#/components/responses/ServicingFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: 'Key dates and times associated with the assignment (e.g. start, end, break duration, available/idle time)'
    reporttypevalues:
      enum:
        - FinancialReport
        - BusinessReport
        - ManagementReport
        - Statement
        - MaintenanceReport
        - RegulatoryReport
        - TaxReport
        - AnalysisReport
      type: string
      description: ">\r\n* `FinancialReport` - \r\n* `BusinessReport` - \r\n* `ManagementReport` - \r\n* `Statement` - \r\n* `MaintenanceReport` - \r\n* `RegulatoryReport` - \r\n* `TaxReport` - \r\n* `AnalysisReport` - \r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Date and time at which the range starts. (ISO20022)
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    report:
      type: object
      properties:
        ReportType:
          $ref: '#/components/schemas/reporttypevalues'
        ReportValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        ReportVersion:
          type: string
          description: ''
          format: number
        ReportDateTime:
          $ref: '#/components/schemas/datetime'
        ReportFormat:
          $ref: '#/components/schemas/text'
      description: 'Log of servicing activity at that position during the session (e.g. contacts, sales, issues, breaks)'
    Assignment:
      type: object
      properties:
        DateTimeLocation:
          $ref: '#/components/schemas/text'
        ServicingPositionActivityReport:
          $ref: '#/components/schemas/report'
        ServicingPositionActivityStatistics:
          type: string
          description: 'Accumulated statistics during the session (e.g. average contact time, wait time, service utilization, facility usage)'
          format: object
      description: "A collection of the events/transactions recorded by the log\n\nExamples: Customer life event, Servicing event"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Employee/unit assigned to the servicing position (if the log is organized to track specific servicing reps that might work at different positions) ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The tracked status (e.g. under construction or repair, inhabited, vacant).'
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: The schedule of past and planned customer contacts
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: ''
    customercontact:
      type: object
      properties:
        ContactType:
          $ref: '#/components/schemas/text'
        ContactDateTime:
          $ref: '#/components/schemas/datetime'
        ContactLocation:
          $ref: '#/components/schemas/location'
        ContactSchedule:
          $ref: '#/components/schemas/schedule'
        ContactResult:
          $ref: '#/components/schemas/text'
        ContactPurpose:
          $ref: '#/components/schemas/text'
        ContactDevice:
          $ref: '#/components/schemas/device'
        ContactIndicator:
          $ref: '#/components/schemas/text'
        ContactContent:
          $ref: '#/components/schemas/text'
      description: Reference to the complete contact record for the customer contact
    duration:
      type: object
      properties:
        Duration:
          type: string
          description: 'A duration is the specification of a length of time without a fixed start or end time, expressed in Gregorian calendar time units (Year, Month, Week, Day) and Hours, Minutes or Seconds. (UN/CEFACT)'
          format: datatype
      description: The time the session was active
    sessiontypevalues:
      enum:
        - ContactHandlingSession
        - CustomerDialogueSession
        - ChannelOperatingSession
        - GatewayOperatingSession
        - SwitchOperatingSession
        - DeviceOperatingSession
        - InterbankTransactionOperatingSession
        - CorrespondenceOperatingSession
        - InteractiveHelpOperatingSession
        - ACHOperatingSession
      type: string
      description: ">\r\n* `ContactHandlingSession` - \r\n* `CustomerDialogueSession` - \r\n* `ChannelOperatingSession` - \r\n* `GatewayOperatingSession` - \r\n* `SwitchOperatingSession` - \r\n* `DeviceOperatingSession` - \r\n* `InterbankTransactionOperatingSession` - \r\n* `CorrespondenceOperatingSession` - \r\n* `InteractiveHelpOperatingSession` - \r\n* `ACHOperatingSession` - \r\n"
    sessiontype:
      type: object
      properties:
        SessionTypeName:
          $ref: '#/components/schemas/name'
        SessionType:
          $ref: '#/components/schemas/sessiontypevalues'
      description: 'Specifies the classification of session like Customer Contact Session, Channel Operating Session, Device Operating Session, etc.'
    session:
      type: object
      properties:
        SessionDuration:
          $ref: '#/components/schemas/duration'
        SessionDateTime:
          $ref: '#/components/schemas/datetime'
        SessionStatus:
          $ref: '#/components/schemas/status'
        SessionType:
          $ref: '#/components/schemas/sessiontype'
        SessionScheduel:
          $ref: '#/components/schemas/schedule'
      description: 'The type of channel device involved in the session exchange (e.g. web, phone, chat, video, VOIP, face to face at a branch - note there can be concurrent sessions within a single customer contact)'
    sessiondialoguelog:
      type: object
      properties:
        SessionDialogueLog:
          type: string
          description: A record of contact dialogue log entries.
          format: class
      description: Reference to a dialogue log that is built up
    Session:
      type: object
      properties:
        SessionStartEndTime:
          $ref: '#/components/schemas/datetime'
        CustomerContactReference:
          $ref: '#/components/schemas/customercontact'
        SessionMechanism:
          $ref: '#/components/schemas/session'
        ServicingFacilityType:
          $ref: '#/components/schemas/text'
        SessionDialogueRecord:
          $ref: '#/components/schemas/session'
        SessionDialogueType:
          $ref: '#/components/schemas/text'
        SessionDialogueScript:
          $ref: '#/components/schemas/session'
        SessionDialogueLogReference:
          $ref: '#/components/schemas/sessiondialoguelog'
        SessionDialogueLog:
          $ref: '#/components/schemas/sessiondialoguelog'
        SessionDialogueResult:
          $ref: '#/components/schemas/session'
      description: "A collection of the events/transactions recorded by the log\n\nExamples: Customer life event, Servicing event"
    ServicingFacility:
      type: object
      properties:
        ServicingFacilityType:
          $ref: '#/components/schemas/text'
        ServicingFacilityInstanceReference:
          $ref: '#/components/schemas/identifier'
      description: "A collection of the events/transactions recorded by the log\n\nExamples: Customer life event, Servicing event"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: ''
    position:
      type: object
      properties:
        PositionValue:
          $ref: '#/components/schemas/value'
        PositionQuantity:
          type: string
          description: ''
          format: number
        PositionDate:
          $ref: '#/components/schemas/datetime'
        PositionAmount:
          $ref: '#/components/schemas/amount'
      description: The servicing position for the log (if the log is organized to track specific positions) Position |Position  (https://www.iso20022.org/standardsrepository/type/Position)|Standard|ISO20022 BM ()
    assessmenttypevalues:
      enum:
        - AssetValuation
        - ProductMatching
        - Authorization
        - Authentication
        - QualityAssurance
        - Audit
        - ComplianceCheck
        - FundingCheck
        - SuitabilityCheck
        - PerformanceCheck
        - ImpactAssessment
        - RiskAssessment
        - Rating
        - UnderwritingAssessment
        - Qualification
        - Verification
        - KYCAssessment
        - PEPAssessment
        - AMLAssessment
      type: string
      description: ">\r\n* `AssetValuation` - \r\n* `ProductMatching` - \r\n* `Authorization` - An evaluation whether a party or system is allowed to do something.\n\nThe consent given by a participant (or a third party acting on behalf of that participant) in order to transfer funds or securities. (ECB)\n\nAuthorization is a mechanism by which a computer system determines whether to allow or deny specific action to a user. Authorization is often controlled by rather complex rules and algorithms, usually specified as part of an access control model. Authorization often follows (and required) authentication, however, authentication and authorization are two separate mechanisms. In rare cases, \"authorization\" is understood as a process of allowing access, granting permissions or giving approval. Such as \"authorization\" of a request to join a group. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `Authentication` - An evaluation whether a party or system is what it claims to be.\n\nA security mechanism for verifying: 1) the identity of an individual or other entity (including verification by means of a computer or computer application); and 2) the level of authority of that person or entity (i.e. the ability of that person or entity to perform specific tasks or activities). (ECB)\n\nAuthentication is a mechanism by which a computer system checks that the user is really the one she or he claims to be. Authentication can be implemented by a broad variety of mechanisms broadly divided into three categories: something you know, something you have, something you are. Traditionally, authentication is done by the means of by username and password. Authentication is often followed by authorization, however, authentication and authorization are two separate mechanisms. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `QualityAssurance` - \r\n* `Audit` - \r\n* `ComplianceCheck` - \r\n* `FundingCheck` - \r\n* `SuitabilityCheck` - \r\n* `PerformanceCheck` - \r\n* `ImpactAssessment` - \r\n* `RiskAssessment` - \r\n* `Rating` - \r\n* `UnderwritingAssessment` - \r\n* `Qualification` - \r\n* `Verification` - A process establishing that a particular information is correct, while the meaning of \"information\" and \"correct\" varies from context to context. When dealing with identity information, this usually means formal verification of identity attributes, checking the schema, identifier uniqueness and referential integrity. However, verification may mean deeper verification, such as checking that the information is true and up-to-date.  (ISO/IEC 24760-1:2019 - IT Security and Privacy)\n\r\n* `KYCAssessment` - An assessment conducted by businesses and financial institutions to verify and confirm the identity of their customers or clients. The primary purpose of a KYC check is to prevent illegal activities, such as money laundering, terrorist financing, and fraud, by ensuring that customers are who they claim to be.\r\n* `PEPAssessment` - A PEP check, or \"Politically Exposed Person\" check, is an assessment conducted by used by businesses, financial institutions, and government agencies to identify individuals who hold prominent public positions or have significant political influence. The purpose of a PEP check is to assess and manage the potential risks associated with doing business with these individuals, as they may be more susceptible to corruption, money laundering, or other illicit activities.\r\n* `AMLAssessment` - An AML (Anti-Money Laundering) check is an assessment conducted by businesses, financial institutions, and other organizations to prevent and detect money laundering and the financing of criminal activities. The main purpose of an AML check is to ensure that financial transactions and business relationships are not being used to disguise the illegal origins of funds.\r\n"
    model:
      type: object
      properties:
        ModelType:
          $ref: '#/components/schemas/text'
        ModelPurpose:
          $ref: '#/components/schemas/text'
        ModelVersion:
          $ref: '#/components/schemas/text'
        ModelName:
          $ref: '#/components/schemas/name'
        ModelDateAndTime:
          $ref: '#/components/schemas/datetime'
        ModelStatus:
          $ref: '#/components/schemas/status'
      description: ''
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: Document that provides background or corroborating information regarding an assessment(s).
    requirement:
      type: object
      properties:
        RequirementType:
          type: string
          description: ''
          format: string
      description: ''
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: Date when the assessment expires. (ISO20022)
    assessment:
      type: object
      properties:
        AssessmentType:
          $ref: '#/components/schemas/assessmenttypevalues'
        AssessmentMethod:
          $ref: '#/components/schemas/text'
        AssessmentSchedule:
          $ref: '#/components/schemas/schedule'
        AssessmentDescription:
          $ref: '#/components/schemas/text'
        AssessmentModel:
          $ref: '#/components/schemas/model'
        AssessmentDateTime:
          $ref: '#/components/schemas/datetime'
        AssessmentResult:
          $ref: '#/components/schemas/text'
        AssessmentSupportingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRepresentingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRequiredAdjustment:
          $ref: '#/components/schemas/text'
        AssessmentRequirement:
          $ref: '#/components/schemas/requirement'
        AssessmentExpiryDate:
          $ref: '#/components/schemas/date'
        AssessmentStatus:
          $ref: '#/components/schemas/status'
      description: An evaluation of the event cause and impact
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: Description of corrective actions and assigned parties
    Issue:
      type: object
      properties:
        ServicingPositionReference:
          $ref: '#/components/schemas/position'
        ServicingPositionSessionReference:
          $ref: '#/components/schemas/session'
        EmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        ProductionIssueType:
          $ref: '#/components/schemas/text'
        ProductionIssueDescription:
          $ref: '#/components/schemas/text'
        ProductionIssueDiagnosis:
          $ref: '#/components/schemas/assessment'
        ProductionIssueResolutionTask:
          $ref: '#/components/schemas/task'
      description: "A collection of the events/transactions recorded by the log\n\nExamples: Customer life event, Servicing event"
    ServicingEventLog:
      type: object
      properties:
        ServicingPositionReference:
          $ref: '#/components/schemas/position'
        EmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
      description: 'Maintain a log of transactions or activity, typically a financial account/journal or a log of activity to support behavioral analysis within Servicing Event History. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    ServicingEventLog:
      description: ServicingEventLog
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServicingEventLog'
    Assignment:
      description: Assignment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assignment'
    Session:
      description: Session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'
    Issue:
      description: Issue
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Issue'
    ServicingFacility:
      description: ServicingFacility
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServicingFacility'
  parameters:
    servicingeventhistoryid:
      name: servicingeventhistoryid
      in: path
      required: true
      style: simple
      schema:
        type: string
    assignmentid:
      name: assignmentid
      in: path
      required: true
      style: simple
      schema:
        type: string
    sessionid:
      name: sessionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    issueid:
      name: issueid
      in: path
      required: true
      style: simple
      schema:
        type: string
    servicingfacilityid:
      name: servicingfacilityid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    ServicingEventLog:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServicingEventLog'
      required: true
    Assignment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assignment'
      required: true
    Session:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'
      required: true
    Issue:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Issue'
      required: true
    ServicingFacility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServicingFacility'
      required: true