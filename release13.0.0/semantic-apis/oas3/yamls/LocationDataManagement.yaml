openapi: 3.0.1
info:
  title: Location Data Management
  description: This service domain maintain details of the use and state of locations of interest to the bank. This can include both physical and virtual addresses. It is used to check for valid use and for sales/marketing activities
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/LocationDataManagement/13.0.0
paths:
  /LocationDataManagement/Register:
    post:
      tags:
        - CR - LocationDirectoryEntry
      summary: InCR Register a location in the catalog
      description: InCR Register a location in the catalog
      operationId: Register
      requestBody:
        $ref: '#/components/requestBodies/LocationDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/LocationDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Update':
    put:
      tags:
        - CR - LocationDirectoryEntry
      summary: UpCR Update details about the location's directory entry
      description: UpCR Update details about the location's directory entry
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
      requestBody:
        $ref: '#/components/requestBodies/LocationDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/LocationDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Control':
    put:
      tags:
        - CR - LocationDirectoryEntry
      summary: CoCR Control the handling of a location entry (e.g. terminate)
      description: CoCR Control the handling of a location entry (e.g. terminate)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
      requestBody:
        $ref: '#/components/requestBodies/LocationDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/LocationDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Request':
    put:
      tags:
        - CR - LocationDirectoryEntry
      summary: RqCR Request manual intervention with an entry (e.g. refresh content)
      description: RqCR Request manual intervention with an entry (e.g. refresh content)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
      requestBody:
        $ref: '#/components/requestBodies/LocationDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/LocationDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Retrieve':
    get:
      tags:
        - CR - LocationDirectoryEntry
      summary: ReCR Retrieve details about a location directory entry
      description: ReCR Retrieve details about a location directory entry
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
      responses:
        '200':
          $ref: '#/components/responses/LocationDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Exchange':
    put:
      tags:
        - CR - LocationDirectoryEntry
      summary: 'EcCR Accept, verify, reject a directory entry'
      description: 'EcCR Accept, verify, reject a directory entry'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
      requestBody:
        $ref: '#/components/requestBodies/LocationDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/LocationDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Execute':
    put:
      tags:
        - CR - LocationDirectoryEntry
      summary: ExCR Execute an automated action against an entry
      description: ExCR Execute an automated action against an entry
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
      requestBody:
        $ref: '#/components/requestBodies/LocationDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/LocationDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Location/{locationid}/Exchange':
    put:
      tags:
        - BQ - Location
      summary: 'EcBQ Accept, verify, reject etc. details of a location directory entry'
      description: 'EcBQ Accept, verify, reject etc. details of a location directory entry'
      operationId: ExchangeLocation
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
        - $ref: '#/components/parameters/locationid'
      requestBody:
        $ref: '#/components/requestBodies/Location'
      responses:
        '200':
          $ref: '#/components/responses/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Location/{locationid}/Update':
    put:
      tags:
        - BQ - Location
      summary: UpBQ Update details about a location entry
      description: UpBQ Update details about a location entry
      operationId: UpdateLocation
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
        - $ref: '#/components/parameters/locationid'
      requestBody:
        $ref: '#/components/requestBodies/Location'
      responses:
        '200':
          $ref: '#/components/responses/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Location/{locationid}/Retrieve':
    get:
      tags:
        - BQ - Location
      summary: ReBQ Retrieve details about location entries in the directory
      description: ReBQ Retrieve details about location entries in the directory
      operationId: RetrieveLocation
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
        - $ref: '#/components/parameters/locationid'
      responses:
        '200':
          $ref: '#/components/responses/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Use/{useid}/Update':
    put:
      tags:
        - BQ - Use
      summary: UpBQ Update details about an usage entry for the location
      description: UpBQ Update details about an usage entry for the location
      operationId: UpdateUse
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
        - $ref: '#/components/parameters/useid'
      requestBody:
        $ref: '#/components/requestBodies/Use'
      responses:
        '200':
          $ref: '#/components/responses/Use'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Use/{useid}/Retrieve':
    get:
      tags:
        - BQ - Use
      summary: ReBQ Retrieve details about usage entries in the location directory
      description: ReBQ Retrieve details about usage entries in the location directory
      operationId: RetrieveUse
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
        - $ref: '#/components/parameters/useid'
      responses:
        '200':
          $ref: '#/components/responses/Use'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Occupancy/{occupancyid}/Update':
    put:
      tags:
        - BQ - Occupancy
      summary: UpBQ Update details about a location's occupancy
      description: UpBQ Update details about a location's occupancy
      operationId: UpdateOccupancy
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
        - $ref: '#/components/parameters/occupancyid'
      requestBody:
        $ref: '#/components/requestBodies/Occupancy'
      responses:
        '200':
          $ref: '#/components/responses/Occupancy'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/LocationDataManagement/{locationdatamanagementid}/Occupancy/{occupancyid}/Retrieve':
    get:
      tags:
        - BQ - Occupancy
      summary: ReBQ Retrieve details about location's occupancy entry in the directory
      description: ReBQ Retrieve details about location's occupancy entry in the directory
      operationId: RetrieveOccupancy
      parameters:
        - $ref: '#/components/parameters/locationdatamanagementid'
        - $ref: '#/components/parameters/occupancyid'
      responses:
        '200':
          $ref: '#/components/responses/Occupancy'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    locationtypevalues:
      enum:
        - GeographicalArea
        - DigitalArea
        - StatisticalArea
        - TimeZone
        - TreatyArea
      type: string
      description: ">\r\n* `GeographicalArea` - \r\n* `DigitalArea` - \r\n* `StatisticalArea` - \r\n* `TimeZone` - \r\n* `TreatyArea` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: 'A description of the property, particularly if it has landmark characteristics.'
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Value of the date type ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Party who plays a  specific role in the context of assigning a status.
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The tracked status (e.g. under construction or repair, inhabited, vacant).'
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: Reference to associated location (can be a physical or electronic location) Location|Location (https://www.iso20022.org/standardsrepository/type/Location)|Standard|ISO20022 BM  ()
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: 'Reference address for the location (e.g. postal address, email, coordinates)'
    Location:
      type: object
      properties:
        LocationType:
          $ref: '#/components/schemas/locationtypevalues'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationCoordinates:
          $ref: '#/components/schemas/text'
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
      description: "\"An assertion or statement with regard to a concept, a characteristic.\n\nExamples: Product pricing rules, Customer reference details\n\nA descriptor can be atomic or composed.\"\nProspect Management"
    locationusage:
      type: object
      properties:
        LocationUsage:
          type: string
          description: 'The purpose or usage of  location in relationship to the associated object like the mailing address for letters or URL for email address.  '
          format: class
      description: 'The allowed usage for the property at the location (e.g. domestic residence, manufacturing, retail)'
    Use:
      type: object
      properties:
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationUsage:
          $ref: '#/components/schemas/locationusage'
      description: "\"An assertion or statement with regard to a concept, a characteristic.\n\nExamples: Product pricing rules, Customer reference details\n\nA descriptor can be atomic or composed.\"\nProspect Management"
    locationarrangement:
      type: object
      properties:
        LocationArrangement:
          type: string
          description: ''
          format: class
      description: 'Nature of the access terms or entitlement of the occupier (e.g. leasehold, rental, public access)'
    Occupancy:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        LocationOwnerTitle:
          $ref: '#/components/schemas/involvedparty'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationOccupierType:
          $ref: '#/components/schemas/text'
        LocationOccupierReference:
          $ref: '#/components/schemas/involvedparty'
        LocationOccupierTerms:
          $ref: '#/components/schemas/locationarrangement'
        AlliancePartnerReference:
          $ref: '#/components/schemas/involvedparty'
      description: "\"An assertion or statement with regard to a concept, a characteristic.\n\nExamples: Product pricing rules, Customer reference details\n\nA descriptor can be atomic or composed.\"\nProspect Management"
    directoryentrydatetypevalues:
      enum:
        - OpenDate
        - RefreshDate
      type: string
      description: "Key dates associated with the directory entry (e.g. open date, refresh date) ||\r\n|"
    LocationDirectoryEntry:
      type: object
      properties:
        LocationReference:
          $ref: '#/components/schemas/location'
        DirectoryEntryDateType:
          $ref: '#/components/schemas/directoryentrydatetypevalues'
        DirectoryEntryDate:
          $ref: '#/components/schemas/datetime'
      description: Capture and maintain reference information about some type of entitity within Location Data Management.
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    LocationDirectoryEntry:
      description: LocationDirectoryEntry
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationDirectoryEntry'
    Location:
      description: Location
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Location'
    Use:
      description: Use
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Use'
    Occupancy:
      description: Occupancy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Occupancy'
  parameters:
    locationdatamanagementid:
      name: locationdatamanagementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    locationid:
      name: locationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    useid:
      name: useid
      in: path
      required: true
      style: simple
      schema:
        type: string
    occupancyid:
      name: occupancyid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    LocationDirectoryEntry:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationDirectoryEntry'
      required: true
    Location:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Location'
      required: true
    Use:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Use'
      required: true
    Occupancy:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Occupancy'
      required: true