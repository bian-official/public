openapi: 3.0.1
info:
  title: Servicing Mandate
  description: This service domain maintains the allowed customer servicing arrangements for a service provider covering general access to the bank's products and services and optionally customer specific arrangements
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/ServicingMandate/13.0.0
paths:
  /ServicingMandate/Evaluate:
    post:
      tags:
        - CR - ServicingMandateAgreement
      summary: EvCR Agree terms for a third party servicing mandate
      description: EvCR Agree terms for a third party servicing mandate
      operationId: Evaluate
      requestBody:
        $ref: '#/components/requestBodies/ServicingMandateAgreement'
      responses:
        '200':
          $ref: '#/components/responses/ServicingMandateAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/Update':
    put:
      tags:
        - CR - ServicingMandateAgreement
      summary: UpCR Update terms for a third part mandate
      description: UpCR Update terms for a third part mandate
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingMandateAgreement'
      responses:
        '200':
          $ref: '#/components/responses/ServicingMandateAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/Control':
    put:
      tags:
        - CR - ServicingMandateAgreement
      summary: CoCR Control the handling of a third party mandate (e.g. terminate)
      description: CoCR Control the handling of a third party mandate (e.g. terminate)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingMandateAgreement'
      responses:
        '200':
          $ref: '#/components/responses/ServicingMandateAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/Exchange':
    put:
      tags:
        - CR - ServicingMandateAgreement
      summary: 'EcCR Accept, verify, reject, etc a third party servicing mandate'
      description: 'EcCR Accept, verify, reject, etc a third party servicing mandate'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingMandateAgreement'
      responses:
        '200':
          $ref: '#/components/responses/ServicingMandateAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/Request':
    put:
      tags:
        - CR - ServicingMandateAgreement
      summary: RqCR Request manual intervention in a third party mandate (e.g. reinstate after production issues)
      description: RqCR Request manual intervention in a third party mandate (e.g. reinstate after production issues)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingMandateAgreement'
      responses:
        '200':
          $ref: '#/components/responses/ServicingMandateAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/Grant':
    put:
      tags:
        - CR - ServicingMandateAgreement
      summary: GrCR Grant access under the third party mandate
      description: GrCR Grant access under the third party mandate
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
      requestBody:
        $ref: '#/components/requestBodies/ServicingMandateAgreement'
      responses:
        '200':
          $ref: '#/components/responses/ServicingMandateAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/Retrieve':
    get:
      tags:
        - CR - ServicingMandateAgreement
      summary: ReCR Retrieve details about a third party mandate
      description: ReCR Retrieve details about a third party mandate
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
      responses:
        '200':
          $ref: '#/components/responses/ServicingMandateAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/CustomerMandate/Evaluate':
    post:
      tags:
        - BQ - CustomerMandate
      summary: EvBQ Agree terms for a customer mandate under the service mandate
      description: EvBQ Agree terms for a customer mandate under the service mandate
      operationId: EvaluateCustomerMandate
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerMandate'
      responses:
        '200':
          $ref: '#/components/responses/CustomerMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/CustomerMandate/{customermandateid}/Update':
    put:
      tags:
        - BQ - CustomerMandate
      summary: UpBQ Update details of the customer mandate
      description: UpBQ Update details of the customer mandate
      operationId: UpdateCustomerMandate
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
        - $ref: '#/components/parameters/customermandateid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerMandate'
      responses:
        '200':
          $ref: '#/components/responses/CustomerMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/CustomerMandate/{customermandateid}/Control':
    put:
      tags:
        - BQ - CustomerMandate
      summary: CoBQ Control the handling of the customer mandate (e.g. suspend)
      description: CoBQ Control the handling of the customer mandate (e.g. suspend)
      operationId: ControlCustomerMandate
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
        - $ref: '#/components/parameters/customermandateid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerMandate'
      responses:
        '200':
          $ref: '#/components/responses/CustomerMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/CustomerMandate/{customermandateid}/Exchange':
    put:
      tags:
        - BQ - CustomerMandate
      summary: 'EcBQ Accept, verify, reject etc. a customer mandate'
      description: 'EcBQ Accept, verify, reject etc. a customer mandate'
      operationId: ExchangeCustomerMandate
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
        - $ref: '#/components/parameters/customermandateid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerMandate'
      responses:
        '200':
          $ref: '#/components/responses/CustomerMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/CustomerMandate/{customermandateid}/Grant':
    put:
      tags:
        - BQ - CustomerMandate
      summary: GrBQ Grant access under the customer mandate
      description: GrBQ Grant access under the customer mandate
      operationId: GrantCustomerMandate
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
        - $ref: '#/components/parameters/customermandateid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerMandate'
      responses:
        '200':
          $ref: '#/components/responses/CustomerMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ServicingMandate/{servicingmandateid}/CustomerMandate/{customermandateid}/Retrieve':
    get:
      tags:
        - BQ - CustomerMandate
      summary: ReBQ Retrieve details about the customer mandate
      description: ReBQ Retrieve details about the customer mandate
      operationId: RetrieveCustomerMandate
      parameters:
        - $ref: '#/components/parameters/servicingmandateid'
        - $ref: '#/components/parameters/customermandateid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The particular date and time point in the progression of time
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: The term for the mandate to be in force DateTimePeriod|DateTimePeriod (https://www.iso20022.org/standardsrepository/type/DateTimePeriod)|Standard|ISO20022 BM ()
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the third party service provider with the servicing mandate (also a bank customer) ||\r\n|"
    customerproductserviceprofiletypevalues:
      enum:
        - Customerproductserviceeligibilityprofile
        - Customerproductserviceusageprofile
        - Customerproductservicecoverageprofile
        - Customerproductservicesaleprofile
        - Customerproductserviceconsentprofile
      type: string
      description: ">\r\n* `Customerproductserviceeligibilityprofile` - \r\n* `Customerproductserviceusageprofile` - \r\n* `Customerproductservicecoverageprofile` - \r\n* `Customerproductservicesaleprofile` - \r\n* `Customerproductserviceconsentprofile` - \r\n"
    customerrelationship:
      type: object
      properties:
        CustomerRelationship:
          type: string
          description: 'A specific relationship between a specific Bank (= party acting as a supplier of banking services) and one or more other involved parties acting as (potential) consumers of banking services as agreed in one or more banking product or service offerings and/or agreements. '
          format: class
      description: ''
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: ''
    servicetypevalues:
      enum:
        - ITService
        - AdministrativeService
        - SystemService
        - FinancialService
        - InformationService
        - BusinessService
      type: string
      description: ">\r\n* `ITService` - \r\n* `AdministrativeService` - \r\n* `SystemService` - \r\n* `FinancialService` - \r\n* `InformationService` - \r\n* `BusinessService` - \r\n"
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This feature calculates and tracks interest earnings or charges on accounts, loans, or investments over time.\r\n* `WithdrawalFeature` - The withdraw feature typically refers to an option or functionality that allows users to retrieve or remove something from a system or platform.\r\n* `DepositFeature` - This refers to a functionality that allows users to add funds to an account or system, often by transferring money from another source.\r\n* `SweepFeature` - \r\n* `LienFeature` - \r\n* `PaymentFeature` - This refers to the functionality that facilitates or tracks the transfer of funds for a purchase or settlement of dues.\r\n* `RepaymentFeature` - This feature facilitates or manages the process of paying back borrowed funds, such as loans, credit card balances, or advances.\r\n* `LimitFeature` - This feature sets, monitors, or enforces restrictions on the maximum amount that can be accessed, spent, or transacted within a system.\r\n* `OverdraftFeature` - This functionality allows users to withdraw more money than what is available in their account balance, often up to a predefined limit.\r\n* `StatementFeature` - The statement feature refers to a functionality in banking, finance, or digital platforms that provides users with a detailed record of their transactions or activities over a specific period.\r\n* `CurrencyExchangeFeature` - This feature enables users to convert funds from one currency to another at prevailing exchange rates, often within financial or payment platforms.\r\n* `PriceFeature` - This feature involves displaying or managing the price of goods, services, or financial instruments within a platform.\r\n"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: A characteristic of service which refers 1) mainly to the function or condition of service. 2) to non-functional features like quality and security
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        ServiceIdentification:
          $ref: '#/components/schemas/identifier'
        ServiceLifecycleStatus:
          $ref: '#/components/schemas/status'
        ServiceFeature:
          $ref: '#/components/schemas/feature'
      description: ''
    customerproductandserviceprofile:
      type: object
      properties:
        ProfileType:
          $ref: '#/components/schemas/customerproductserviceprofiletypevalues'
        CustomerReference:
          $ref: '#/components/schemas/customerrelationship'
        ProductReference:
          $ref: '#/components/schemas/bankingproduct'
        ServiceReference:
          $ref: '#/components/schemas/service'
      description: "The record of the overarching product/service access profile permitted under the servicing mandate ||\r\n|"
    productfeaturetypevalues:
      enum:
        - Bankingservice
        - Administrationservice
        - Accessservice
        - Pricefeature
      type: string
      description: ">\r\n* `Bankingservice` - A classification that distinguishes between instances of product features according to the core banking services, functionality and/or objectives of banking.\n\ne.g. deposit services, exchange services, etc.\n\nThe primary reason for the contract with the client are the banking services. These services can be classified as follows:\n1. Selling services\n2. Financial Instruments Exchange\n3. Financial Stock Management\n4. Financial Transfers\n5. Financial Risk Transfer\n6. Business Operating\n7. Advisory\n8. Reporting\n\n\r\n* `Administrationservice` - A classification that distinguishes between instances of product features according to administrative tasks related to the Banking Product or Service.\r\n* `Accessservice` - A classification that distinguishes between product features according to way of the banking services can be accessed.\n\nThe access to services becomes more and more important in the evolving markets. \nWe need to separate different parts:\n1. The physical access to the infrastructure that allows access to the bank (where)\n2. The authorization of different parties to use the services of the bank (who)\n3. The agreed procedure to have access to different services (how)\n4. The services that are available for the different parties (what)\n\r\n* `Pricefeature` - A classification that distinguishes between instances of product features according to the cost/profit that is related to Banking Products or Services.\n\nIn all commercial offerings, there is an agreed cost for both parties (e.g. the interest arrangements are in both directions). The pricing structure of products or packages is a service that gives the possibility to the client to adapt his costs to his individual situation.\nWe see different generic categories in the pricing structure of the different products.\n1. Compensations\n2. Prices\n3. Fees\n4. Discounts\r\n"
    productfeaturetype:
      type: object
      properties:
        ProductFeatureTypeValues:
          $ref: '#/components/schemas/productfeaturetypevalues'
      description: "A type of product or service covered by the mandate ||\r\n|"
    obaccountaccesspermissiontypevalues:
      enum:
        - Readaccountsbasic
        - Readaccountsdetail
        - Readbalances
        - Readbeneficiariesbasic
        - Readbeneficiariesdetail
        - Readdirectdebits
        - Readoffers
        - Readpan
        - Readparty
        - Readpartypsu
        - Readproducts
        - Readscheduledpaymentsbasic
        - Readscheduledpaymentsdetail
        - Readstandingordersbasic
        - Readstandingordersdetail
        - Readstatementsbasic
        - Readstatementsdetail
        - Readtransactionsbasic
        - Readtransactionscredits
        - Readtransactionsdebits
        - Readtransactionsdetail
      type: string
      description: ">\r\n* `Readaccountsbasic` - Ability to read basic account information\r\n* `Readaccountsdetail` - Ability to read account identification details\r\n* `Readbalances` - Ability to read all balance information\r\n* `Readbeneficiariesbasic` - Ability to read basic beneficiary details\r\n* `Readbeneficiariesdetail` - Ability to read account identification details for the beneficiary\r\n* `Readdirectdebits` - Ability to read all direct debit information\r\n* `Readoffers` - Ability to read all offer information\r\n* `Readpan` - Request to access PAN in the clear across the available endpoints.\r\n* `Readparty` - Ability to read party information on the account owner.\r\n* `Readpartypsu` - Ability to read party information on the PSU logged in.\r\n* `Readproducts` - Ability to read all product information relating to the account\r\n* `Readscheduledpaymentsbasic` - Ability to read basic statement details\r\n* `Readscheduledpaymentsdetail` - \r\n* `Readstandingordersbasic` - \r\n* `Readstandingordersdetail` - \r\n* `Readstatementsbasic` - Ability to read basic statement details\r\n* `Readstatementsdetail` - Ability to read statement data elements which may leak other information about the account\r\n* `Readtransactionsbasic` - Ability to read basic transaction information\r\n* `Readtransactionscredits` - \r\n* `Readtransactionsdebits` - Ability to read only debit transactions\r\n* `Readtransactionsdetail` - Ability to read transaction data elements which may hold silent party details\r\n"
    consentstatustypevalues:
      enum:
        - Authorised
        - AwaitingAuthorization
        - Rejected
        - Revoked
      type: string
      description: ">\r\n* `Authorised` - \r\n* `AwaitingAuthorization` - \r\n* `Rejected` - \r\n* `Revoked` - \r\n"
    servicingmandatearrangement:
      type: object
      properties:
        AccessPermissionType:
          $ref: '#/components/schemas/obaccountaccesspermissiontypevalues'
        AccessPermissionExpirationDate:
          $ref: '#/components/schemas/datetime'
        AccessPermissionStatus:
          $ref: '#/components/schemas/consentstatustypevalues'
      description: "Defines if and under what terms a product/service is accessible under the mandate ||\r\n|"
    CustomerMandate:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        ServicingMandateAgreementCustomerProductandServiceProfile:
          $ref: '#/components/schemas/customerproductandserviceprofile'
        ProductandServiceType:
          $ref: '#/components/schemas/productfeaturetype'
        ServicingMandateAgreementCustomerProductandServiceTypeAccess:
          $ref: '#/components/schemas/servicingmandatearrangement'
        ServicingMandateAgreementCustomerProductandServiceTypeUsage:
          $ref: '#/components/schemas/servicingmandatearrangement'
      description: Reference to the terms in force for a specific customer for this service provider
    servicingmandatetypevalues:
      type: object
      properties:
        Servicingmandatetypevalues:
          type: string
          description: ''
          format: enumeration
      description: "The type of third party mandates (e.g. PSD2) ||\r\n|"
    jurisdiction:
      type: object
      properties:
        Jurisdiction:
          type: string
          description: Jurisdiction that will be assigned in case of legal dispute.
          format: class
      description: The defines any limitation on the geographic coverage/scope of the mandate Jurisdiction|Jurisdiction (https://www.iso20022.org/standardsrepository/type/Jurisdiction)|Standard|ISO20022 BM ()
    servicingmandateinvolvementtypevalues:
      enum:
        - PartyWhoGivesThePermissionToParty
        - PartyWhoTakesThePermissionFromParty
        - PartyWhoAuthorisesThePermissionOfParty
      type: string
      description: ">\r\n* `PartyWhoGivesThePermissionToParty` - \r\n* `PartyWhoTakesThePermissionFromParty` - \r\n* `PartyWhoAuthorisesThePermissionOfParty` - \r\n"
    servicingmandate:
      type: object
      properties:
        ServicingMandate:
          type: string
          description: 'An agreement between the customer and a service provider to authorise the service provider to access Products and Services on behalf of the customer. '
          format: class
      description: "Reference to the Servicing Mandate. ||\r\n|"
    servicingmandateinvolvement:
      type: object
      properties:
        ServicingMandateInvolvementType:
          $ref: '#/components/schemas/servicingmandateinvolvementtypevalues'
        PartyReference:
          $ref: '#/components/schemas/party'
        ServicingMandateReference:
          $ref: '#/components/schemas/servicingmandate'
      description: "Reference to any involved authorities and interested parties ||\r\n|"
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: "Reference to any supporting documents ||\r\n|"
    ServicingMandateAgreement:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        ServicingMandateAgreementType:
          $ref: '#/components/schemas/servicingmandatetypevalues'
        ServicingMandateAgreementJurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        ServicingMandateAgreementValidFromToDate:
          $ref: '#/components/schemas/datetimeperiod'
        ServicingMandateAgreementResponsibleParties:
          $ref: '#/components/schemas/servicingmandateinvolvement'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        ServicingMandateAgreementProductandServiceProfileReference:
          $ref: '#/components/schemas/customerproductandserviceprofile'
        ServicingMandateAgreementProductandServiceProfile:
          $ref: '#/components/schemas/customerproductandserviceprofile'
        ProductandServiceType:
          $ref: '#/components/schemas/productfeaturetype'
        ServicingMandateAgreementProductandServiceTypeEligibility:
          $ref: '#/components/schemas/servicingmandatearrangement'
        ServicingMandateAgreementReference:
          $ref: '#/components/schemas/servicingmandate'
      description: "Maintain the terms and conditions that apply to a commercial relationship within Servicing Mandate.\n\n\n"
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    ServicingMandateAgreement:
      description: ServicingMandateAgreement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServicingMandateAgreement'
    CustomerMandate:
      description: CustomerMandate
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerMandate'
  parameters:
    servicingmandateid:
      name: servicingmandateid
      in: path
      required: true
      style: simple
      schema:
        type: string
    customermandateid:
      name: customermandateid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    ServicingMandateAgreement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServicingMandateAgreement'
      required: true
    CustomerMandate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerMandate'
      required: true