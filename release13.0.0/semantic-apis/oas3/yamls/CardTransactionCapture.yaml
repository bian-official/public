openapi: 3.0.1
info:
  title: Card Transaction Capture
  description: A distributed facility to capture card transactions at the point of sale
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CardTransactionCapture/13.0.0
paths:
  '/CardTransactionCapture/{cardtransactioncaptureid}/Control':
    put:
      tags:
        - CR - CardFinancialCaptureTransaction
      summary: CoCR Control the processing of Credit Charge Card Financial Capture Transaction
      description: CoCR Control the processing of Credit Charge Card Financial Capture Transaction
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/cardtransactioncaptureid'
      requestBody:
        $ref: '#/components/requestBodies/ControlCardFinancialCaptureTransactionRequest'
      responses:
        '200':
          $ref: '#/components/responses/ControlCardFinancialCaptureTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTransactionCapture/{cardtransactioncaptureid}/Exchange':
    put:
      tags:
        - CR - CardFinancialCaptureTransaction
      summary: 'EcCR Accept, verify, etc. aspects of Credit Charge Card Financial Capture Transaction processing'
      description: 'EcCR Accept, verify, etc. aspects of Credit Charge Card Financial Capture Transaction processing'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/cardtransactioncaptureid'
      requestBody:
        $ref: '#/components/requestBodies/ExchangeCardFinancialCaptureTransactionRequest'
      responses:
        '200':
          $ref: '#/components/responses/ExchangeCardFinancialCaptureTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTransactionCapture/{cardtransactioncaptureid}/Execute':
    put:
      tags:
        - CR - CardFinancialCaptureTransaction
      summary: ExCR Execute an available automated action for Credit Charge Card Financial Capture Transaction
      description: ExCR Execute an available automated action for Credit Charge Card Financial Capture Transaction
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/cardtransactioncaptureid'
      requestBody:
        $ref: '#/components/requestBodies/ExecuteCardFinancialCaptureTransactionRequest'
      responses:
        '200':
          $ref: '#/components/responses/ExecuteCardFinancialCaptureTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /CardTransactionCapture/Initiate:
    post:
      tags:
        - CR - CardFinancialCaptureTransaction
      summary: InCR Instantiate a new Credit Charge Card Financial Capture Transaction
      description: InCR Instantiate a new Credit Charge Card Financial Capture Transaction
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/InitiateCardFinancialCaptureTransactionRequest'
      responses:
        '200':
          $ref: '#/components/responses/InitiateCardFinancialCaptureTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTransactionCapture/{cardtransactioncaptureid}/Retrieve':
    get:
      tags:
        - CR - CardFinancialCaptureTransaction
      summary: ReCR Retrieve details about any aspect of Credit Charge Card Financial Capture Transaction
      description: ReCR Retrieve details about any aspect of Credit Charge Card Financial Capture Transaction
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/cardtransactioncaptureid'
      responses:
        '200':
          $ref: '#/components/responses/RetrieveCardFinancialCaptureTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTransactionCapture/{cardtransactioncaptureid}/Request':
    put:
      tags:
        - CR - CardFinancialCaptureTransaction
      summary: RqCR Request manual intervention or a decision with respect to Credit Charge Card Financial Capture Transaction
      description: RqCR Request manual intervention or a decision with respect to Credit Charge Card Financial Capture Transaction
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/cardtransactioncaptureid'
      requestBody:
        $ref: '#/components/requestBodies/RequestCardFinancialCaptureTransactionRequest'
      responses:
        '200':
          $ref: '#/components/responses/RequestCardFinancialCaptureTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTransactionCapture/{cardtransactioncaptureid}/Update':
    put:
      tags:
        - CR - CardFinancialCaptureTransaction
      summary: UpCR Update details relating to Credit Charge Card Financial Capture Transaction
      description: UpCR Update details relating to Credit Charge Card Financial Capture Transaction
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/cardtransactioncaptureid'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCardFinancialCaptureTransactionRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateCardFinancialCaptureTransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The particular date and time point in the progression of time
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Entity that assigns and manages the identification.
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: The identifier of Condition
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: The status of Credit/Charge Card Financial Capture Transaction Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()
    condition:
      type: object
      properties:
        ConditionIdentification:
          $ref: '#/components/schemas/identifier'
        ConditionName:
          $ref: '#/components/schemas/name'
        ConditionValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        ConditionDateAndTime:
          $ref: '#/components/schemas/datetime'
        ConditionStatus:
          $ref: '#/components/schemas/status'
      description: The required status/situation prior to the execution of the task
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: The timing and key actions/milestones involved in completing the transaction task
    businessservicetypevalues:
      type: object
      properties:
        Businessservicetypevalues:
          type: string
          description: ''
          format: enumeration
      description: ''
    businessservice:
      type: object
      properties:
        BusinessServiceType:
          $ref: '#/components/schemas/businessservicetypevalues'
      description: The Transaction Authorization specific Business Service
    transactiondatetimetypevalues:
      enum:
        - ExecutedDate
        - FulfillmentDate
        - InitiatedDate
        - CancelledDate
        - ApprovedDate
        - ValueDate
        - BookingDate
      type: string
      description: ">\r\n* `ExecutedDate` - \r\n* `FulfillmentDate` - \r\n* `InitiatedDate` - \r\n* `CancelledDate` - \r\n* `ApprovedDate` - \r\n* `ValueDate` - \r\n* `BookingDate` - \r\n"
    transactiondatetime:
      type: object
      properties:
        TransactionDate:
          $ref: '#/components/schemas/datetime'
        TransactionDateType:
          $ref: '#/components/schemas/transactiondatetimetypevalues'
      description: "The Date that the transaction has occurred or is planned to occur.\nA characteristic of transaction which refers to the LifecycleDate of transaction (e.g., initiated date, executed date, fulfillment date). "
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: "A Classification value that specifies type of transaction for this  Credit/Charge Card Financial Capture Transaction ||\r\n|"
    transactionstatustypevalues:
      enum:
        - Initiated
        - Executed
        - Cancelled
        - Confirmed
        - Suspended
        - Pending
        - Completed
        - Notified
        - Booked
        - Rejected
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Executed` - \r\n* `Cancelled` - \r\n* `Confirmed` - \r\n* `Suspended` - \r\n* `Pending` - \r\n* `Completed` - \r\n* `Notified` - \r\n* `Booked` - \r\n* `Rejected` - \r\n"
    transactionstatus:
      type: object
      properties:
        TransactionStatus:
          $ref: '#/components/schemas/status'
        TransactionStatusType:
          $ref: '#/components/schemas/transactionstatustypevalues'
      description: 'A characteristic of transaction which refers to the LifecycleStatus of transaction (e.g., initiated, executed, confirmed, cancelled, etc.) '
    transaction:
      type: object
      properties:
        TransactionIdentification:
          $ref: '#/components/schemas/identifier'
        TransactionDate:
          $ref: '#/components/schemas/transactiondatetime'
        TransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TransactionDescription:
          $ref: '#/components/schemas/text'
        TransactionStatus:
          $ref: '#/components/schemas/transactionstatus'
        TransactionName:
          $ref: '#/components/schemas/name'
      description: Reference to Credit/Charge Card Financial Capture Transaction ObligationFulfilment|ObligationFulfilment (https://www.iso20022.org/standardsrepository/type/ObligationFulfilment)|Standard|ISO20022 BM ()
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: Reference to Transaction Authorization
    TransactionAuthorization:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        CardFinancialCaptureTransactionReference:
          $ref: '#/components/schemas/transaction'
        TransactionAuthorizationReference:
          $ref: '#/components/schemas/task'
        TransactionAuthorizationType:
          $ref: '#/components/schemas/text'
      description: The Transaction Authorization is a discrete action or task that is required in the execution of the Transaction Authorization
    TransactionConsolidation:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        CardFinancialCaptureTransactionReference:
          $ref: '#/components/schemas/transaction'
        TransactionConsolidationReference:
          $ref: '#/components/schemas/task'
        TransactionConsolidationType:
          $ref: '#/components/schemas/text'
      description: The Transaction Authorization is a discrete action or task that is required in the execution of the Transaction Authorization
    TransactionReversal:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        CardFinancialCaptureTransactionReference:
          $ref: '#/components/schemas/transaction'
        TransactionReversalReference:
          $ref: '#/components/schemas/task'
        TransactionReversalType:
          $ref: '#/components/schemas/text'
      description: The Transaction Authorization is a discrete action or task that is required in the execution of the Transaction Authorization
    TransactionCapture:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        CardFinancialCaptureTransactionReference:
          $ref: '#/components/schemas/transaction'
        TransactionCaptureReference:
          $ref: '#/components/schemas/task'
        TransactionCaptureType:
          $ref: '#/components/schemas/text'
      description: The Transaction Authorization is a discrete action or task that is required in the execution of the Transaction Authorization
    calendartypevalues:
      enum:
        - UKCalendar
        - ChineseCalendar
      type: string
      description: ">\r\n* `UKCalendar` - \r\n* `ChineseCalendar` - \r\n"
    calendar:
      type: object
      properties:
        CalendarType:
          $ref: '#/components/schemas/calendartypevalues'
        CalendarName:
          $ref: '#/components/schemas/name'
      description: ''
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
        - ChequeRelatedFee
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n* `ChequeRelatedFee` - \r\n"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: "Base amount that would be applied when the service is requested. \n\n"
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: 'Rate used to calculate the amount of the adjustment, allowance, charge or fee. (ISO20022)'
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goaltypevalues:
      enum:
        - Short-TermGoal
        - Long-TermGoal
        - BusinessGoal
        - PerformanceGoal
        - FinancialGoal
        - OutcomeGoal
        - SMARTGoal
      type: string
      description: ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
    goaldatetimetypevalues:
      enum:
        - SettingDate
        - PlanningDate
        - StartDate
        - ReviewDate
        - CompletionDate
      type: string
      description: ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
    goaldatetime:
      type: object
      properties:
        GoalDateAndTime:
          $ref: '#/components/schemas/datetime'
        GoalDateAndTimeType:
          $ref: '#/components/schemas/goaldatetimetypevalues'
      description: 'The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date.'
    goalstatustypevalues:
      enum:
        - Setting
        - Planning
        - Execution
        - MonitoringAndEvaluation
        - CompletionOrAchievement
        - MaintenanceOrSustainment
        - ClosureOrRenewal
      type: string
      description: ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
    goalstatus:
      type: object
      properties:
        GoalStatus:
          $ref: '#/components/schemas/status'
        GoalStatusType:
          $ref: '#/components/schemas/goalstatustypevalues'
      description: 'The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal'
    goal:
      type: object
      properties:
        GoalType:
          $ref: '#/components/schemas/goaltypevalues'
        GoalDefinition:
          $ref: '#/components/schemas/text'
        GoalName:
          $ref: '#/components/schemas/name'
        GoalDateAndTime:
          $ref: '#/components/schemas/goaldatetime'
        GoalStatus:
          $ref: '#/components/schemas/goalstatus'
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
        - DevelopmentPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n* `DevelopmentPlan` - \r\n"
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: ''
    interesttypevalues:
      enum:
        - Fixed
        - Floatingratenote
        - Dualbasis
        - Index
        - Discounted
        - Zerocoupon
        - Exinterest
        - Cuminterest
      type: string
      description: ">\r\n* `Fixed` - Indicates that the type of interest is fixed.\r\n* `Floatingratenote` - Indicates that the type of interest is a floating rate note.\r\n* `Dualbasis` - Indicates that the type of interest is a dual basis.\r\n* `Index` - Indicates that the type of interest is index.\r\n* `Discounted` - Indicates that the type of interest is discounted.\r\n* `Zerocoupon` - Indicates that the type of interest is a zero coupon.\r\n* `Exinterest` - Indicates deal price excluding accrued interest.\r\n* `Cuminterest` - Indicates deal price including accrued interest.\r\n"
    interestratetypevalues:
      enum:
        - Fixed
        - Forfeit
        - Variable
        - Scheduled
        - Unscheduled
        - Discount
        - Fixedrateunderlyingexposureforlife
        - Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating
        - Fixedwithfutureperiodicresets
        - Floatinglinkedtoindex
        - Floatingrateunderlyingexposureforlife
        - Floatingrateunderlyingexposurewithcap
        - Floatingrateunderlyingexposurewithfloor
        - Floatingrateunderlyingexposurewithfloorandcap
        - Modular
        - Obligorswapped
        - Other
        - Swicthoptionality
      type: string
      description: ">\r\n* `Fixed` - Rate is fixed.\r\n* `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.\r\n* `Variable` - Rate is variable.\r\n* `Scheduled` - Rate of the scheduled payment.\r\n* `Unscheduled` - Rate of the unscheduled payment.\r\n* `Discount` - Interest rate type is Discount.\r\n* `Fixedrateunderlyingexposureforlife` - Interest rate type is Fixed rate underlying exposure (for life).\r\n* `Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating` - Interest rate type is Fixed rate underlying exposure with compulsory future switch to floating.\r\n* `Fixedwithfutureperiodicresets` - Interest rate type is Fixed with future periodic resets.\r\n* `Floatinglinkedtoindex` - Interest rate type is Floating rate underlying exposure linked to one index that will revert to another index in the future.\r\n* `Floatingrateunderlyingexposureforlife` - Interest rate type is Floating rate underlying exposure (for life).\r\n* `Floatingrateunderlyingexposurewithcap` - Interest rate type is Floating rate underlying exposure with cap.\r\n* `Floatingrateunderlyingexposurewithfloor` - Interest rate type is Floating rate underlying exposure with floor.\r\n* `Floatingrateunderlyingexposurewithfloorandcap` - Interest rate type is Floating rate underlying exposure with both floor and cap.\r\n* `Modular` - Interest rate type is Modular.\r\n* `Obligorswapped` - Interest rate type is Obligor Swapped.\r\n* `Other` - Any other type of interest rate that can be applied.\r\n* `Swicthoptionality` - Interest rate type is Switch Optionality.\r\n"
    rateplantypevalues:
      enum:
        - StandardRatePlan
        - AdjustmentRatePlan
        - FinalRatePlan
      type: string
      description: ">\r\n* `StandardRatePlan` - \r\n* `AdjustmentRatePlan` - \r\n* `FinalRatePlan` - \r\n"
    rateplan:
      type: object
      properties:
        RatePlanName:
          type: string
          description: ''
          format: string
        RatePlanType:
          $ref: '#/components/schemas/rateplantypevalues'
        RatePlan:
          type: string
          description: ''
          format: string
      description: An arranged InterestRatePlan
    interestarrangement:
      type: object
      properties:
        InterestType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestRate:
          $ref: '#/components/schemas/rate'
        InterestDefinition:
          $ref: '#/components/schemas/text'
        InterestRateType:
          $ref: '#/components/schemas/interestratetypevalues'
        InterestPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        InterestRatePlan:
          $ref: '#/components/schemas/rateplan'
        InterestSchedule:
          $ref: '#/components/schemas/schedule'
      description: ''
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: ''
    settlement:
      type: object
      properties:
        Settlement:
          type: string
          description: "Process which consists in transferring the proceeds related to a trade from one party to the next one. (ISO20022)\n\nThe completion of a transaction or of processing with the aim of discharging participants obligations through the transfer of funds and/or securities. A settlement may be final or provisional. (ECB)"
          format: class
      description: ''
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: ''
    CardTransactionCaptureOutcome:
      type: object
      properties:
        CardTransactionCaptureCalendar:
          $ref: '#/components/schemas/calendar'
        CardTransactionCaptureCounterparty:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionCaptureDividend:
          type: string
          description: ''
          format: object
        CardTransactionCaptureFees:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionCaptureInterest:
          $ref: '#/components/schemas/interestarrangement'
        CardTransactionCaptureMargining:
          type: string
          description: ''
          format: object
        CardTransactionCaptureNotionalPrincipal:
          type: string
          description: ''
          format: object
        CardTransactionCaptureOptions:
          $ref: '#/components/schemas/arrangement'
        CardTransactionCaptureRates:
          $ref: '#/components/schemas/rate'
        CardTransactionCaptureSettlement:
          $ref: '#/components/schemas/settlement'
        CardTransactionCaptureWorkProduct:
          $ref: '#/components/schemas/workproduct'
      description: The Transaction Authorization is a discrete action or task that is required in the execution of the Transaction Authorization
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: "A Classification value that distinguishes between business service transaction within Credit/Charge Card Financial Capture Transaction ||\r\n|"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: "A selected optional business service as subject matter of Credit/Charge Card Financial Capture Transaction ||\r\n|"
    CardFinancialCaptureTransaction:
      type: object
      properties:
        CardFinancialCaptureTransactionParameterType:
          $ref: '#/components/schemas/featuretypevalues'
        CardFinancialCaptureTransactionSelectedOption:
          $ref: '#/components/schemas/feature'
        CardFinancialCaptureTransactionStatus:
          $ref: '#/components/schemas/status'
        CardFinancialCaptureTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        CardFinancialCaptureTransactionTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        CardFinancialCaptureTransaction:
          $ref: '#/components/schemas/transaction'
      description: "Execute a well-bounded financial transaction/task, typically involving largely automated/structured fulfillment processing  within Card Capture. \nExample: Execute a payment transaction."
    ControlCardFinancialCaptureTransactionRequest:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
            CardFinancialCaptureTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
            CardFinancialCaptureTransactionTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
      description: 'Input: CoCR Control the processing of Credit Charge Card Financial Capture Transaction'
    ControlCardFinancialCaptureTransactionResponse:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
      description: 'Output: CoCR Control the processing of Credit Charge Card Financial Capture Transaction'
    ExchangeCardFinancialCaptureTransactionRequest:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
            CardFinancialCaptureTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
            CardFinancialCaptureTransactionTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
      description: 'Input: EcCR Accept, verify, etc. aspects of Credit Charge Card Financial Capture Transaction processing'
    ExchangeCardFinancialCaptureTransactionResponse:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
      description: 'Output: EcCR Accept, verify, etc. aspects of Credit Charge Card Financial Capture Transaction processing'
    ExecuteCardFinancialCaptureTransactionRequest:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
            CardFinancialCaptureTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
            CardFinancialCaptureTransactionTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
      description: 'Input: ExCR Execute an available automated action for Credit Charge Card Financial Capture Transaction'
    ExecuteCardFinancialCaptureTransactionResponse:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
      description: 'Output: ExCR Execute an available automated action for Credit Charge Card Financial Capture Transaction'
    InitiateCardFinancialCaptureTransactionRequest:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
            CardFinancialCaptureTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
            CardFinancialCaptureTransactionTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
      description: 'Input: InCR Instantiate a new Credit Charge Card Financial Capture Transaction'
    InitiateCardFinancialCaptureTransactionResponse:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
      description: 'Output: InCR Instantiate a new Credit Charge Card Financial Capture Transaction'
    RetrieveCardFinancialCaptureTransactionResponse:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
            CardFinancialCaptureTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
            CardFinancialCaptureTransactionTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
      description: 'Output: ReCR Retrieve details about any aspect of Credit Charge Card Financial Capture Transaction'
    RequestCardFinancialCaptureTransactionRequest:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
            CardFinancialCaptureTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
            CardFinancialCaptureTransactionTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
      description: 'Input: RqCR Request manual intervention or a decision with respect to Credit Charge Card Financial Capture Transaction'
    RequestCardFinancialCaptureTransactionResponse:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
      description: 'Output: RqCR Request manual intervention or a decision with respect to Credit Charge Card Financial Capture Transaction'
    UpdateCardFinancialCaptureTransactionRequest:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
            CardFinancialCaptureTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
            CardFinancialCaptureTransactionTransactionType:
              $ref: '#/components/schemas/transactiontypevalues'
      description: 'Input: UpCR Update details relating to Credit Charge Card Financial Capture Transaction'
    UpdateCardFinancialCaptureTransactionResponse:
      type: object
      properties:
        CardFinancialCaptureTransaction:
          type: object
          properties:
            CardFinancialCaptureTransactionParameterType:
              $ref: '#/components/schemas/featuretypevalues'
            CardFinancialCaptureTransactionSelectedOption:
              $ref: '#/components/schemas/feature'
            CardFinancialCaptureTransactionStatus:
              $ref: '#/components/schemas/status'
      description: 'Output: UpCR Update details relating to Credit Charge Card Financial Capture Transaction'
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    ControlCardFinancialCaptureTransactionResponse:
      description: ControlCardFinancialCaptureTransactionResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlCardFinancialCaptureTransactionResponse'
    ExchangeCardFinancialCaptureTransactionResponse:
      description: ExchangeCardFinancialCaptureTransactionResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExchangeCardFinancialCaptureTransactionResponse'
    ExecuteCardFinancialCaptureTransactionResponse:
      description: ExecuteCardFinancialCaptureTransactionResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExecuteCardFinancialCaptureTransactionResponse'
    InitiateCardFinancialCaptureTransactionResponse:
      description: InitiateCardFinancialCaptureTransactionResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InitiateCardFinancialCaptureTransactionResponse'
    RetrieveCardFinancialCaptureTransactionResponse:
      description: RetrieveCardFinancialCaptureTransactionResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RetrieveCardFinancialCaptureTransactionResponse'
    RequestCardFinancialCaptureTransactionResponse:
      description: RequestCardFinancialCaptureTransactionResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestCardFinancialCaptureTransactionResponse'
    UpdateCardFinancialCaptureTransactionResponse:
      description: UpdateCardFinancialCaptureTransactionResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCardFinancialCaptureTransactionResponse'
  parameters:
    cardtransactioncaptureid:
      name: cardtransactioncaptureid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    ControlCardFinancialCaptureTransactionRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlCardFinancialCaptureTransactionRequest'
      required: true
    ExchangeCardFinancialCaptureTransactionRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExchangeCardFinancialCaptureTransactionRequest'
      required: true
    ExecuteCardFinancialCaptureTransactionRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExecuteCardFinancialCaptureTransactionRequest'
      required: true
    InitiateCardFinancialCaptureTransactionRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InitiateCardFinancialCaptureTransactionRequest'
      required: true
    RequestCardFinancialCaptureTransactionRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestCardFinancialCaptureTransactionRequest'
      required: true
    UpdateCardFinancialCaptureTransactionRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCardFinancialCaptureTransactionRequest'
      required: true