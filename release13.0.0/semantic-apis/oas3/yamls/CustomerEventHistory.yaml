openapi: 3.0.1
info:
  title: Customer Event History
  description: 'This service domain captures, classifies and stores relationship, servicing and product fulfillment related customer events. In addition to servicing and product transaction details, the log can capture life/relationship events that are revealed during customer exchanges'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerEventHistory/13.0.0
paths:
  /CustomerEventHistory/Initiate:
    post:
      tags:
        - CR - CustomerEventLog
      summary: InCR Initiate customer event history tracking for a customer
      description: InCR Initiate customer event history tracking for a customer
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CustomerEventLog'
      responses:
        '200':
          $ref: '#/components/responses/CustomerEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Update':
    put:
      tags:
        - CR - CustomerEventLog
      summary: UpCR Update details about the log
      description: UpCR Update details about the log
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerEventLog'
      responses:
        '200':
          $ref: '#/components/responses/CustomerEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Control':
    put:
      tags:
        - CR - CustomerEventLog
      summary: CoCR Control event tracking for the customer (e.g. suspend)
      description: CoCR Control event tracking for the customer (e.g. suspend)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerEventLog'
      responses:
        '200':
          $ref: '#/components/responses/CustomerEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Retrieve':
    get:
      tags:
        - CR - CustomerEventLog
      summary: ReCR Retrieve details about the customer event log
      description: ReCR Retrieve details about the customer event log
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerEventLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Relationship/{relationshipid}/Update':
    put:
      tags:
        - BQ - Relationship
      summary: UpBQ Update captured relationship management event details
      description: UpBQ Update captured relationship management event details
      operationId: UpdateRelationship
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/relationshipid'
      requestBody:
        $ref: '#/components/requestBodies/Relationship'
      responses:
        '200':
          $ref: '#/components/responses/Relationship'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Relationship/{relationshipid}/Capture':
    put:
      tags:
        - BQ - Relationship
      summary: CaBQ Capture relationship management event details
      description: CaBQ Capture relationship management event details
      operationId: CaptureRelationship
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/relationshipid'
      requestBody:
        $ref: '#/components/requestBodies/Relationship'
      responses:
        '200':
          $ref: '#/components/responses/Relationship'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Relationship/{relationshipid}/Retrieve':
    get:
      tags:
        - BQ - Relationship
      summary: ReBQ Retrieve relationship management event details
      description: ReBQ Retrieve relationship management event details
      operationId: RetrieveRelationship
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/relationshipid'
      responses:
        '200':
          $ref: '#/components/responses/Relationship'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Sales/{salesid}/Update':
    put:
      tags:
        - BQ - Sales
      summary: UpBQ Update captured sales event details
      description: UpBQ Update captured sales event details
      operationId: UpdateSales
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/salesid'
      requestBody:
        $ref: '#/components/requestBodies/Sales'
      responses:
        '200':
          $ref: '#/components/responses/Sales'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Sales/{salesid}/Capture':
    put:
      tags:
        - BQ - Sales
      summary: CaBQ Capture sales event details
      description: CaBQ Capture sales event details
      operationId: CaptureSales
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/salesid'
      requestBody:
        $ref: '#/components/requestBodies/Sales'
      responses:
        '200':
          $ref: '#/components/responses/Sales'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Sales/{salesid}/Retrieve':
    get:
      tags:
        - BQ - Sales
      summary: ReBQ Retrieve sales event details
      description: ReBQ Retrieve sales event details
      operationId: RetrieveSales
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/salesid'
      responses:
        '200':
          $ref: '#/components/responses/Sales'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Servicing/{servicingid}/Update':
    put:
      tags:
        - BQ - Servicing
      summary: UpBQ Update captured servicing event details
      description: UpBQ Update captured servicing event details
      operationId: UpdateServicing
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/servicingid'
      requestBody:
        $ref: '#/components/requestBodies/Servicing'
      responses:
        '200':
          $ref: '#/components/responses/Servicing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Servicing/{servicingid}/Capture':
    put:
      tags:
        - BQ - Servicing
      summary: CaBQ Capture servicing event details
      description: CaBQ Capture servicing event details
      operationId: CaptureServicing
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/servicingid'
      requestBody:
        $ref: '#/components/requestBodies/Servicing'
      responses:
        '200':
          $ref: '#/components/responses/Servicing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Servicing/{servicingid}/Retrieve':
    get:
      tags:
        - BQ - Servicing
      summary: ReBQ Retrieve servicing event details
      description: ReBQ Retrieve servicing event details
      operationId: RetrieveServicing
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/servicingid'
      responses:
        '200':
          $ref: '#/components/responses/Servicing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/ProductProcessing/{productprocessingid}/Update':
    put:
      tags:
        - BQ - ProductProcessing
      summary: UpBQ Update captured product processing event details
      description: UpBQ Update captured product processing event details
      operationId: UpdateProductProcessing
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/productprocessingid'
      requestBody:
        $ref: '#/components/requestBodies/ProductProcessing'
      responses:
        '200':
          $ref: '#/components/responses/ProductProcessing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/ProductProcessing/{productprocessingid}/Capture':
    put:
      tags:
        - BQ - ProductProcessing
      summary: CaBQ Capture product processing event details
      description: CaBQ Capture product processing event details
      operationId: CaptureProductProcessing
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/productprocessingid'
      requestBody:
        $ref: '#/components/requestBodies/ProductProcessing'
      responses:
        '200':
          $ref: '#/components/responses/ProductProcessing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/ProductProcessing/{productprocessingid}/Retrieve':
    get:
      tags:
        - BQ - ProductProcessing
      summary: ReBQ Retrieve product processing event details
      description: ReBQ Retrieve product processing event details
      operationId: RetrieveProductProcessing
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/productprocessingid'
      responses:
        '200':
          $ref: '#/components/responses/ProductProcessing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Fraud/{fraudid}/Update':
    put:
      tags:
        - BQ - Fraud
      summary: UpBQ Update captured fraud event details
      description: UpBQ Update captured fraud event details
      operationId: UpdateFraud
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/fraudid'
      requestBody:
        $ref: '#/components/requestBodies/Fraud'
      responses:
        '200':
          $ref: '#/components/responses/Fraud'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Fraud/{fraudid}/Capture':
    put:
      tags:
        - BQ - Fraud
      summary: CaBQ Capture fraud event details
      description: CaBQ Capture fraud event details
      operationId: CaptureFraud
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/fraudid'
      requestBody:
        $ref: '#/components/requestBodies/Fraud'
      responses:
        '200':
          $ref: '#/components/responses/Fraud'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Fraud/{fraudid}/Retrieve':
    get:
      tags:
        - BQ - Fraud
      summary: ReBQ Retrieve fraud event details
      description: ReBQ Retrieve fraud event details
      operationId: RetrieveFraud
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/fraudid'
      responses:
        '200':
          $ref: '#/components/responses/Fraud'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Life/{lifeid}/Update':
    put:
      tags:
        - BQ - Life
      summary: UpBQ Update captured customer life event details
      description: UpBQ Update captured customer life event details
      operationId: UpdateLife
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/lifeid'
      requestBody:
        $ref: '#/components/requestBodies/Life'
      responses:
        '200':
          $ref: '#/components/responses/Life'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Life/{lifeid}/Capture':
    put:
      tags:
        - BQ - Life
      summary: CaBQ Capture customer life event details
      description: CaBQ Capture customer life event details
      operationId: CaptureLife
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/lifeid'
      requestBody:
        $ref: '#/components/requestBodies/Life'
      responses:
        '200':
          $ref: '#/components/responses/Life'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerEventHistory/{customereventhistoryid}/Life/{lifeid}/Retrieve':
    get:
      tags:
        - BQ - Life
      summary: ReBQ Retrieve customer life event details
      description: ReBQ Retrieve customer life event details
      operationId: RetrieveLife
      parameters:
        - $ref: '#/components/parameters/customereventhistoryid'
        - $ref: '#/components/parameters/lifeid'
      responses:
        '200':
          $ref: '#/components/responses/Life'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: 'The type of event  (e.g. marriage/divorce, relocation, birth, graduation)'
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: The start and end date times for the contact
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the associated customer (can currently be a person or a company) ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The tracked status (e.g. under construction or repair, inhabited, vacant).'
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: The schedule of past and planned customer contacts
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: ''
    customercontact:
      type: object
      properties:
        ContactType:
          $ref: '#/components/schemas/text'
        ContactDateTime:
          $ref: '#/components/schemas/datetime'
        ContactLocation:
          $ref: '#/components/schemas/location'
        ContactSchedule:
          $ref: '#/components/schemas/schedule'
        ContactResult:
          $ref: '#/components/schemas/text'
        ContactPurpose:
          $ref: '#/components/schemas/text'
        ContactDevice:
          $ref: '#/components/schemas/device'
        ContactIndicator:
          $ref: '#/components/schemas/text'
        ContactContent:
          $ref: '#/components/schemas/text'
      description: Reference to a contact event log
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    event:
      type: object
      properties:
        EventType:
          $ref: '#/components/schemas/text'
        EventDateTime:
          $ref: '#/components/schemas/datetime'
        EventDescription:
          $ref: '#/components/schemas/text'
        EventSource:
          type: string
          description: ''
          format: object
        EventLocation:
          $ref: '#/components/schemas/location'
        EventAction:
          $ref: '#/components/schemas/action'
        EventStatus:
          $ref: '#/components/schemas/status'
        EventValue:
          $ref: '#/components/schemas/value'
        EventValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        EventIdentification:
          $ref: '#/components/schemas/identifier'
      description: " ||\r\n|"
    Life:
      type: object
      properties:
        CustomerLifeEventType:
          $ref: '#/components/schemas/text'
        CustomerContactRecordReference:
          $ref: '#/components/schemas/customercontact'
        EmployeeUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerLifeEventRecord:
          $ref: '#/components/schemas/event'
        DateandTime:
          $ref: '#/components/schemas/datetime'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: "A collection of the events/transactions recorded by the log.\n\n- The Life is one of the specific types of events that is recorded in the Service Domain\n"
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: Reference to the types or instances of products/services being serviced if provided
    Servicing:
      type: object
      properties:
        CustomerServicingEventType:
          $ref: '#/components/schemas/text'
        CustomerContactRecordReference:
          $ref: '#/components/schemas/customercontact'
        AccessedProductandService:
          $ref: '#/components/schemas/bankingproduct'
        ChannelandDeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        ContactPurpose:
          $ref: '#/components/schemas/text'
        ContactResult:
          $ref: '#/components/schemas/text'
        EmployeeUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerServicingEventRecord:
          $ref: '#/components/schemas/event'
        DateandTime:
          $ref: '#/components/schemas/datetime'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: "A collection of the events/transactions recorded by the log.\n\n- The Life is one of the specific types of events that is recorded in the Service Domain\n"
    Relationship:
      type: object
      properties:
        CustomerRelationshipEventType:
          $ref: '#/components/schemas/text'
        EmployeeUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerRelationshipEventRecord:
          $ref: '#/components/schemas/event'
        CustomerRelationshipEventAction:
          $ref: '#/components/schemas/action'
        DateandTime:
          $ref: '#/components/schemas/datetime'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: "A collection of the events/transactions recorded by the log.\n\n- The Life is one of the specific types of events that is recorded in the Service Domain\n"
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: Reference to the specific product instance being processed
    ProductProcessing:
      type: object
      properties:
        ProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        ProductEventType:
          $ref: '#/components/schemas/text'
        ProductEventDescription:
          $ref: '#/components/schemas/text'
        ProductEventResult:
          $ref: '#/components/schemas/text'
        EmployeeUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerProductandServiceEventRecord:
          $ref: '#/components/schemas/event'
        DateandTime:
          $ref: '#/components/schemas/datetime'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: "A collection of the events/transactions recorded by the log.\n\n- The Life is one of the specific types of events that is recorded in the Service Domain\n"
    saleslead:
      type: object
      properties:
        LeadOrigin:
          $ref: '#/components/schemas/text'
        LeadDescription:
          $ref: '#/components/schemas/text'
      description: Reference to the recorded lead/opportunity if sale progresses
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: Date on which the agreement was signed by all parties. (ISO20022)
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - BrokerAgreement
        - SalesAgreement
        - PurchaseAgreement
        - MaintenanceAgreement
        - ProductAgreement
        - ProductSalesAgreement
        - ResourceAgreement
      type: string
      description: ">\r\n* `CustomerAgreement` - \r\n* `SupplierAgreement` - \r\n* `BrokerAgreement` - \r\n* `SalesAgreement` - \r\n* `PurchaseAgreement` - \r\n* `MaintenanceAgreement` - \r\n* `ProductAgreement` - \r\n* `ProductSalesAgreement` - \r\n* `ResourceAgreement` - \r\n"
    agreementstatustypevalues:
      enum:
        - Offered
        - Confirmed
        - Completed
        - Signed
        - Terminated
        - Rejected
      type: string
      description: ">\r\n* `Offered` - \r\n* `Confirmed` - \r\n* `Completed` - \r\n* `Signed` - \r\n* `Terminated` - \r\n* `Rejected` - \r\n"
    agreementstatus:
      type: object
      properties:
        AgreementStatus:
          $ref: '#/components/schemas/status'
        AgreementStatusType:
          $ref: '#/components/schemas/agreementstatustypevalues'
      description: 'A characteristic of agreement which refers to the LifecycleStatus of agreement (e.g., potential, offered, confirmed, completed, signed, terminated).'
    agreement:
      type: object
      properties:
        AgreementSignedDate:
          $ref: '#/components/schemas/date'
        AgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        AgreementValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AgreementVersion:
          $ref: '#/components/schemas/text'
        AgreementStatus:
          $ref: '#/components/schemas/agreementstatus'
        AgreementSubjectMatter:
          $ref: '#/components/schemas/text'
        AgreementIdentification:
          $ref: '#/components/schemas/identifier'
        AgreementDate:
          $ref: '#/components/schemas/datetime'
        AgreementDescription:
          $ref: '#/components/schemas/text'
      description: Reference to any commission agreement if appropriate
    Sales:
      type: object
      properties:
        CustomerSalesEventType:
          $ref: '#/components/schemas/text'
        EmployeeUnitReference:
          $ref: '#/components/schemas/involvedparty'
        ProductandServiceType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        LeadandOpportunityReference:
          $ref: '#/components/schemas/saleslead'
        CustomerSalesEventRecord:
          $ref: '#/components/schemas/event'
        CommissionAgreementReference:
          $ref: '#/components/schemas/agreement'
        DateandTime:
          $ref: '#/components/schemas/datetime'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: "A collection of the events/transactions recorded by the log.\n\n- The Life is one of the specific types of events that is recorded in the Service Domain\n"
    casetypevalues:
      enum:
        - Card
        - Loan
        - Fraud
        - Payment
        - Market
        - Security
        - Other
      type: string
      description: ">\r\n* `Card` - \r\n* `Loan` - \r\n* `Fraud` - \r\n* `Payment` - \r\n* `Market` - \r\n* `Security` - \r\n* `Other` - \r\n"
    casestatustypevalues:
      enum:
        - Closed
        - Assigned
        - UnderInvestigation
        - Unknown
        - Overdue
      type: string
      description: ">\r\n* `Closed` - Case has been closed. (ISO20022)\r\n* `Assigned` - Case has been assigned to another party. (ISO20022)\r\n* `UnderInvestigation` - Case is currently under investigation. (ISO20022)\r\n* `Unknown` - Case has never been assigned before. (ISO20022)\r\n* `Overdue` - Investigation is taking too long. (ISO20022)\r\n"
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: ''
    case:
      type: object
      properties:
        CaseCreationDateTime:
          $ref: '#/components/schemas/datetime'
        CaseType:
          $ref: '#/components/schemas/casetypevalues'
        CaseLocation:
          $ref: '#/components/schemas/location'
        CaseStatus:
          $ref: '#/components/schemas/casestatustypevalues'
        CaseDocument:
          $ref: '#/components/schemas/document'
        CaseDateTime:
          $ref: '#/components/schemas/datetime'
      description: Reference to the fraud case processing the analysis and response
    Fraud:
      type: object
      properties:
        CustomerFraudCaseEventType:
          $ref: '#/components/schemas/text'
        CustomerContactRecordReference:
          $ref: '#/components/schemas/customercontact'
        AccessedProductandService:
          $ref: '#/components/schemas/bankingproduct'
        EmployeeUnitReference:
          $ref: '#/components/schemas/involvedparty'
        FraudCaseReference:
          $ref: '#/components/schemas/case'
        DateandTime:
          $ref: '#/components/schemas/datetime'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: "A collection of the events/transactions recorded by the log.\n\n- The Life is one of the specific types of events that is recorded in the Service Domain\n"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: " ||\r\n|"
    customereventtypevalues:
      enum:
        - CustomerRelationshipEvent
        - CustomerSaleEvent
        - CustomerProductEvent
        - CustomerFraudEvent
        - CustomerLifeEvent
      type: string
      description: " ||\r\n|"
    CustomerEventLog:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerEventReference:
          $ref: '#/components/schemas/event'
        CustomerEventLogReference:
          $ref: '#/components/schemas/log'
        CustomerEventType:
          $ref: '#/components/schemas/customereventtypevalues'
      description: 'Maintain a log of transactions or activity, typically a financial account/journal or a log of activity to support behavioral analysis within Customer Event History. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerEventLog:
      description: CustomerEventLog
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerEventLog'
    Relationship:
      description: Relationship
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Relationship'
    Sales:
      description: Sales
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sales'
    Servicing:
      description: Servicing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Servicing'
    ProductProcessing:
      description: ProductProcessing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductProcessing'
    Fraud:
      description: Fraud
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fraud'
    Life:
      description: Life
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Life'
  parameters:
    customereventhistoryid:
      name: customereventhistoryid
      in: path
      required: true
      style: simple
      schema:
        type: string
    relationshipid:
      name: relationshipid
      in: path
      required: true
      style: simple
      schema:
        type: string
    salesid:
      name: salesid
      in: path
      required: true
      style: simple
      schema:
        type: string
    servicingid:
      name: servicingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    productprocessingid:
      name: productprocessingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    fraudid:
      name: fraudid
      in: path
      required: true
      style: simple
      schema:
        type: string
    lifeid:
      name: lifeid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerEventLog:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerEventLog'
      required: true
    Relationship:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Relationship'
      required: true
    Sales:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sales'
      required: true
    Servicing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Servicing'
      required: true
    ProductProcessing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductProcessing'
      required: true
    Fraud:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fraud'
      required: true
    Life:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Life'
      required: true