openapi: 3.0.1
info:
  title: Point of Service
  description: 'This service domain operates servicing positions within the bank. It administers all media connections, inventory holdings (e.g. cash), provides access to support utilities and tracks servicing activity -e.g. time spent, activity logs, capturing servicing events including commission and training related actions. In cases servicing positions can be automated'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/PointofService/13.0.0
paths:
  /PointofService/Initiate:
    post:
      tags:
        - CR - PointofServiceOperatingSession
      summary: InCR Initiate a point of service session
      description: InCR Initiate a point of service session
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/PointofServiceOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/PointofServiceOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Update':
    put:
      tags:
        - CR - PointofServiceOperatingSession
      summary: UpCR Update details for a point of service session
      description: UpCR Update details for a point of service session
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
      requestBody:
        $ref: '#/components/requestBodies/PointofServiceOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/PointofServiceOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Control':
    put:
      tags:
        - CR - PointofServiceOperatingSession
      summary: CoCR Control a point of service session (e.g. suspend)
      description: CoCR Control a point of service session (e.g. suspend)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
      requestBody:
        $ref: '#/components/requestBodies/PointofServiceOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/PointofServiceOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Execute':
    put:
      tags:
        - CR - PointofServiceOperatingSession
      summary: ExCR Execute an automated task (e.g. assign a contact)
      description: ExCR Execute an automated task (e.g. assign a contact)
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
      requestBody:
        $ref: '#/components/requestBodies/PointofServiceOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/PointofServiceOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Request':
    put:
      tags:
        - CR - PointofServiceOperatingSession
      summary: RqCR Request manual intervention (e.g. book future time)
      description: RqCR Request manual intervention (e.g. book future time)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
      requestBody:
        $ref: '#/components/requestBodies/PointofServiceOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/PointofServiceOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Retrieve':
    get:
      tags:
        - CR - PointofServiceOperatingSession
      summary: ReCR Retrieve details about a servicing position session
      description: ReCR Retrieve details about a servicing position session
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
      responses:
        '200':
          $ref: '#/components/responses/PointofServiceOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Assisted/Initiate':
    post:
      tags:
        - BQ - Assisted
      summary: InBQ Initiate an assisted contact
      description: InBQ Initiate an assisted contact
      operationId: InitiateAssisted
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
      requestBody:
        $ref: '#/components/requestBodies/Assisted'
      responses:
        '200':
          $ref: '#/components/responses/Assisted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Assisted/{assistedid}/Update':
    put:
      tags:
        - BQ - Assisted
      summary: UpBQ Update details about an assisted contact
      description: UpBQ Update details about an assisted contact
      operationId: UpdateAssisted
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/assistedid'
      requestBody:
        $ref: '#/components/requestBodies/Assisted'
      responses:
        '200':
          $ref: '#/components/responses/Assisted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Assisted/{assistedid}/Control':
    put:
      tags:
        - BQ - Assisted
      summary: CoBQ Control an assisted contact (e.g. terminate)
      description: CoBQ Control an assisted contact (e.g. terminate)
      operationId: ControlAssisted
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/assistedid'
      requestBody:
        $ref: '#/components/requestBodies/Assisted'
      responses:
        '200':
          $ref: '#/components/responses/Assisted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Assisted/{assistedid}/Retrieve':
    get:
      tags:
        - BQ - Assisted
      summary: ReBQ Retrieve details about an assisted contact
      description: ReBQ Retrieve details about an assisted contact
      operationId: RetrieveAssisted
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/assistedid'
      responses:
        '200':
          $ref: '#/components/responses/Assisted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Automated/Initiate':
    post:
      tags:
        - BQ - Automated
      summary: InBQ Initiate an automated contact
      description: InBQ Initiate an automated contact
      operationId: InitiateAutomated
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
      requestBody:
        $ref: '#/components/requestBodies/Automated'
      responses:
        '200':
          $ref: '#/components/responses/Automated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Automated/{automatedid}/Update':
    put:
      tags:
        - BQ - Automated
      summary: UpBQ Update details about an automated contact
      description: UpBQ Update details about an automated contact
      operationId: UpdateAutomated
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/automatedid'
      requestBody:
        $ref: '#/components/requestBodies/Automated'
      responses:
        '200':
          $ref: '#/components/responses/Automated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Automated/{automatedid}/Control':
    put:
      tags:
        - BQ - Automated
      summary: CoBQ Control an automated contact (e.g. terminate)
      description: CoBQ Control an automated contact (e.g. terminate)
      operationId: ControlAutomated
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/automatedid'
      requestBody:
        $ref: '#/components/requestBodies/Automated'
      responses:
        '200':
          $ref: '#/components/responses/Automated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Automated/{automatedid}/Retrieve':
    get:
      tags:
        - BQ - Automated
      summary: ReBQ Retrieve details about an automated contact
      description: ReBQ Retrieve details about an automated contact
      operationId: RetrieveAutomated
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/automatedid'
      responses:
        '200':
          $ref: '#/components/responses/Automated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Interaction/{interactionid}/Update':
    put:
      tags:
        - BQ - Interaction
      summary: UpBQ Update details for a customer interaction session
      description: UpBQ Update details for a customer interaction session
      operationId: UpdateInteraction
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/interactionid'
      requestBody:
        $ref: '#/components/requestBodies/Interaction'
      responses:
        '200':
          $ref: '#/components/responses/Interaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Interaction/{interactionid}/Control':
    put:
      tags:
        - BQ - Interaction
      summary: CoBQ Control a customer interaction (e.g. suspend)
      description: CoBQ Control a customer interaction (e.g. suspend)
      operationId: ControlInteraction
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/interactionid'
      requestBody:
        $ref: '#/components/requestBodies/Interaction'
      responses:
        '200':
          $ref: '#/components/responses/Interaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Interaction/{interactionid}/Retrieve':
    get:
      tags:
        - BQ - Interaction
      summary: ReBQ Retrieve details about a customer interaction session
      description: ReBQ Retrieve details about a customer interaction session
      operationId: RetrieveInteraction
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/interactionid'
      responses:
        '200':
          $ref: '#/components/responses/Interaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Inventory/{inventoryid}/Update':
    put:
      tags:
        - BQ - Inventory
      summary: UpBQ Update inventory details
      description: UpBQ Update inventory details
      operationId: UpdateInventory
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/inventoryid'
      requestBody:
        $ref: '#/components/requestBodies/Inventory'
      responses:
        '200':
          $ref: '#/components/responses/Inventory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Inventory/{inventoryid}/Execute':
    put:
      tags:
        - BQ - Inventory
      summary: ExBQ Execute transactions against the inventory position
      description: ExBQ Execute transactions against the inventory position
      operationId: ExecuteInventory
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/inventoryid'
      requestBody:
        $ref: '#/components/requestBodies/Inventory'
      responses:
        '200':
          $ref: '#/components/responses/Inventory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/Inventory/{inventoryid}/Retrieve':
    get:
      tags:
        - BQ - Inventory
      summary: ReBQ Retrieve details about inventory holdings and usage
      description: ReBQ Retrieve details about inventory holdings and usage
      operationId: RetrieveInventory
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/inventoryid'
      responses:
        '200':
          $ref: '#/components/responses/Inventory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/CashPosition/{cashpositionid}/Update':
    put:
      tags:
        - BQ - CashPosition
      summary: UpBQ Update the cash position
      description: UpBQ Update the cash position
      operationId: UpdateCashPosition
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/cashpositionid'
      requestBody:
        $ref: '#/components/requestBodies/CashPosition'
      responses:
        '200':
          $ref: '#/components/responses/CashPosition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/CashPosition/{cashpositionid}/Execute':
    put:
      tags:
        - BQ - CashPosition
      summary: ExBQ Execute transactions against the cash position
      description: ExBQ Execute transactions against the cash position
      operationId: ExecuteCashPosition
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/cashpositionid'
      requestBody:
        $ref: '#/components/requestBodies/CashPosition'
      responses:
        '200':
          $ref: '#/components/responses/CashPosition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PointofService/{pointofserviceid}/CashPosition/{cashpositionid}/Retrieve':
    get:
      tags:
        - BQ - CashPosition
      summary: ReBQ Retrieve details about the cash inventory
      description: ReBQ Retrieve details about the cash inventory
      operationId: RetrieveCashPosition
      parameters:
        - $ref: '#/components/parameters/pointofserviceid'
        - $ref: '#/components/parameters/cashpositionid'
      responses:
        '200':
          $ref: '#/components/responses/CashPosition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: The currency being tracked
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The type of function supported at the POS  (e.g. customer servicing, FX, teller services, commissions) ||\r\n|"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Entity that assigns and manages the identification.
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: An identifier that allows to uniquely refer to an instance of a transaction.
    transactiondatetimetypevalues:
      enum:
        - ExecutedDate
        - FulfillmentDate
        - InitiatedDate
        - CancelledDate
        - ApprovedDate
        - ValueDate
        - BookingDate
      type: string
      description: ">\r\n* `ExecutedDate` - \r\n* `FulfillmentDate` - \r\n* `InitiatedDate` - \r\n* `CancelledDate` - \r\n* `ApprovedDate` - \r\n* `ValueDate` - \r\n* `BookingDate` - \r\n"
    transactiondatetime:
      type: object
      properties:
        TransactionDate:
          $ref: '#/components/schemas/datetime'
        TransactionDateType:
          $ref: '#/components/schemas/transactiondatetimetypevalues'
      description: "The Date that the transaction has occurred or is planned to occur.\nA characteristic of transaction which refers to the LifecycleDate of transaction (e.g., initiated date, executed date, fulfillment date). "
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: ">\r\n* `FinancialTransaction` - \r\n* `BusinessTransaction` - \r\n* `BankingTransaction` - \r\n* `AccountingTransaction` - \r\n* `BookingTransaction` - \r\n* `AllocationTransaction` - \r\n* `DeliveryTransaction` - \r\n* `ProductionTransaction` - \r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    transactionstatustypevalues:
      enum:
        - Initiated
        - Executed
        - Cancelled
        - Confirmed
        - Suspended
        - Pending
        - Completed
        - Notified
        - Booked
        - Rejected
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Executed` - \r\n* `Cancelled` - \r\n* `Confirmed` - \r\n* `Suspended` - \r\n* `Pending` - \r\n* `Completed` - \r\n* `Notified` - \r\n* `Booked` - \r\n* `Rejected` - \r\n"
    transactionstatus:
      type: object
      properties:
        TransactionStatus:
          $ref: '#/components/schemas/status'
        TransactionStatusType:
          $ref: '#/components/schemas/transactionstatustypevalues'
      description: 'A characteristic of transaction which refers to the LifecycleStatus of transaction (e.g., initiated, executed, confirmed, cancelled, etc.) '
    transaction:
      type: object
      properties:
        TransactionIdentification:
          $ref: '#/components/schemas/identifier'
        TransactionDate:
          $ref: '#/components/schemas/transactiondatetime'
        TransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TransactionDescription:
          $ref: '#/components/schemas/text'
        TransactionStatus:
          $ref: '#/components/schemas/transactionstatus'
        TransactionName:
          $ref: '#/components/schemas/name'
      description: Reference to a cash transaction
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: The link to the account product instance used to effect payments from the position
    CashPosition:
      type: object
      properties:
        ServicingCurrency:
          $ref: '#/components/schemas/currencycode'
        ServicingCashHoldingRecord:
          type: string
          description: The current holding by currency/instrument
          format: object
        ServicingCashTransactionReference:
          $ref: '#/components/schemas/transaction'
        ServicingCashTransactionRecord:
          $ref: '#/components/schemas/transaction'
        ProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    Interaction:
      type: object
      properties:
        CustomerSessionDialogueReference:
          type: string
          description: Reference to a customer contact session interaction log for the customer contacts handled at the position
          format: object
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: 'The physical address/location of the position, branch reference etc. Location/Address|Location/Address (https://www.iso20022.org/standardsrepository/type/Location)|Standard|ISO20022 BM ()'
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "The times the position will be available/staffed within this session. Allows for booking time in advance ||\r\n|"
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: ''
    customercontact:
      type: object
      properties:
        ContactType:
          $ref: '#/components/schemas/text'
        ContactDateTime:
          $ref: '#/components/schemas/datetime'
        ContactLocation:
          $ref: '#/components/schemas/location'
        ContactSchedule:
          $ref: '#/components/schemas/schedule'
        ContactResult:
          $ref: '#/components/schemas/text'
        ContactPurpose:
          $ref: '#/components/schemas/text'
        ContactDevice:
          $ref: '#/components/schemas/device'
        ContactIndicator:
          $ref: '#/components/schemas/text'
        ContactContent:
          $ref: '#/components/schemas/text'
      description: Reference to the contact record reference for the serviced customer
    Assisted:
      type: object
      properties:
        EmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerContactReference:
          $ref: '#/components/schemas/customercontact'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    businessunit:
      type: object
      properties:
        BusinessFunction:
          type: string
          description: ''
          format: string
        Goal:
          type: string
          description: ''
          format: string
      description: The business unit responsible for the automated service
    Automated:
      type: object
      properties:
        BusinessUnitReference:
          $ref: '#/components/schemas/businessunit'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    Inventory:
      type: object
      properties:
        ServicingInventoryType:
          $ref: '#/components/schemas/text'
        ServicingPositionInventoryRecord:
          type: string
          description: Used to track inventory holdings at the position
          format: object
        ServicingInventoryTransactionRecord:
          $ref: '#/components/schemas/transaction'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: Defines how the servicing position is set-up in terms of supporting functions and application connections Obligation|Obligation (https://www.iso20022.org/standardsrepository/type/Obligation)|Standard|ISO20022 BM ()
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: ''
    position:
      type: object
      properties:
        PositionValue:
          $ref: '#/components/schemas/value'
        PositionQuantity:
          type: string
          description: ''
          format: number
        PositionDate:
          $ref: '#/components/schemas/datetime'
        PositionAmount:
          $ref: '#/components/schemas/amount'
      description: 'Reference to the servicing position, used to route customer contacts Position |Position  (https://www.iso20022.org/standardsrepository/type/Position)|Standard|ISO20022 BM ()'
    positiontypevalues:
      enum:
        - Balance/Cashflow
        - CreditPosition
        - CollateralPosition
        - SecurityPosition
      type: string
      description: "Defines the type of position (e.g. teller, relationship manager, servicing agent) ||\r\n|"
    financialfacility:
      type: object
      properties:
        FinancialFacility:
          type: string
          description: "A production or operational capacity to perform a business function for delivering a banking product or service\n\nA functional classification of banking product that provides ongoing capacity to deliver financial services (e.g. loan service, payment service)\n\n\n"
          format: class
      description: "Reference to the facilities and applications available/supporting the POS  (e.g. customer servicing, FX, teller services, commissions) ||\r\n|"
    reporttypevalues:
      enum:
        - FinancialReport
        - BusinessReport
        - ManagementReport
        - Statement
        - MaintenanceReport
        - RegulatoryReport
        - TaxReport
        - AnalysisReport
      type: string
      description: "Session reports that can be accessed during the session (e.g. real-time status, session statistics) ||\r\n|"
    report:
      type: object
      properties:
        ReportType:
          $ref: '#/components/schemas/reporttypevalues'
        ReportValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        ReportVersion:
          type: string
          description: ''
          format: number
        ReportDateTime:
          $ref: '#/components/schemas/datetime'
        ReportFormat:
          $ref: '#/components/schemas/text'
      description: "The session activity report ||\r\n|"
    PointofServiceOperatingSession:
      type: object
      properties:
        ServicingPositionConfigurationSet-up:
          $ref: '#/components/schemas/arrangement'
        ServicingPositionReference:
          $ref: '#/components/schemas/position'
        ServicingPositionType:
          $ref: '#/components/schemas/positiontypevalues'
        ServicingPositionLocation:
          $ref: '#/components/schemas/address'
        ServicingPositionFacilityType:
          $ref: '#/components/schemas/text'
        ServicingPositionFacilityReference:
          $ref: '#/components/schemas/financialfacility'
        ServicingPositionSchedule:
          $ref: '#/components/schemas/schedule'
        ServicingPositionActivityReport:
          $ref: '#/components/schemas/report'
        ServicingPositionOperatingSessionStatistics:
          type: string
          description: 'Service activity statistics that are maintained during the session  (e.g. average contact time, wait time, service utilization, facility usage)'
          format: object
        ServicingPositionOperatingSessionReportType:
          $ref: '#/components/schemas/reporttypevalues'
        ServicingPositionOperatingSessionReport:
          $ref: '#/components/schemas/report'
      description: 'Operate equipment and/or a largely automated facility within Point of Service. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    PointofServiceOperatingSession:
      description: PointofServiceOperatingSession
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PointofServiceOperatingSession'
    Assisted:
      description: Assisted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assisted'
    Automated:
      description: Automated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Automated'
    Interaction:
      description: Interaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interaction'
    Inventory:
      description: Inventory
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Inventory'
    CashPosition:
      description: CashPosition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CashPosition'
  parameters:
    pointofserviceid:
      name: pointofserviceid
      in: path
      required: true
      style: simple
      schema:
        type: string
    assistedid:
      name: assistedid
      in: path
      required: true
      style: simple
      schema:
        type: string
    automatedid:
      name: automatedid
      in: path
      required: true
      style: simple
      schema:
        type: string
    interactionid:
      name: interactionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    inventoryid:
      name: inventoryid
      in: path
      required: true
      style: simple
      schema:
        type: string
    cashpositionid:
      name: cashpositionid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    PointofServiceOperatingSession:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PointofServiceOperatingSession'
      required: true
    Assisted:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assisted'
      required: true
    Automated:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Automated'
      required: true
    Interaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interaction'
      required: true
    Inventory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Inventory'
      required: true
    CashPosition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CashPosition'
      required: true