openapi: 3.0.1
info:
  title: Customer Behavior Models
  description: 'This service domain handles the design and maintenance of a portfolio of customer behavior models that might be used in all aspects of customer relationship development, sales, servicing and product fulfillment'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerBehaviorModels/13.0.0
paths:
  /CustomerBehaviorModels/Create:
    post:
      tags:
        - CR - CustomerBehaviorModelSpecification
      summary: CrCR Create or register an imported customer behavior model
      description: CrCR Create or register an imported customer behavior model
      operationId: Create
      requestBody:
        $ref: '#/components/requestBodies/CustomerBehaviorModelSpecification'
      responses:
        '200':
          $ref: '#/components/responses/CustomerBehaviorModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Execute':
    put:
      tags:
        - CR - CustomerBehaviorModelSpecification
      summary: ExCR Automatically download a customer behavior model
      description: ExCR Automatically download a customer behavior model
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerBehaviorModelSpecification'
      responses:
        '200':
          $ref: '#/components/responses/CustomerBehaviorModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Request':
    put:
      tags:
        - CR - CustomerBehaviorModelSpecification
      summary: RqCR Request the use of a customer behavior model
      description: RqCR Request the use of a customer behavior model
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerBehaviorModelSpecification'
      responses:
        '200':
          $ref: '#/components/responses/CustomerBehaviorModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Retrieve':
    get:
      tags:
        - CR - CustomerBehaviorModelSpecification
      summary: ReCR Retrieve details about a customer behavior model
      description: ReCR Retrieve details about a customer behavior model
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerBehaviorModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/FunctionalRequirements/{functionalrequirementsid}/Update':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: UpBQ Update the requirements or other properties of a model
      description: UpBQ Update the requirements or other properties of a model
      operationId: UpdateFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/FunctionalRequirements/{functionalrequirementsid}/Exchange':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: EcBQ accept or reject requirements for a customer behavior model
      description: EcBQ accept or reject requirements for a customer behavior model
      operationId: ExchangeFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/FunctionalRequirements/{functionalrequirementsid}/Capture':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: CaBQ Capture usage reports for a customer behavior model
      description: CaBQ Capture usage reports for a customer behavior model
      operationId: CaptureFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/FunctionalRequirements/{functionalrequirementsid}/Request':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: RqBQ Request changes or improvements to a model
      description: RqBQ Request changes or improvements to a model
      operationId: RequestFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/FunctionalRequirements/{functionalrequirementsid}/Retrieve':
    get:
      tags:
        - BQ - FunctionalRequirements
      summary: ReBQ Retrieve details about the model specification and properties
      description: ReBQ Retrieve details about the model specification and properties
      operationId: RetrieveFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Testing/{testingid}/Update':
    put:
      tags:
        - BQ - Testing
      summary: UpBQ Update user testing content
      description: UpBQ Update user testing content
      operationId: UpdateTesting
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/testingid'
      requestBody:
        $ref: '#/components/requestBodies/Testing'
      responses:
        '200':
          $ref: '#/components/responses/Testing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Testing/{testingid}/Exchange':
    put:
      tags:
        - BQ - Testing
      summary: EcBQ Accept or reject testing results
      description: EcBQ Accept or reject testing results
      operationId: ExchangeTesting
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/testingid'
      requestBody:
        $ref: '#/components/requestBodies/Testing'
      responses:
        '200':
          $ref: '#/components/responses/Testing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Testing/{testingid}/Retrieve':
    get:
      tags:
        - BQ - Testing
      summary: ReBQ Retrieve details and testing results
      description: ReBQ Retrieve details and testing results
      operationId: RetrieveTesting
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/testingid'
      responses:
        '200':
          $ref: '#/components/responses/Testing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Production/{productionid}/Execute':
    put:
      tags:
        - BQ - Production
      summary: ExBQ Get automated support for model deployment
      description: ExBQ Get automated support for model deployment
      operationId: ExecuteProduction
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/productionid'
      requestBody:
        $ref: '#/components/requestBodies/Production'
      responses:
        '200':
          $ref: '#/components/responses/Production'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Production/{productionid}/Request':
    put:
      tags:
        - BQ - Production
      summary: RqBQ Request production support for a deployed model
      description: RqBQ Request production support for a deployed model
      operationId: RequestProduction
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/productionid'
      requestBody:
        $ref: '#/components/requestBodies/Production'
      responses:
        '200':
          $ref: '#/components/responses/Production'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerBehaviorModels/{customerbehaviormodelsid}/Production/{productionid}/Retrieve':
    get:
      tags:
        - BQ - Production
      summary: ReBQ Retrieve details and documentation covering model production deployment
      description: ReBQ Retrieve details and documentation covering model production deployment
      operationId: RetrieveProduction
      parameters:
        - $ref: '#/components/parameters/customerbehaviormodelsid'
        - $ref: '#/components/parameters/productionid'
      responses:
        '200':
          $ref: '#/components/responses/Production'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    modeltest:
      type: object
      properties:
        ModelTestType:
          type: string
          description: "Defines the type of test (e.g. unit, integration, load, user acceptance etc.)\n"
          format: string
        ModelTestHarness:
          type: string
          description: "Reference to the testing environment used to apply the test.\n"
          format: string
        ModelTestActivity:
          type: string
          description: ''
          format: string
        ModelTestResult:
          type: string
          description: ''
          format: string
      description: Reference to a type of test
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "Release version of available model plus version history as appropriate ||\r\n|"
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: "Reference to deployment task ||\r\n|"
    compliancecheck:
      type: object
      properties:
        ComplianceCheckType:
          type: string
          description: ''
          format: string
      description: Reference to compliance conformance check for the specification
    testtypevalues:
      enum:
        - ProductEligibilityTest
        - NextBestProductTest
        - IssuedDeviceTest
        - CardHolderAuthenticationTest
        - CardFundsAvailableTest
        - CardTransactionFraudTest
        - CardStand-InAuthorizationTest
        - ExternalAccessRequestTest
        - SuitabilityTest
        - LegalComplianceTest
        - RegulatoryComplianceTest
        - SystemFunctionalTest
        - SystemProductionTest
        - SystemBusinessRiskTest
        - SystemOperationsTest
        - CreditPolicyComplianceTest
        - RuleSetAndDecisionTreeTest
        - ModelBasedTests
        - AssetAndLiabilityValuationTest
        - LiquidityAndCashFlowTest
        - RiskTest
        - SensitivityTest
      type: string
      description: ">\r\n* `ProductEligibilityTest` - \r\n* `NextBestProductTest` - \r\n* `IssuedDeviceTest` - \r\n* `CardHolderAuthenticationTest` - \r\n* `CardFundsAvailableTest` - \r\n* `CardTransactionFraudTest` - \r\n* `CardStand-InAuthorizationTest` - \r\n* `ExternalAccessRequestTest` - \r\n* `SuitabilityTest` - \r\n* `LegalComplianceTest` - \r\n* `RegulatoryComplianceTest` - \r\n* `SystemFunctionalTest` - \r\n* `SystemProductionTest` - \r\n* `SystemBusinessRiskTest` - \r\n* `SystemOperationsTest` - \r\n* `CreditPolicyComplianceTest` - \r\n* `RuleSetAndDecisionTreeTest` - \r\n* `ModelBasedTests` - \r\n* `AssetAndLiabilityValuationTest` - \r\n* `LiquidityAndCashFlowTest` - \r\n* `RiskTest` - \r\n* `SensitivityTest` - \r\n"
    Testing:
      type: object
      properties:
        CustomerBehaviorModelTestReference:
          $ref: '#/components/schemas/modeltest'
        CustomerBehaviorModelTestType:
          type: string
          description: 'Defines the type of test (e.g. unit, integration, load, user acceptance etc.)'
          format: string
        CustomerBehaviorModelTestHarnessReference:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelTestResult:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelTestingTaskReference:
          $ref: '#/components/schemas/task'
        CustomerBehaviorModelTestingTaskRecord:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelComplianceTaskReference:
          $ref: '#/components/schemas/compliancecheck'
        CustomerBehaviorModelComplianceTaskRecord:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelComplianceTestReference:
          $ref: '#/components/schemas/modeltest'
        CustomerBehaviorModelComplianceTestType:
          $ref: '#/components/schemas/testtypevalues'
      description: "The main design elements/views making up the overall specification\n\nExamples: Business Requirements"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the business units where the model is deployed and in use ||\r\n|"
    FunctionalRequirements:
      type: object
      properties:
        CustomerBehaviorModelDesignTaskReference:
          $ref: '#/components/schemas/task'
        CustomerBehaviorModelDesignTaskRecord:
          $ref: '#/components/schemas/text'
        CustomerMarketDataServiceReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerMarketDataRecord:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelFeedbackRecord:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelRequirementsSpecification:
          $ref: '#/components/schemas/text'
      description: "The main design elements/views making up the overall specification\n\nExamples: Business Requirements"
    requirement:
      type: object
      properties:
        RequirementType:
          type: string
          description: ''
          format: string
      description: Specification of the operational and technical requirements
    modelusage:
      type: object
      properties:
        ModelUsage:
          type: string
          description: The use of a model over a specified time period.
          format: class
      description: "Tracking deployment and usage frequency ||\r\n|"
    modelusageruleset:
      type: object
      properties:
        ModelUsageRuleSet:
          type: string
          description: 'A set of rules (e.g., regulation, policy, law, guideline) to usage the model.'
          format: class
      description: Provides guidance on the use of the model
    Production:
      type: object
      properties:
        CustomerBehaviorModelOperationalRequirements:
          $ref: '#/components/schemas/requirement'
        CustomerBehaviorModelAllowedUsage:
          $ref: '#/components/schemas/modelusage'
        CustomerBehaviorModelUsageGuidelines:
          $ref: '#/components/schemas/modelusageruleset'
      description: "The main design elements/views making up the overall specification\n\nExamples: Business Requirements"
    customerbehaviormodeltypevalues:
      enum:
        - DemographicModel
        - PsychographicModel
        - GeographicModel
        - SocioeconomicModel
        - SituationalModel
        - CulturalModel
        - Usage-BasedModel
        - Benefit-SoughtModel
        - HybridModel
      type: string
      description: "The type or category of behavior model (e.g. life event detection) ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The operational and development status of the model (e.g. under development, available, under review) Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()'
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: Maintains the current deployment configuration of the model Obligation|Obligation (https://www.iso20022.org/standardsrepository/type/Obligation)|Standard|ISO20022 BM ()
    modeldeploymentconfiguration:
      type: object
      properties:
        ModelDeploymentConfiguration:
          type: string
          description: Configuration for deployment a model.
          format: class
      description: "Details of the deployment for reference ||\r\n|"
    modelimpact:
      type: object
      properties:
        ModelImpact:
          type: string
          description: The impact/accuracy of the model's insights.
          format: class
      description: "Track reporting of the impact/accuracy of the model's insights ||\r\n|"
    customerbehaviormodel:
      type: object
      properties:
        CustomerBehaviorModelType:
          $ref: '#/components/schemas/customerbehaviormodeltypevalues'
      description: "The deployable model in any appropriate form (including historical versions as appropriate) ||\r\n|"
    CustomerBehaviorModelSpecification:
      type: object
      properties:
        CustomerBehaviorModelType:
          $ref: '#/components/schemas/customerbehaviormodeltypevalues'
        CustomerBehaviorModelPurpose:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelDeployment:
          $ref: '#/components/schemas/arrangement'
        EmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerBehaviorModelDeploymentConfiguration:
          $ref: '#/components/schemas/modeldeploymentconfiguration'
        CustomerBehaviorModelDeploymentTaskReference:
          $ref: '#/components/schemas/task'
        CustomerBehaviorModelDeploymentTaskRecord:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModelStatus:
          $ref: '#/components/schemas/status'
        CustomerBehaviorModelUsage:
          $ref: '#/components/schemas/modelusage'
        CustomerBehaviorModelImpact:
          $ref: '#/components/schemas/modelimpact'
        CustomerBehaviorModelVersion:
          $ref: '#/components/schemas/text'
        CustomerBehaviorModel:
          $ref: '#/components/schemas/customerbehaviormodel'
      description: "Create and maintain a design for a procedure, product/service model or other such entity  within Customer Behavior Models. \nExample: Create and maintain product designs and analytical models."
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerBehaviorModelSpecification:
      description: CustomerBehaviorModelSpecification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerBehaviorModelSpecification'
    FunctionalRequirements:
      description: FunctionalRequirements
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FunctionalRequirements'
    Testing:
      description: Testing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Testing'
    Production:
      description: Production
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Production'
  parameters:
    customerbehaviormodelsid:
      name: customerbehaviormodelsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    functionalrequirementsid:
      name: functionalrequirementsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    testingid:
      name: testingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    productionid:
      name: productionid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerBehaviorModelSpecification:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerBehaviorModelSpecification'
      required: true
    FunctionalRequirements:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FunctionalRequirements'
      required: true
    Testing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Testing'
      required: true
    Production:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Production'
      required: true