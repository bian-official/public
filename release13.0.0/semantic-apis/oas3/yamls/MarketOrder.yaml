openapi: 3.0.1
info:
  title: Market Order
  description: Market Order records an instruction from a customer or his or her representative to buy or sell securities. It follows the order during its lifetime and reports back to the requestor on the execution.
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/MarketOrder/13.0.0
paths:
  /MarketOrder/Initiate:
    post:
      tags:
        - CR - MarketOrderTransaction
      summary: InCR Initiate a market order
      description: InCR Initiate a market order
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/MarketOrderTransaction'
      responses:
        '200':
          $ref: '#/components/responses/MarketOrderTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrder/{marketorderid}/Update':
    put:
      tags:
        - CR - MarketOrderTransaction
      summary: UpCR Update details on an active market order
      description: UpCR Update details on an active market order
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/marketorderid'
      requestBody:
        $ref: '#/components/requestBodies/MarketOrderTransaction'
      responses:
        '200':
          $ref: '#/components/responses/MarketOrderTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrder/{marketorderid}/Retrieve':
    get:
      tags:
        - CR - MarketOrderTransaction
      summary: ReCR Retrieve details about a market order
      description: ReCR Retrieve details about a market order
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/marketorderid'
      responses:
        '200':
          $ref: '#/components/responses/MarketOrderTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrder/{marketorderid}/Compliance/{complianceid}/Retrieve':
    get:
      tags:
        - BQ - Compliance
      summary: ReBQ Retrieve details about a market order compliance check
      description: ReBQ Retrieve details about a market order compliance check
      operationId: RetrieveCompliance
      parameters:
        - $ref: '#/components/parameters/marketorderid'
        - $ref: '#/components/parameters/complianceid'
      responses:
        '200':
          $ref: '#/components/responses/Compliance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrder/{marketorderid}/FundingCheck/{fundingcheckid}/Retrieve':
    get:
      tags:
        - BQ - FundingCheck
      summary: ReBQ Retrieve details about a market order funding check
      description: ReBQ Retrieve details about a market order funding check
      operationId: RetrieveFundingCheck
      parameters:
        - $ref: '#/components/parameters/marketorderid'
        - $ref: '#/components/parameters/fundingcheckid'
      responses:
        '200':
          $ref: '#/components/responses/FundingCheck'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrder/{marketorderid}/CustomerProcessing/{customerprocessingid}/Retrieve':
    get:
      tags:
        - BQ - CustomerProcessing
      summary: ReBQ Retrieve details about customer specific processing for a market order
      description: ReBQ Retrieve details about customer specific processing for a market order
      operationId: RetrieveCustomerProcessing
      parameters:
        - $ref: '#/components/parameters/marketorderid'
        - $ref: '#/components/parameters/customerprocessingid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProcessing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrder/{marketorderid}/TradeInitiation/{tradeinitiationid}/Exchange':
    put:
      tags:
        - BQ - TradeInitiation
      summary: 'EcBQ Accept, reject etc. a proposed market order market trade'
      description: 'EcBQ Accept, reject etc. a proposed market order market trade'
      operationId: ExchangeTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderid'
        - $ref: '#/components/parameters/tradeinitiationid'
      requestBody:
        $ref: '#/components/requestBodies/TradeInitiation'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrder/{marketorderid}/TradeInitiation/{tradeinitiationid}/Retrieve':
    get:
      tags:
        - BQ - TradeInitiation
      summary: ReBQ Retrieve details about a market order's market trade
      description: ReBQ Retrieve details about a market order's market trade
      operationId: RetrieveTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderid'
        - $ref: '#/components/parameters/tradeinitiationid'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    assessmenttypevalues:
      enum:
        - AssetValuation
        - ProductMatching
        - Authorization
        - Authentication
        - QualityAssurance
        - Audit
        - ComplianceCheck
        - FundingCheck
        - SuitabilityCheck
        - PerformanceCheck
        - ImpactAssessment
        - RiskAssessment
        - Rating
        - UnderwritingAssessment
        - Qualification
        - Verification
        - KYCAssessment
        - PEPAssessment
        - AMLAssessment
      type: string
      description: ">\r\n* `AssetValuation` - \r\n* `ProductMatching` - \r\n* `Authorization` - An evaluation whether a party or system is allowed to do something.\n\nThe consent given by a participant (or a third party acting on behalf of that participant) in order to transfer funds or securities. (ECB)\n\nAuthorization is a mechanism by which a computer system determines whether to allow or deny specific action to a user. Authorization is often controlled by rather complex rules and algorithms, usually specified as part of an access control model. Authorization often follows (and required) authentication, however, authentication and authorization are two separate mechanisms. In rare cases, \"authorization\" is understood as a process of allowing access, granting permissions or giving approval. Such as \"authorization\" of a request to join a group. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `Authentication` - An evaluation whether a party or system is what it claims to be.\n\nA security mechanism for verifying: 1) the identity of an individual or other entity (including verification by means of a computer or computer application); and 2) the level of authority of that person or entity (i.e. the ability of that person or entity to perform specific tasks or activities). (ECB)\n\nAuthentication is a mechanism by which a computer system checks that the user is really the one she or he claims to be. Authentication can be implemented by a broad variety of mechanisms broadly divided into three categories: something you know, something you have, something you are. Traditionally, authentication is done by the means of by username and password. Authentication is often followed by authorization, however, authentication and authorization are two separate mechanisms. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `QualityAssurance` - \r\n* `Audit` - \r\n* `ComplianceCheck` - \r\n* `FundingCheck` - \r\n* `SuitabilityCheck` - \r\n* `PerformanceCheck` - \r\n* `ImpactAssessment` - \r\n* `RiskAssessment` - \r\n* `Rating` - \r\n* `UnderwritingAssessment` - \r\n* `Qualification` - \r\n* `Verification` - A process establishing that a particular information is correct, while the meaning of \"information\" and \"correct\" varies from context to context. When dealing with identity information, this usually means formal verification of identity attributes, checking the schema, identifier uniqueness and referential integrity. However, verification may mean deeper verification, such as checking that the information is true and up-to-date.  (ISO/IEC 24760-1:2019 - IT Security and Privacy)\n\r\n* `KYCAssessment` - An assessment conducted by businesses and financial institutions to verify and confirm the identity of their customers or clients. The primary purpose of a KYC check is to prevent illegal activities, such as money laundering, terrorist financing, and fraud, by ensuring that customers are who they claim to be.\r\n* `PEPAssessment` - A PEP check, or \"Politically Exposed Person\" check, is an assessment conducted by used by businesses, financial institutions, and government agencies to identify individuals who hold prominent public positions or have significant political influence. The purpose of a PEP check is to assess and manage the potential risks associated with doing business with these individuals, as they may be more susceptible to corruption, money laundering, or other illicit activities.\r\n* `AMLAssessment` - An AML (Anti-Money Laundering) check is an assessment conducted by businesses, financial institutions, and other organizations to prevent and detect money laundering and the financing of criminal activities. The main purpose of an AML check is to ensure that financial transactions and business relationships are not being used to disguise the illegal origins of funds.\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The type of market order (e.g. Day Order. Order on Open/Close, Fill or Kill, Limit Order) ||\r\n|"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: ''
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: "Key dates associated with the transaction (e.g. order capture, trade execution, order completion) ||\r\n|"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Value of the specific date type ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: Reference to the underlying cash account supporting the transaction GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO20022 BM ()
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "The employee/business unit placing the market order ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    model:
      type: object
      properties:
        ModelType:
          $ref: '#/components/schemas/text'
        ModelPurpose:
          $ref: '#/components/schemas/text'
        ModelVersion:
          $ref: '#/components/schemas/text'
        ModelName:
          $ref: '#/components/schemas/name'
        ModelDateAndTime:
          $ref: '#/components/schemas/datetime'
        ModelStatus:
          $ref: '#/components/schemas/status'
      description: ''
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: Document that provides background or corroborating information regarding an assessment(s).
    requirement:
      type: object
      properties:
        RequirementType:
          type: string
          description: ''
          format: string
      description: ''
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: Date when the assessment expires. (ISO20022)
    assessment:
      type: object
      properties:
        AssessmentType:
          $ref: '#/components/schemas/assessmenttypevalues'
        AssessmentMethod:
          $ref: '#/components/schemas/text'
        AssessmentSchedule:
          $ref: '#/components/schemas/schedule'
        AssessmentDescription:
          $ref: '#/components/schemas/text'
        AssessmentModel:
          $ref: '#/components/schemas/model'
        AssessmentDateTime:
          $ref: '#/components/schemas/datetime'
        AssessmentResult:
          $ref: '#/components/schemas/text'
        AssessmentSupportingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRepresentingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRequiredAdjustment:
          $ref: '#/components/schemas/text'
        AssessmentRequirement:
          $ref: '#/components/schemas/requirement'
        AssessmentExpiryDate:
          $ref: '#/components/schemas/date'
        AssessmentStatus:
          $ref: '#/components/schemas/status'
      description: Details of any customer specific processing requirements applied to the market order
    CustomerProcessing:
      type: object
      properties:
        MarketOrderCustomerProcessingCheckResult:
          $ref: '#/components/schemas/assessment'
      description: The sub-tasks involved in the execution of the financial transaction
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: Details of the market trade initiation task
    TradeInitiation:
      type: object
      properties:
        MarketTradeTransactionInstanceReference:
          $ref: '#/components/schemas/identifier'
        MarketTradeTransactionInstanceStatus:
          $ref: '#/components/schemas/status'
        MarketTradeInitiationTaskResult:
          $ref: '#/components/schemas/task'
      description: The sub-tasks involved in the execution of the financial transaction
    fundingcheck:
      type: object
      properties:
        FundingCheck:
          type: string
          description: An assessment to check the fund is available
          format: class
      description: The outcome of the funds available check
    FundingCheck:
      type: object
      properties:
        MarketOrderTransactionFundingCheckResult:
          $ref: '#/components/schemas/fundingcheck'
      description: The sub-tasks involved in the execution of the financial transaction
    compliancechecktypevalues:
      enum:
        - RegulatoryComplianceCheck
        - LegalComplianceCheck
        - GuidelineComplianceCheck
      type: string
      description: ">\r\n* `RegulatoryComplianceCheck` - \r\n* `LegalComplianceCheck` - \r\n* `GuidelineComplianceCheck` - \r\n"
    compliancecheck:
      type: object
      properties:
        ComplianceCheckType:
          type: string
          description: ''
          format: string
      description: The outcome of the compliance check
    Compliance:
      type: object
      properties:
        MarketOrderTransactionComplianceCheckType:
          $ref: '#/components/schemas/compliancechecktypevalues'
        MarketOrderTransactionComplianceCheckResult:
          $ref: '#/components/schemas/compliancecheck'
        MarketOrderTransactionComplianceTaskResult:
          $ref: '#/components/schemas/task'
      description: The sub-tasks involved in the execution of the financial transaction
    instructiontypevalues:
      enum:
        - PaymentInstruction
        - DeliveryOrder
        - InformationRequest
        - ExchangeInstruction
        - AllocationInstruction
        - MaintenanceInstruction
      type: string
      description: "The type of market order request (e.g. Managed Investment, Corporate Finance) ||\r\n|"
    instructiondatetimetypevalues:
      enum:
        - DueDate
        - ExecutionDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n* `FulfillmentDate` - \r\n"
    instructiondatetime:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/datetime'
        InstructionDateType:
          $ref: '#/components/schemas/instructiondatetimetypevalues'
      description: ''
    instructionstatustypevalues:
      enum:
        - Pendingprocessing
        - Acknowledgedaccepted
        - Rejected
        - Accepted
        - Completed
        - Notreceived
        - Cancelled
        - Beingcancelled
        - Receivedbyissuerorregistrar
        - Pending
        - Standinginstruction
        - Queued
        - Cancelledbysubcustodian
        - Forwarded
      type: string
      description: ">\r\n* `Pendingprocessing` - Processing of the instruction is pending.\r\n* `Acknowledgedaccepted` - Instruction has been acknowledged and accepted and is validated for further processing.\r\n* `Rejected` - Instruction has been rejected.\r\n* `Accepted` - Instruction has been accepted and is validated for further processing.\r\n* `Completed` - Processing has been completed.\r\n* `Notreceived` - No instruction has been received (to be used in a reminder).\r\n* `Cancelled` - Instruction has been cancelled.\r\n* `Beingcancelled` - Cancel request is being processed.\r\n* `Receivedbyissuerorregistrar` - Instruction has been received by Issuer.\r\n* `Pending` - Instruction is pending.\r\n* `Standinginstruction` - Standing instruction is applied.\r\n* `Queued` - Instruction is queued.\r\n* `Cancelledbysubcustodian` - Instruction has been cancelled by the agent, for example, due to an event deadline extension.\r\n* `Forwarded` - Accepted and sent along the chain.\r\n"
    instructionstatus:
      type: object
      properties:
        InstructionStatusType:
          $ref: '#/components/schemas/instructionstatustypevalues'
        InstructionStatus:
          $ref: '#/components/schemas/status'
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instructionidentificationtypevalues:
      enum:
        - OrderNumber
        - InstructionNumber
      type: string
      description: ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
    instructionidentification:
      type: object
      properties:
        InstructionIdentification:
          $ref: '#/components/schemas/identifier'
        InstructionIdentificationType:
          $ref: '#/components/schemas/instructionidentificationtypevalues'
      description: "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    instruction:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/instructiondatetime'
        InstructionStatus:
          $ref: '#/components/schemas/instructionstatus'
        InstructionIdentifier:
          $ref: '#/components/schemas/instructionidentification'
        InstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        InstructionResult:
          $ref: '#/components/schemas/text'
        InstructionDescription:
          $ref: '#/components/schemas/text'
        InstructionLog:
          $ref: '#/components/schemas/log'
        InstructionPurpose:
          $ref: '#/components/schemas/text'
      description: "Any customer specific processing preferences or requirements ||\r\n|"
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: "The document reference for the order confirmation notice ||\r\n|"
    marketordertransaction:
      type: object
      properties:
        MarketOrderTransaction:
          type: string
          description: "Transaction to fulfill the market order\n\n"
          format: class
      description: "The details of the market order transaction ||\r\n|"
    securitytypevalues:
      enum:
        - Equity
        - Warrant
        - Entitlement
      type: string
      description: "The security to be traded ||\r\n|"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: The volume of shares to be bought or sold CurrencyAndAmount|CurrencyAndAmount (https://www.iso20022.org/standardsrepository/type/CurrencyAndAmount)|Standard|ISO20022  ()
    MarketOrderTransaction:
      type: object
      properties:
        MarketOrderInstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        EmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        InvestmentPortfolioInstanceReference:
          $ref: '#/components/schemas/identifier'
        CustomerMarketOrderProcessingInstruction:
          $ref: '#/components/schemas/instruction'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        CorrespondenceInstanceReference:
          $ref: '#/components/schemas/identifier'
        MarketOrderTransaction:
          $ref: '#/components/schemas/marketordertransaction'
        InvestmentAccountArrangementInstanceReference:
          $ref: '#/components/schemas/identifier'
        CurrentAccountArrangementInstanceReference:
          $ref: '#/components/schemas/identifier'
        MarketOrderType:
          $ref: '#/components/schemas/text'
        SecurityType:
          $ref: '#/components/schemas/securitytypevalues'
        Amount:
          $ref: '#/components/schemas/amount'
        DateType:
          $ref: '#/components/schemas/datetimetypevalues'
        Date:
          $ref: '#/components/schemas/datetime'
      description: 'Execute a well-bounded financial transaction/task, typically involving largely automated/structured fulfillment processing within Market Order. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    MarketOrderTransaction:
      description: MarketOrderTransaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MarketOrderTransaction'
    Compliance:
      description: Compliance
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Compliance'
    FundingCheck:
      description: FundingCheck
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FundingCheck'
    CustomerProcessing:
      description: CustomerProcessing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerProcessing'
    TradeInitiation:
      description: TradeInitiation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TradeInitiation'
  parameters:
    marketorderid:
      name: marketorderid
      in: path
      required: true
      style: simple
      schema:
        type: string
    complianceid:
      name: complianceid
      in: path
      required: true
      style: simple
      schema:
        type: string
    fundingcheckid:
      name: fundingcheckid
      in: path
      required: true
      style: simple
      schema:
        type: string
    customerprocessingid:
      name: customerprocessingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    tradeinitiationid:
      name: tradeinitiationid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    MarketOrderTransaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MarketOrderTransaction'
      required: true
    TradeInitiation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TradeInitiation'
      required: true