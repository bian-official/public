openapi: 3.0.1
info:
  title: Product Broker Agreement
  description: This service domain maintains product broker contractual and service level agreements and tracks and confirms compliance and service related activity/volume goals when necessary
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/ProductBrokerAgreement/13.0.0
paths:
  /ProductBrokerAgreement/Evaluate:
    post:
      tags:
        - CR - BrokerAgreement
      summary: EvCR Establish a product broker agreement (evaluate applicable rules)
      description: EvCR Establish a product broker agreement (evaluate applicable rules)
      operationId: Evaluate
      requestBody:
        $ref: '#/components/requestBodies/BrokerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/BrokerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/Update':
    put:
      tags:
        - CR - BrokerAgreement
      summary: UpCR Update details of an active product broker agreement
      description: UpCR Update details of an active product broker agreement
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/BrokerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/BrokerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/Control':
    put:
      tags:
        - CR - BrokerAgreement
      summary: CoCR Control the processing of an agreement (e.g. terminate)
      description: CoCR Control the processing of an agreement (e.g. terminate)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/BrokerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/BrokerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/Exchange':
    put:
      tags:
        - CR - BrokerAgreement
      summary: 'EcCR Accept, reject etc an agreement'
      description: 'EcCR Accept, reject etc an agreement'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/BrokerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/BrokerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/Request':
    put:
      tags:
        - CR - BrokerAgreement
      summary: RqCR Request check of proposed activity is compatible
      description: RqCR Request check of proposed activity is compatible
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/BrokerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/BrokerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/Grant':
    put:
      tags:
        - CR - BrokerAgreement
      summary: GrCR Obtain grant authority to act under the terms of the agreement
      description: GrCR Obtain grant authority to act under the terms of the agreement
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/BrokerAgreement'
      responses:
        '200':
          $ref: '#/components/responses/BrokerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/Retrieve':
    get:
      tags:
        - CR - BrokerAgreement
      summary: ReCR Retrieve details about a broker agreement
      description: ReCR Retrieve details about a broker agreement
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      responses:
        '200':
          $ref: '#/components/responses/BrokerAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/LegalTerms/Evaluate':
    post:
      tags:
        - BQ - LegalTerms
      summary: EvBQ Establish the legal terms for a broker agreement
      description: EvBQ Establish the legal terms for a broker agreement
      operationId: EvaluateLegalTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/LegalTerms'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/LegalTerms/{legaltermsid}/Update':
    put:
      tags:
        - BQ - LegalTerms
      summary: UpBQ Update the legal terms for a broker agreement
      description: UpBQ Update the legal terms for a broker agreement
      operationId: UpdateLegalTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
        - $ref: '#/components/parameters/legaltermsid'
      requestBody:
        $ref: '#/components/requestBodies/LegalTerms'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/LegalTerms/{legaltermsid}/Retrieve':
    get:
      tags:
        - BQ - LegalTerms
      summary: ReBQ Retrieve details about the legal terms of an agreement
      description: ReBQ Retrieve details about the legal terms of an agreement
      operationId: RetrieveLegalTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
        - $ref: '#/components/parameters/legaltermsid'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/RegulatoryTerms/Evaluate':
    post:
      tags:
        - BQ - RegulatoryTerms
      summary: EvBQ Establish the regulatory terms for a broker agreement
      description: EvBQ Establish the regulatory terms for a broker agreement
      operationId: EvaluateRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/RegulatoryTerms'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/RegulatoryTerms/{regulatorytermsid}/Update':
    put:
      tags:
        - BQ - RegulatoryTerms
      summary: UpBQ Update the regulatory terms for a broker agreement
      description: UpBQ Update the regulatory terms for a broker agreement
      operationId: UpdateRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
        - $ref: '#/components/parameters/regulatorytermsid'
      requestBody:
        $ref: '#/components/requestBodies/RegulatoryTerms'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/RegulatoryTerms/{regulatorytermsid}/Retrieve':
    get:
      tags:
        - BQ - RegulatoryTerms
      summary: ReBQ Retrieve details about the regulatory terms of an agreement
      description: ReBQ Retrieve details about the regulatory terms of an agreement
      operationId: RetrieveRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
        - $ref: '#/components/parameters/regulatorytermsid'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/PolicyTerms/Evaluate':
    post:
      tags:
        - BQ - PolicyTerms
      summary: EvBQ Establish the corporate policy terms for a broker agreement
      description: EvBQ Establish the corporate policy terms for a broker agreement
      operationId: EvaluatePolicyTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
      requestBody:
        $ref: '#/components/requestBodies/PolicyTerms'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/PolicyTerms/{policytermsid}/Update':
    put:
      tags:
        - BQ - PolicyTerms
      summary: UpBQ Update the corporate policy terms for a broker agreement
      description: UpBQ Update the corporate policy terms for a broker agreement
      operationId: UpdatePolicyTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
        - $ref: '#/components/parameters/policytermsid'
      requestBody:
        $ref: '#/components/requestBodies/PolicyTerms'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ProductBrokerAgreement/{productbrokeragreementid}/PolicyTerms/{policytermsid}/Retrieve':
    get:
      tags:
        - BQ - PolicyTerms
      summary: ReBQ Retrieve details about the corporate policy terms of an agreement
      description: ReBQ Retrieve details about the corporate policy terms of an agreement
      operationId: RetrievePolicyTerms
      parameters:
        - $ref: '#/components/parameters/productbrokeragreementid'
        - $ref: '#/components/parameters/policytermsid'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The type of bank policy referenced (e.g. staff certification)
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its actions in pursuit of long-term goals. (Business Dictionary)\n\r\n* `Regulation` - A rule used to carry out a law (FIBO)\n\nBusiness Dictionary: a rule (with or without the coercive power of law) employed in controlling, directing, or managing an activity, organization, or system. \n\nThe set of rules and legislation governing certain actions. \nhttps://financial-dictionary.thefreedictionary.com/Regulatory\r\n* `Law` - A binding rule that the courts will enforce.\nA system of rules and guidelines which are enforced through social institutions to govern behavior. (FIBO)\n\r\n* `Guideline` - A recommended practice (adapted from Business Dictionary)\nA general rule, principle, or piece of advice.\r\n* `Criterion` - A principle or standard by which something may be judged or decided.\n\nRead more: http://www.businessdictionary.com/definition/criterion.html\r\n* `Standard` - A rule considered by an authority or by general consent as a basis of comparison\r\n"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: ''
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: The term of the agreement ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: Reference to the broker organization Party|Party (https://www.iso20022.org/standardsrepository/type/Party)|Standard|ISO20022BM ()
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to signatories ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: Reference to the bank's policies or rules
    PolicyTerms:
      type: object
      properties:
        BankPolicy-RuleType:
          $ref: '#/components/schemas/text'
        ApplicableBankPolicy-RuleReference:
          $ref: '#/components/schemas/ruleset'
        ApplicableBankPolicy-RuleInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\nExamples: Required disclosures"
    jurisdiction:
      type: object
      properties:
        Jurisdiction:
          type: string
          description: Jurisdiction that will be assigned in case of legal dispute.
          format: class
      description: The contractual jurisdiction or coverage of the agreement (e.g. "governed by State") Jurisdiction|Jurisdiction (https://www.iso20022.org/standardsrepository/type/Jurisdiction)|Standard|ISO20022 BM ()
    law:
      type: object
      properties:
        LawType:
          $ref: '#/components/schemas/text'
        LawDescription:
          $ref: '#/components/schemas/text'
        LegalPenalty:
          $ref: '#/components/schemas/text'
        LegalGuideline:
          $ref: '#/components/schemas/text'
      description: Reference to any legal requirements
    LegalTerms:
      type: object
      properties:
        Jurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        ApplicableLawReference:
          $ref: '#/components/schemas/law'
        ApplicableLawInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\nExamples: Required disclosures"
    regulatoryauthority:
      type: object
      properties:
        RegulatoryAuthority:
          type: string
          description: An organisation that is alowed to impose regulations
          format: class
      description: The applicable regulatory authority
    regulation:
      type: object
      properties:
        RegulationDefinition:
          $ref: '#/components/schemas/text'
      description: Reference to any regulatory requirements
    RegulatoryTerms:
      type: object
      properties:
        RegulatoryAuthority:
          $ref: '#/components/schemas/regulatoryauthority'
        ApplicableRegulationReference:
          $ref: '#/components/schemas/regulation'
        ApplicableRegulationInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\nExamples: Required disclosures"
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - BrokerAgreement
        - SalesAgreement
        - PurchaseAgreement
        - MaintenanceAgreement
        - ProductAgreement
        - ProductSalesAgreement
        - ResourceAgreement
      type: string
      description: "The type of agreement (e.g. service provider, product alliance) ||\r\n|"
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: "Reference to any associated documents ||\r\n|"
    BrokerAgreement:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        AgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        AgreementJurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        AgreementValidFromToDate:
          $ref: '#/components/schemas/datetime'
        AgreementSignaturesResponsibleParties:
          $ref: '#/components/schemas/involvedparty'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
      description: "Maintain the terms and conditions that apply to a commercial relationship within Product Broker Agreement.\n\n\n"
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    BrokerAgreement:
      description: BrokerAgreement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrokerAgreement'
    LegalTerms:
      description: LegalTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LegalTerms'
    RegulatoryTerms:
      description: RegulatoryTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegulatoryTerms'
    PolicyTerms:
      description: PolicyTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyTerms'
  parameters:
    productbrokeragreementid:
      name: productbrokeragreementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    legaltermsid:
      name: legaltermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    regulatorytermsid:
      name: regulatorytermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    policytermsid:
      name: policytermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    BrokerAgreement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrokerAgreement'
      required: true
    LegalTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LegalTerms'
      required: true
    RegulatoryTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegulatoryTerms'
      required: true
    PolicyTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyTerms'
      required: true