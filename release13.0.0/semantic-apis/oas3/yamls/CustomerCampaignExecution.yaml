openapi: 3.0.1
info:
  title: Customer Campaign Execution
  description: Execute a customer campaign (version) and track and respond to impact
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerCampaignExecution/13.0.0
paths:
  /CustomerCampaignExecution/Initiate:
    post:
      tags:
        - CR - CustomerCampaignProcedure
      summary: InCR Initiate customer campaign processing
      description: InCR Initiate customer campaign processing
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CustomerCampaignProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerCampaignProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Update':
    put:
      tags:
        - CR - CustomerCampaignProcedure
      summary: UpCR Update details of an active customer campaign
      description: UpCR Update details of an active customer campaign
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerCampaignProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerCampaignProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Control':
    put:
      tags:
        - CR - CustomerCampaignProcedure
      summary: CoCR Control the execution of a customer campaign
      description: CoCR Control the execution of a customer campaign
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerCampaignProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerCampaignProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Exchange':
    put:
      tags:
        - CR - CustomerCampaignProcedure
      summary: 'EcCR Accept, reject, etc. a customer campaign procedure'
      description: 'EcCR Accept, reject, etc. a customer campaign procedure'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerCampaignProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerCampaignProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Execute':
    put:
      tags:
        - CR - CustomerCampaignProcedure
      summary: ExCR Execute an automated action against an active customer campaign
      description: ExCR Execute an automated action against an active customer campaign
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerCampaignProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerCampaignProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Request':
    put:
      tags:
        - CR - CustomerCampaignProcedure
      summary: RqCR Request manual intervention in a campaign
      description: RqCR Request manual intervention in a campaign
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerCampaignProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerCampaignProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Retrieve':
    get:
      tags:
        - CR - CustomerCampaignProcedure
      summary: ReCR Retrieve details about an active customer campaign
      description: ReCR Retrieve details about an active customer campaign
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerCampaignProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/CandidateSelection/{candidateselectionid}/Update':
    put:
      tags:
        - BQ - CandidateSelection
      summary: UpBQ Update a campaign candidate list
      description: UpBQ Update a campaign candidate list
      operationId: UpdateCandidateSelection
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/candidateselectionid'
      requestBody:
        $ref: '#/components/requestBodies/CandidateSelection'
      responses:
        '200':
          $ref: '#/components/responses/CandidateSelection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/CandidateSelection/{candidateselectionid}/Exchange':
    put:
      tags:
        - BQ - CandidateSelection
      summary: 'EcBQ Accept, reject, etc a candidate list entry'
      description: 'EcBQ Accept, reject, etc a candidate list entry'
      operationId: ExchangeCandidateSelection
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/candidateselectionid'
      requestBody:
        $ref: '#/components/requestBodies/CandidateSelection'
      responses:
        '200':
          $ref: '#/components/responses/CandidateSelection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/CandidateSelection/{candidateselectionid}/Retrieve':
    get:
      tags:
        - BQ - CandidateSelection
      summary: ReBQ Retrieve details about a campaign candidate list
      description: ReBQ Retrieve details about a campaign candidate list
      operationId: RetrieveCandidateSelection
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/candidateselectionid'
      responses:
        '200':
          $ref: '#/components/responses/CandidateSelection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Execution/Initiate':
    post:
      tags:
        - BQ - Execution
      summary: InBQ Initiate a campaign execution task
      description: InBQ Initiate a campaign execution task
      operationId: InitiateExecution
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Execution/{executionid}/Update':
    put:
      tags:
        - BQ - Execution
      summary: UpBQ Update details of a campaign execution task
      description: UpBQ Update details of a campaign execution task
      operationId: UpdateExecution
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/executionid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Execution/{executionid}/Request':
    put:
      tags:
        - BQ - Execution
      summary: RqBQ Request manual intervention in a campaign execution task
      description: RqBQ Request manual intervention in a campaign execution task
      operationId: RequestExecution
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/executionid'
      requestBody:
        $ref: '#/components/requestBodies/Execution'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/Execution/{executionid}/Retrieve':
    get:
      tags:
        - BQ - Execution
      summary: ReBQ Retrieve details about a campaign execution task
      description: ReBQ Retrieve details about a campaign execution task
      operationId: RetrieveExecution
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/executionid'
      responses:
        '200':
          $ref: '#/components/responses/Execution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/AnalysisFeedback/Initiate':
    post:
      tags:
        - BQ - AnalysisFeedback
      summary: InBQ Initiate campaign execution analysis
      description: InBQ Initiate campaign execution analysis
      operationId: InitiateAnalysisFeedback
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/AnalysisFeedback'
      responses:
        '200':
          $ref: '#/components/responses/AnalysisFeedback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/AnalysisFeedback/{analysisfeedbackid}/Update':
    put:
      tags:
        - BQ - AnalysisFeedback
      summary: UpBQ Update details of campaign execution activity/performance analysis
      description: UpBQ Update details of campaign execution activity/performance analysis
      operationId: UpdateAnalysisFeedback
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/analysisfeedbackid'
      requestBody:
        $ref: '#/components/requestBodies/AnalysisFeedback'
      responses:
        '200':
          $ref: '#/components/responses/AnalysisFeedback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/AnalysisFeedback/{analysisfeedbackid}/Request':
    put:
      tags:
        - BQ - AnalysisFeedback
      summary: ReBQ Request manual intervention in campaign analysis
      description: ReBQ Request manual intervention in campaign analysis
      operationId: RequestAnalysisFeedback
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/analysisfeedbackid'
      requestBody:
        $ref: '#/components/requestBodies/AnalysisFeedback'
      responses:
        '200':
          $ref: '#/components/responses/AnalysisFeedback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerCampaignExecution/{customercampaignexecutionid}/AnalysisFeedback/{analysisfeedbackid}/Retrieve':
    get:
      tags:
        - BQ - AnalysisFeedback
      summary: ReBQ Retrieve details about customer campaign analysis activity
      description: ReBQ Retrieve details about customer campaign analysis activity
      operationId: RetrieveAnalysisFeedback
      parameters:
        - $ref: '#/components/parameters/customercampaignexecutionid'
        - $ref: '#/components/parameters/analysisfeedbackid'
      responses:
        '200':
          $ref: '#/components/responses/AnalysisFeedback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "A description of leads and opportunities generated by the customer campaign ||\r\n|"
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its actions in pursuit of long-term goals. (Business Dictionary)\n\r\n* `Regulation` - A rule used to carry out a law (FIBO)\n\nBusiness Dictionary: a rule (with or without the coercive power of law) employed in controlling, directing, or managing an activity, organization, or system. \n\nThe set of rules and legislation governing certain actions. \nhttps://financial-dictionary.thefreedictionary.com/Regulatory\r\n* `Law` - A binding rule that the courts will enforce.\nA system of rules and guidelines which are enforced through social institutions to govern behavior. (FIBO)\n\r\n* `Guideline` - A recommended practice (adapted from Business Dictionary)\nA general rule, principle, or piece of advice.\r\n* `Criterion` - A principle or standard by which something may be judged or decided.\n\nRead more: http://www.businessdictionary.com/definition/criterion.html\r\n* `Standard` - A rule considered by an authority or by general consent as a basis of comparison\r\n"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: ''
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: 'Key dates associated with the campaign process (e.g. initiation date, version revision date, completion date) ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()'
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the business unit responsible for the campaign execution ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: Details the selection criteria used to identify candidate customers
    customerproductandservicedirectoryentry:
      type: object
      properties:
        CustomerProductAndServiceDirectoryEntryIdentification:
          $ref: '#/components/schemas/identifier'
      description: ' Reference to a directory of all the products and services that a customer (in campaign) has acquired from the bank.'
    customerproductserviceprofiletypevalues:
      enum:
        - Customerproductserviceeligibilityprofile
        - Customerproductserviceusageprofile
        - Customerproductservicecoverageprofile
        - Customerproductservicesaleprofile
        - Customerproductserviceconsentprofile
      type: string
      description: ">\r\n* `Customerproductserviceeligibilityprofile` - \r\n* `Customerproductserviceusageprofile` - \r\n* `Customerproductservicecoverageprofile` - \r\n* `Customerproductservicesaleprofile` - \r\n* `Customerproductserviceconsentprofile` - \r\n"
    customerrelationship:
      type: object
      properties:
        CustomerRelationship:
          type: string
          description: 'A specific relationship between a specific Bank (= party acting as a supplier of banking services) and one or more other involved parties acting as (potential) consumers of banking services as agreed in one or more banking product or service offerings and/or agreements. '
          format: class
      description: ''
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: ''
    servicetypevalues:
      enum:
        - ITService
        - AdministrativeService
        - SystemService
        - FinancialService
        - InformationService
        - BusinessService
      type: string
      description: ">\r\n* `ITService` - \r\n* `AdministrativeService` - \r\n* `SystemService` - \r\n* `FinancialService` - \r\n* `InformationService` - \r\n* `BusinessService` - \r\n"
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This feature calculates and tracks interest earnings or charges on accounts, loans, or investments over time.\r\n* `WithdrawalFeature` - The withdraw feature typically refers to an option or functionality that allows users to retrieve or remove something from a system or platform.\r\n* `DepositFeature` - This refers to a functionality that allows users to add funds to an account or system, often by transferring money from another source.\r\n* `SweepFeature` - \r\n* `LienFeature` - \r\n* `PaymentFeature` - This refers to the functionality that facilitates or tracks the transfer of funds for a purchase or settlement of dues.\r\n* `RepaymentFeature` - This feature facilitates or manages the process of paying back borrowed funds, such as loans, credit card balances, or advances.\r\n* `LimitFeature` - This feature sets, monitors, or enforces restrictions on the maximum amount that can be accessed, spent, or transacted within a system.\r\n* `OverdraftFeature` - This functionality allows users to withdraw more money than what is available in their account balance, often up to a predefined limit.\r\n* `StatementFeature` - The statement feature refers to a functionality in banking, finance, or digital platforms that provides users with a detailed record of their transactions or activities over a specific period.\r\n* `CurrencyExchangeFeature` - This feature enables users to convert funds from one currency to another at prevailing exchange rates, often within financial or payment platforms.\r\n* `PriceFeature` - This feature involves displaying or managing the price of goods, services, or financial instruments within a platform.\r\n"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: A characteristic of service which refers 1) mainly to the function or condition of service. 2) to non-functional features like quality and security
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        ServiceIdentification:
          $ref: '#/components/schemas/identifier'
        ServiceLifecycleStatus:
          $ref: '#/components/schemas/status'
        ServiceFeature:
          $ref: '#/components/schemas/feature'
      description: ''
    customerproductandserviceprofile:
      type: object
      properties:
        ProfileType:
          $ref: '#/components/schemas/customerproductserviceprofiletypevalues'
        CustomerReference:
          $ref: '#/components/schemas/customerrelationship'
        ProductReference:
          $ref: '#/components/schemas/bankingproduct'
        ServiceReference:
          $ref: '#/components/schemas/service'
      description: Reference to a list of products and services for which a customer (in Campaign) is eligible.
    partyrelationshiplifecyclephase:
      type: object
      properties:
        Description:
          $ref: '#/components/schemas/text'
        IsCurrentPhase:
          $ref: '#/components/schemas/text'
        PhaseName:
          $ref: '#/components/schemas/name'
        PhaseStatus:
          $ref: '#/components/schemas/status'
        PhasePeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: Reference to the lifecycle status of customer relationship (in Campaign)
    CandidateSelection:
      type: object
      properties:
        CustomerCampaignSelectionCriteria:
          $ref: '#/components/schemas/ruleset'
        CustomerCampaignCandidateEmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerCampaignCandidateReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerProductandServiceDirectoryEntryReference:
          $ref: '#/components/schemas/customerproductandservicedirectoryentry'
        CustomerProductandServiceEligibilityProfileReference:
          $ref: '#/components/schemas/customerproductandserviceprofile'
        CustomerRelationshipLifecyclePhaseReference:
          $ref: '#/components/schemas/partyrelationshiplifecyclephase'
      description: 'The main workteps to be followed in th execution of the Customer Campaign Procedure, like: The initial selection and confirmation of active customers that are to be included in the campaign'
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: 'File of consolidated notes, forms and documents for the work task'
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: Reference to associated documents
    Execution:
      type: object
      properties:
        CustomerCampaignProcedureWorkTaskType:
          $ref: '#/components/schemas/text'
        CustomerCampaignProcedureWorkTaskDescription:
          $ref: '#/components/schemas/text'
        CustomerCampaignProcedureWorkTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        CustomerCampaignProcedureWorkTaskResult:
          $ref: '#/components/schemas/text'
        CustomerCampaignProcedureWorkTaskDateandTime:
          $ref: '#/components/schemas/datetime'
      description: 'The main workteps to be followed in th execution of the Customer Campaign Procedure, like: The initial selection and confirmation of active customers that are to be included in the campaign'
    analysistypevalues:
      enum:
        - PerformanceAnalysis
        - ActivityAnalysis
        - RevenueAnalysis
        - CostAnalysis
        - PredictiveAnalysis
        - BehavioralAnalysis
        - ProfitabilityAnalysis
        - CompetitiveAnalysis
        - CohortAnalysis
        - SegmentAnalysis
        - SWOTAnalysis
        - Benchmarking
        - PositioningAnalysis
        - ScenarioAnalysis
        - IntelligenceGathering
        - Profiling
      type: string
      description: ">\r\n* `PerformanceAnalysis` - \r\n* `ActivityAnalysis` - \r\n* `RevenueAnalysis` - \r\n* `CostAnalysis` - \r\n* `PredictiveAnalysis` - \r\n* `BehavioralAnalysis` - \r\n* `ProfitabilityAnalysis` - \r\n* `CompetitiveAnalysis` - \r\n* `CohortAnalysis` - \r\n* `SegmentAnalysis` - \r\n* `SWOTAnalysis` - \r\n* `Benchmarking` - \r\n* `PositioningAnalysis` - \r\n* `ScenarioAnalysis` - \r\n* `IntelligenceGathering` - \r\n* `Profiling` - \r\n"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "The campaign processing schedule, covering candidate selection, execution, flow-up and analysis activities. Note this can be an ongoing campaign where worksteps continue in parallel ||\r\n|"
    analysis:
      type: object
      properties:
        AnalysisType:
          $ref: '#/components/schemas/analysistypevalues'
        AnalysisResult:
          $ref: '#/components/schemas/text'
        AnalysisPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AnalysisDateTime:
          $ref: '#/components/schemas/datetime'
        AnalysisSpecification:
          $ref: '#/components/schemas/text'
        AnalysisSchedule:
          $ref: '#/components/schemas/schedule'
      description: The result of the analysis of the performance of the campaign for the current cycle
    AnalysisFeedback:
      type: object
      properties:
        CustomerCampaignProcedureAnalysisResult:
          $ref: '#/components/schemas/analysis'
        CustomerCampaignProcedureAnalysisFeedbackResult:
          $ref: '#/components/schemas/text'
      description: 'The main workteps to be followed in th execution of the Customer Campaign Procedure, like: The initial selection and confirmation of active customers that are to be included in the campaign'
    customercampaigntypevalues:
      enum:
        - ProductLaunchCampaign
        - BrandAwarenessCampaign
        - CustomerRetentionCampaign
        - ReferralCampaign
        - ReactivationCampaign
        - Cross-SellingAndUpsellingCampaign
      type: string
      description: "The type or category of customer campaign (e.g. cross-sell, up-sell, retention) ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: Details of the deployment set-up/configuration of the campaign for reference Obligation|Obligation (https://www.iso20022.org/standardsrepository/type/Obligation)|Standard|ISO20022 BM ()
    iteminventory:
      type: object
      properties:
        ItemInventoryType:
          $ref: '#/components/schemas/text'
      description: "Inventory record of any consumables that are to be used in the execution of the campaign (e.g. brochures) ||\r\n|"
    iteminventorytypevalues:
      enum:
        - Non-CashInventory
        - CashInventory
      type: string
      description: "The tracked inventory of the consumable item ||\r\n|"
    saleslead:
      type: object
      properties:
        LeadOrigin:
          $ref: '#/components/schemas/text'
        LeadDescription:
          $ref: '#/components/schemas/text'
      description: "Reference to the lead/opportunity as handled by the Lead/Opportunity Management Service Domain ||\r\n|"
    customerportfolio:
      type: object
      properties:
        CustomerPortfolio:
          type: string
          description: "A customer portfolio refers to the collection or set of customers that a business serves or interacts with.\n\nA customer portfolio is the collection of customers that a business manages.\n\nA customer portfolio is a segmented list of the various groups of customer. "
          format: class
      description: "Reference to the collection or set of customers in a Campaign ||\r\n|"
    CustomerCampaignProcedure:
      type: object
      properties:
        CustomerCampaignType:
          $ref: '#/components/schemas/customercampaigntypevalues'
        CustomerCampaignDescription:
          $ref: '#/components/schemas/text'
        EmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerCampaignProcedureSet-up:
          $ref: '#/components/schemas/arrangement'
        CustomerCampaignProcedureVersionNumber:
          $ref: '#/components/schemas/text'
        CustomerCampaignSchedule:
          $ref: '#/components/schemas/schedule'
        CustomerCampaignConsumablesInventory:
          $ref: '#/components/schemas/iteminventory'
        CustomerCampaignConsumableType:
          $ref: '#/components/schemas/text'
        CustomerCampaignConsumableHolding:
          $ref: '#/components/schemas/iteminventorytypevalues'
        CustomerCampaignDate:
          $ref: '#/components/schemas/datetime'
        CustomerCampaignProcedureResult:
          $ref: '#/components/schemas/text'
        LeadandOpportunityDescription:
          $ref: '#/components/schemas/text'
        LeadandOpportunityReference:
          $ref: '#/components/schemas/saleslead'
        CustomerPortfolioReference:
          $ref: '#/components/schemas/customerportfolio'
      description: 'Complete work tasks following a defined procedure in support of general office activities and product and service delivery within Customer Campaign Execution. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerCampaignProcedure:
      description: CustomerCampaignProcedure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerCampaignProcedure'
    CandidateSelection:
      description: CandidateSelection
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateSelection'
    Execution:
      description: Execution
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Execution'
    AnalysisFeedback:
      description: AnalysisFeedback
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnalysisFeedback'
  parameters:
    customercampaignexecutionid:
      name: customercampaignexecutionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    candidateselectionid:
      name: candidateselectionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    executionid:
      name: executionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    analysisfeedbackid:
      name: analysisfeedbackid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerCampaignProcedure:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerCampaignProcedure'
      required: true
    CandidateSelection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateSelection'
      required: true
    Execution:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Execution'
      required: true
    AnalysisFeedback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnalysisFeedback'
      required: true