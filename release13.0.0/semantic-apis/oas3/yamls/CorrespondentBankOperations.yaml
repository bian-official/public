openapi: 3.0.1
info:
  title: Correspondent Bank Operations
  description: 'This service domain fulfils correspondent banking arrangements between the bank and its correspondent banking partners.  This includes handling the clearing and settlement of payments to/from the correspondent banks, typically using the SWIFT payment network.'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CorrespondentBankOperations/13.0.0
paths:
  /CorrespondentBankOperations/Initiate:
    post:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Initiate a correspondent fulfillment arrangement
      description: Initiate a correspondent fulfillment arrangement
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CorrespondentBankOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Update':
    put:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Update correspondent fulfillment arrangement
      description: Update correspondent fulfillment arrangement
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      requestBody:
        $ref: '#/components/requestBodies/CorrespondentBankOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Control':
    put:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Control the handling of an arrangement
      description: Control the handling of an arrangement
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      requestBody:
        $ref: '#/components/requestBodies/CorrespondentBankOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Retrieve':
    get:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Retrieve a correspondent fulfillment arrangement
      description: Retrieve a correspondent fulfillment arrangement
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Exchange':
    put:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Exchange Correspondent Bank Operating Session
      description: Exchange Correspondent Bank Operating Session
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      requestBody:
        $ref: '#/components/requestBodies/CorrespondentBankOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Execute':
    put:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Execute Correspondent Bank Operating Session
      description: Execute Correspondent Bank Operating Session
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      requestBody:
        $ref: '#/components/requestBodies/CorrespondentBankOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Notify':
    get:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Notify Correspondent Bank Operating Session
      description: Notify Correspondent Bank Operating Session
      operationId: Notify
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Request':
    put:
      tags:
        - CR - CorrespondentBankOperatingSession
      summary: Request Correspondent Bank Operating Session
      description: Request Correspondent Bank Operating Session
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      requestBody:
        $ref: '#/components/requestBodies/CorrespondentBankOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondentBankOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/InboundPayments/{inboundpaymentsid}/Update':
    put:
      tags:
        - BQ - InboundPayments
      summary: Update inbound payment transactions
      description: Update inbound payment transactions
      operationId: UpdateInboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/inboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/InboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/InboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/InboundPayments/{inboundpaymentsid}/Execute':
    put:
      tags:
        - BQ - InboundPayments
      summary: Execute inbound payment transactions from a correspondent
      description: Execute inbound payment transactions from a correspondent
      operationId: ExecuteInboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/inboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/InboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/InboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/InboundPayments/{inboundpaymentsid}/Retrieve':
    get:
      tags:
        - BQ - InboundPayments
      summary: Retrieve inbound payments
      description: Retrieve inbound payments
      operationId: RetrieveInboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/inboundpaymentsid'
      responses:
        '200':
          $ref: '#/components/responses/InboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/OutboundPayments/{outboundpaymentsid}/Update':
    put:
      tags:
        - BQ - OutboundPayments
      summary: Update outbound payment transactions
      description: Update outbound payment transactions
      operationId: UpdateOutboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/outboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/OutboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/OutboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/OutboundPayments/{outboundpaymentsid}/Execute':
    put:
      tags:
        - BQ - OutboundPayments
      summary: Execute outbound payment transactions to a correspondent
      description: Execute outbound payment transactions to a correspondent
      operationId: ExecuteOutboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/outboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/OutboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/OutboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/OutboundPayments/{outboundpaymentsid}/Retrieve':
    get:
      tags:
        - BQ - OutboundPayments
      summary: Retrieve outbound payments
      description: Retrieve outbound payments
      operationId: RetrieveOutboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/outboundpaymentsid'
      responses:
        '200':
          $ref: '#/components/responses/OutboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/ClearingandSettlement/{clearingandsettlementid}/Update':
    put:
      tags:
        - BQ - ClearingandSettlement
      summary: Update a clearing and settlement transaction
      description: Update a clearing and settlement transaction
      operationId: UpdateClearingandSettlement
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/clearingandsettlementid'
      requestBody:
        $ref: '#/components/requestBodies/ClearingandSettlement'
      responses:
        '200':
          $ref: '#/components/responses/ClearingandSettlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/ClearingandSettlement/{clearingandsettlementid}/Exchange':
    put:
      tags:
        - BQ - ClearingandSettlement
      summary: Exchange a clearing and settlement task
      description: Exchange a clearing and settlement task
      operationId: ExchangeClearingandSettlement
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/clearingandsettlementid'
      requestBody:
        $ref: '#/components/requestBodies/ClearingandSettlement'
      responses:
        '200':
          $ref: '#/components/responses/ClearingandSettlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/ClearingandSettlement/{clearingandsettlementid}/Request':
    put:
      tags:
        - BQ - ClearingandSettlement
      summary: Request clearing and settlement processing for a correspondent
      description: Request clearing and settlement processing for a correspondent
      operationId: RequestClearingandSettlement
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/clearingandsettlementid'
      requestBody:
        $ref: '#/components/requestBodies/ClearingandSettlement'
      responses:
        '200':
          $ref: '#/components/responses/ClearingandSettlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/ClearingandSettlement/{clearingandsettlementid}/Retrieve':
    get:
      tags:
        - BQ - ClearingandSettlement
      summary: Retrieve clearing and settlement activity with a correspondent
      description: Retrieve clearing and settlement activity with a correspondent
      operationId: RetrieveClearingandSettlement
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/clearingandsettlementid'
      responses:
        '200':
          $ref: '#/components/responses/ClearingandSettlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Reconciliation/{reconciliationid}/Update':
    put:
      tags:
        - BQ - Reconciliation
      summary: Update a reconciliation task
      description: Update a reconciliation task
      operationId: UpdateReconciliation
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/reconciliationid'
      requestBody:
        $ref: '#/components/requestBodies/Reconciliation'
      responses:
        '200':
          $ref: '#/components/responses/Reconciliation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Reconciliation/{reconciliationid}/Exchange':
    put:
      tags:
        - BQ - Reconciliation
      summary: Exchange  a reconciliation task
      description: Exchange  a reconciliation task
      operationId: ExchangeReconciliation
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/reconciliationid'
      requestBody:
        $ref: '#/components/requestBodies/Reconciliation'
      responses:
        '200':
          $ref: '#/components/responses/Reconciliation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Reconciliation/{reconciliationid}/Request':
    put:
      tags:
        - BQ - Reconciliation
      summary: Request reconciliation processing for a correspondent
      description: Request reconciliation processing for a correspondent
      operationId: RequestReconciliation
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/reconciliationid'
      requestBody:
        $ref: '#/components/requestBodies/Reconciliation'
      responses:
        '200':
          $ref: '#/components/responses/Reconciliation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Reconciliation/{reconciliationid}/Retrieve':
    get:
      tags:
        - BQ - Reconciliation
      summary: Retrieve reconciliation activity with a correspondent
      description: Retrieve reconciliation activity with a correspondent
      operationId: RetrieveReconciliation
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/reconciliationid'
      responses:
        '200':
          $ref: '#/components/responses/Reconciliation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/InboundPayments/{inboundpaymentsid}/Exchange':
    put:
      tags:
        - BQ - InboundPayments
      summary: Exchange Inbound Payments
      description: Exchange Inbound Payments
      operationId: ExchangeInboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/inboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/InboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/InboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/OutboundPayments/{outboundpaymentsid}/Exchange':
    put:
      tags:
        - BQ - OutboundPayments
      summary: Exchange Outbound Payments
      description: Exchange Outbound Payments
      operationId: ExchangeOutboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/outboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/OutboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/OutboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Reconciliation/{reconciliationid}/Execute':
    put:
      tags:
        - BQ - Reconciliation
      summary: Execute Reconciliation
      description: Execute Reconciliation
      operationId: ExecuteReconciliation
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/reconciliationid'
      requestBody:
        $ref: '#/components/requestBodies/Reconciliation'
      responses:
        '200':
          $ref: '#/components/responses/Reconciliation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/InboundPayments/Initiate':
    post:
      tags:
        - BQ - InboundPayments
      summary: Initiate Inbound Payments
      description: Initiate Inbound Payments
      operationId: InitiateInboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      requestBody:
        $ref: '#/components/requestBodies/InboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/InboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/OutboundPayments/Initiate':
    post:
      tags:
        - BQ - OutboundPayments
      summary: Initiate Outbound Payments
      description: Initiate Outbound Payments
      operationId: InitiateOutboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
      requestBody:
        $ref: '#/components/requestBodies/OutboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/OutboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/InboundPayments/{inboundpaymentsid}/Notify':
    get:
      tags:
        - BQ - InboundPayments
      summary: Notify Inbound Payments
      description: Notify Inbound Payments
      operationId: NotifyInboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/inboundpaymentsid'
      responses:
        '200':
          $ref: '#/components/responses/InboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/OutboundPayments/{outboundpaymentsid}/Notify':
    get:
      tags:
        - BQ - OutboundPayments
      summary: Notify Outbound Payments
      description: Notify Outbound Payments
      operationId: NotifyOutboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/outboundpaymentsid'
      responses:
        '200':
          $ref: '#/components/responses/OutboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/Reconciliation/{reconciliationid}/Notify':
    get:
      tags:
        - BQ - Reconciliation
      summary: Notify Reconciliation
      description: Notify Reconciliation
      operationId: NotifyReconciliation
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/reconciliationid'
      responses:
        '200':
          $ref: '#/components/responses/Reconciliation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/InboundPayments/{inboundpaymentsid}/Request':
    put:
      tags:
        - BQ - InboundPayments
      summary: Request Inbound Payments
      description: Request Inbound Payments
      operationId: RequestInboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/inboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/InboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/InboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CorrespondentBankOperations/{correspondentbankoperationsid}/OutboundPayments/{outboundpaymentsid}/Request':
    put:
      tags:
        - BQ - OutboundPayments
      summary: Request Outbound Payments
      description: Request Outbound Payments
      operationId: RequestOutboundPayments
      parameters:
        - $ref: '#/components/parameters/correspondentbankoperationsid'
        - $ref: '#/components/parameters/outboundpaymentsid'
      requestBody:
        $ref: '#/components/requestBodies/OutboundPayments'
      responses:
        '200':
          $ref: '#/components/responses/OutboundPayments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    clearingarrangement:
      type: object
      properties:
        ClearingArrangement:
          type: string
          description: "An Arrangements (right and obligation) defined for doing the clearing of a transaction or a batch of transactions.\n"
          format: class
      description: 'The clearing arrangement between the bank and clearing house - includes schedule, limits'
    clearinginstruction:
      type: object
      properties:
        ClearingInstruction:
          type: string
          description: A request to do the clearing of transaction ( to fulfill a clearing arrangement)
          format: class
      description: Customer specific default clearing instructions
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The particular date and time point in the progression of time
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Entity that assigns and manages the identification.
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: 'Identifier of the settlement instruction. '
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: Amount of money moved between the instructing agent and the instructed agent. (ISO20022)
    clearingsystemidentificationtypevalues:
      enum:
        - Austrianbankleitzahl
        - Australianbankstatebranchcodebsb
        - Canadianpaymentsassociationpaymentroutingnumber
        - Swissfinancialinstitutionidentificationshort
        - Swissfinancialinstitutionidentificationlong
        - Cnapsidentifier
        - Germanbankleitzahl
        - Spanishdomesticinterbankingcode
        - Ukdomesticsortcode
        - Helenicbankidentificationcode
        - Hongkongbankcode
        - Irishnationalclearingcode
        - Indianfinancialsystemcode
        - Italiandomesticidentificationcode
        - Japanzenginclearingcode
        - Newzealandnationalclearingcode
        - Polishnationalclearingcode
        - Portuguesenationalclearingcode
        - Russiancentralbankidentificationcode
        - Swedenbankgiroclearingcode
        - Ibgsortcode
        - Thaicentralbankidentificationcode
        - Financialinstitutioncode
        - Unitedstatesroutingnumberfedwirenacha
        - Chipsparticipantidentifier
        - Southafricannationalclearingcode
      type: string
      description: ">\r\n* `Austrianbankleitzahl` - Bank Branch code used in Austria\r\n* `Australianbankstatebranchcodebsb` - Bank Branch code used in Australia\r\n* `Canadianpaymentsassociationpaymentroutingnumber` - Bank Branch code used in Canada\r\n* `Swissfinancialinstitutionidentificationshort` - Financial Institution Identification (IID) used in Switzerland, without check digit\r\n* `Swissfinancialinstitutionidentificationlong` - Financial Institution Identification (IID) used in Switzerland, including check digit\r\n* `Cnapsidentifier` - Bank Branch code used in China\r\n* `Germanbankleitzahl` - Bank Branch code used in Germany\r\n* `Spanishdomesticinterbankingcode` - Bank Branch code used in Spain\r\n* `Ukdomesticsortcode` - Bank Branch code used in the UK\r\n* `Helenicbankidentificationcode` - Bank Branch code used in Greece\r\n* `Hongkongbankcode` - Bank Branch code used in Hong Kong\r\n* `Irishnationalclearingcode` - Bank Branch code used in Ireland\r\n* `Indianfinancialsystemcode` - Bank Branch code used in India\r\n* `Italiandomesticidentificationcode` - Bank Branch code used in Italy\r\n* `Japanzenginclearingcode` - Bank Branch code used in Japan\r\n* `Newzealandnationalclearingcode` - Bank Branch code used in New Zealand\r\n* `Polishnationalclearingcode` - Bank Branch code used in Poland\r\n* `Portuguesenationalclearingcode` - Bank Branch code used in Portugal\r\n* `Russiancentralbankidentificationcode` - Bank Branch code used in Russia\r\n* `Swedenbankgiroclearingcode` - Bank Branch code used in Sweden\r\n* `Ibgsortcode` - Bank Branch code used in Singapore\r\n* `Thaicentralbankidentificationcode` - Bank Identification code used in Thailand\r\n* `Financialinstitutioncode` - Bank Branch code used in Taiwan\r\n* `Unitedstatesroutingnumberfedwirenacha` - Routing Transit number assigned by the ABA for US financial institutons\r\n* `Chipsparticipantidentifier` - Bank identifier used by CHIPs in the US\r\n* `Southafricannationalclearingcode` - Bank Branch code used in South Africa\r\n"
    settlementmethodtypevalues:
      enum:
        - Instructedagent
        - Instructingagent
        - Covermethod
        - Clearingsystem
      type: string
      description: ">\r\n* `Instructedagent` - Settlement is done by the agent instructed to execute a payment instruction.\r\n* `Instructingagent` - Settlement is done by the agent instructing and forwarding the payment to the next party in the payment chain.\r\n* `Covermethod` - Settlement is done through a cover payment.\r\n* `Clearingsystem` - Settlement is done through a payment clearing system.\r\n"
    settlementinstruction:
      type: object
      properties:
        SettlementInstructionIdentifier:
          $ref: '#/components/schemas/identifier'
        InterbankSettlementAmount:
          $ref: '#/components/schemas/amount'
        InterbankSettlementCurrency:
          $ref: '#/components/schemas/currencycode'
        CreditDateTime:
          $ref: '#/components/schemas/datetime'
        DebitDateTime:
          $ref: '#/components/schemas/datetime'
        ClearingSystemIdentification:
          $ref: '#/components/schemas/clearingsystemidentificationtypevalues'
        SettlementTimeRequest:
          $ref: '#/components/schemas/text'
        SettlementPriority:
          $ref: '#/components/schemas/text'
        SettlementMethod:
          $ref: '#/components/schemas/settlementmethodtypevalues'
        InterbankSettlementDate:
          $ref: '#/components/schemas/datetime'
      description: Customer specific default settlement instructions (e.g. to handle netting arrangements)
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ' Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()'
    accountstatustypevalues:
      enum:
        - Enabled
        - Disabled
        - Deleted
        - Proforma
        - Pending
      type: string
      description: ">\r\n* `Enabled` - Account can be used for its intended purpose.\r\n* `Disabled` - Account cannot be used for its intended purpose, either temporarily or permanently.\r\n* `Deleted` - Account cannot be used any longer.\r\n* `Proforma` - Account is temporary and can be partially used for its intended purpose. The account will be fully available for use when the account servicer has received all relevant documents.\r\n* `Pending` - Account change is pending approval.\r\n"
    accountstatus:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/status'
        AccountStatusType:
          $ref: '#/components/schemas/accountstatustypevalues'
      description: "A characteristic of account which refers to the LifecycleStatus of account like opened, closed, blocked, etc.\n\nSpecifies the current state of an account. (ISO20022)"
    accountidentificationtypevalues:
      enum:
        - BBAN
        - IBAN
        - UPIC
        - AccountNumber
        - PAN
        - Paym
        - Wallet
        - SortCodeAndAccountNumber
      type: string
      description: ">\r\n* `BBAN` - Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniquely identify the account of a customer. (ISO20022)\n\n.\r\n* `IBAN` - International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 \"Banking and related financial services - International Bank Account Number (IBAN)\" version 1997-10-01, or later revisions. (ISO20022)\n\nAn identifier used internationally by financial institutions to uniquely identify the account of a customer at a financial institution, as described in the latest edition of the international standard ISO 13616. \"Banking and related financial services - International Bank Account Number (IBAN)\". (OBExternalAccountIdentification4Code)\r\n* `UPIC` - Universal Payment Identification Code (UPIC) - identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes. (ISO20022)\r\n* `AccountNumber` - String of characters (mainly numbers) used to identify an account.(ISO20022)\n\r\n* `PAN` - Primary Account Number - identifier scheme used to identify a card account. (OBExternalAccountIdentification4Code)\r\n* `Paym` - Paym Scheme to make payments via mobile (OBExternalAccountIdentification4Code)\r\n* `Wallet` - A primary and unique account identifier used to identify a wallet.\nAn ASPSP must document on their developer portal, the payment methods that supports this account identifier.(OBExternalAccountIdentification4Code)\r\n* `SortCodeAndAccountNumber` - Sort Code and Account Number - identifier scheme used in the UK by financial institutions to identify the account of a customer. The identifier is the concatenation of the 6 digit UK sort code and 8 digit account number. (UK Open Banking)\r\n"
    accountidentification:
      type: object
      properties:
        AccountIdentificationType:
          $ref: '#/components/schemas/accountidentificationtypevalues'
        AccountIdentification:
          $ref: '#/components/schemas/identifier'
      description: The identifier of account like Account Number.
    accountdatetimetypevalues:
      enum:
        - OpeningDate
        - ClosingDate
        - BlockingDate
        - MaturityDate
        - LiveDate
        - RenewalDate
      type: string
      description: ">\r\n* `OpeningDate` - Date on which the account and related basic services are effectively operational for the account owner. (ISO20022)\r\n* `ClosingDate` - Date on which the account and related services cease effectively to be operational for the account owner. (ISO20022)\r\n* `BlockingDate` - \r\n* `MaturityDate` - Maturity date for the account.\r\n* `LiveDate` - \r\n* `RenewalDate` - \r\n"
    accountdatetime:
      type: object
      properties:
        AccountDateType:
          $ref: '#/components/schemas/accountdatetimetypevalues'
        AccountDate:
          $ref: '#/components/schemas/datetime'
      description: 'A characteristic of account which refers to LifecycleDate of account (e.g., ClosingDate, OpeningDate, LiveDate, etc.) '
    accounttypevalues:
      enum:
        - DebitAccount
        - CreditAccount
        - VostroAcount
        - NostroAccount
        - PaymentAccount
        - SettlementAccount
        - SavingAccount
        - CurrentAccount
        - CashAccount
        - LoanAccount
        - IndividualAccount
        - JointAccount
        - LiquidationAccount
        - ProvisionAccount
        - PartnershipAccount
        - InvestmentAccount
      type: string
      description: ">\r\n* `DebitAccount` - \r\n* `CreditAccount` - \r\n* `VostroAcount` - In correspondent banking, an account held by one bank on behalf of another bank (the customer bank); the customer bank regards this account as its nostro account. (ECB)\r\n* `NostroAccount` - In correspondent banking, an account held by a customer bank on the books of another bank acting as a service provider. The other bank regards this account as a loro account. (ECB)\r\n* `PaymentAccount` - \r\n* `SettlementAccount` - A specific purpose account used to post debit and credit entries as a result of the transaction. (ISO20022)\n\nAccount which is used for settlement. (ISO20022)\r\n* `SavingAccount` - \r\n* `CurrentAccount` - \r\n* `CashAccount` - \r\n* `LoanAccount` - \r\n* `IndividualAccount` - \r\n* `JointAccount` - \r\n* `LiquidationAccount` - \r\n* `ProvisionAccount` - \r\n* `PartnershipAccount` - \r\n* `InvestmentAccount` - \r\n"
    balancetypevalues:
      enum:
        - OpeningBalance
        - ClosingBalance
        - CurrentBalance
        - AvailableBalance
        - LedgerBalance
        - ReserveBalance
        - FreeBalance
        - PrincipalBalance
        - ClosingAvailable
        - ClosingBooked
        - ForwardAvailable
        - Information
        - InterimAvailable
        - InterimBooked
        - OpeningAvailable
        - OpeningBooked
        - PreviouslyClosedBooked
        - Expected
      type: string
      description: ">\r\n* `OpeningBalance` - Book balance of the account at the beginning of the account servicer's business day. It always equals the closing book balance from the previous business day. Note: the available balance at the beginning of the account servicer's business day may be different from the closing book balance from the previous business day. (ISO20022)\r\n* `ClosingBalance` - Balance of the account at the end of the account servicer's business day. It is the sum of the opening balance at the beginning of the day and all entries booked to the account during the account servicer's business day. (ISO20022)\r\n* `CurrentBalance` - Balance of the account at a precise moment in time. (ISO20022)\r\n* `AvailableBalance` - Balance of money or securities that is at the disposal of the account owner on the date specified. (ISO20022)\r\n* `LedgerBalance` - Ledger balance refers to posted transactions (e.g. limit authorisation amount - posted transactions). (ISO20022)\r\n* `ReserveBalance` - \r\n* `FreeBalance` - \r\n* `PrincipalBalance` - \r\n* `ClosingAvailable` - Closing balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `ClosingBooked` - Balance of the account at the end of the pre-agreed account reporting period. It is the sum of the opening booked balance at the beginning of the period and all entries booked to the account during the pre-agreed account reporting period.\r\n* `ForwardAvailable` - Forward available balance of money that is at the disposal of the account owner on the date specified.\r\n* `Information` - Balance for informational purposes.\r\n* `InterimAvailable` - Available balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `InterimBooked` - Balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `OpeningAvailable` - Opening balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `OpeningBooked` - Book balance of the account at the beginning of the account reporting period. It always equals the closing book balance from the previous report.\r\n* `PreviouslyClosedBooked` - Balance of the account at the previously closed account reporting period. The opening booked balance for the new period has to be equal to this balance.\nUsage: the previously booked closing balance should equal (inclusive date) the booked closing balance of the date it references and equal the actual booked opening balance of the current date.\r\n* `Expected` - Balance, composed of booked entries and pending items known at the time of calculation, which projects the end of day balance if everything is booked on the account and no other entry is posted.\r\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    balancecounterpartytypevalues:
      enum:
        - Bilateral
        - Multilateral
      type: string
      description: ">\r\n* `Bilateral` - Balance calculated regarding one member in the system. (ISO20022)\r\n* `Multilateral` - Balance calculated regarding all members in the system. (ISO20022)\r\n"
    balancesubtypevalues:
      enum:
        - Adjustment
        - Basecurrency
        - Blocked
        - Blockedfunds
        - Daylightoverdraft
        - Eligibleassets
        - Firmcollateralization
        - Amountsthathavebeenusedtoserveasfirmcollateral
        - Securitiesforecast
        - Netfunding
        - Intermediate
        - Localcurrency
        - Limitrelated
        - Reservedliquidity
        - Securitiespending
        - Payinpayout
        - Progressiveaverage
        - Reserve
        - Selfcollateralization
        - Amountsthathavebeenusedtoserveasselfcollateral
        - Threshold
      type: string
      description: ">\r\n* `Adjustment` - Balance to be held in the settlement account in order to comply with the average reserve due, in the event that the bank's balance is equal to the reserve due during the remaining days of the maintenance period.\r\n* `Basecurrency` - Balance representing the amount in the domestic or base accounting currency.\r\n* `Blocked` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes. In some countries, a blocked balance is known as a 'reserve' balance.\r\n* `Blockedfunds` - Balance representing funds that cannot be touched by the account owner.\r\n* `Daylightoverdraft` - Balance representing the intra day overdraft granted by the Central Bank to financial institutions participating in a RTGS system. This balance may vary over time and shall be offset at the end of the day.\r\n* `Eligibleassets` - Balance representing the potential loan a Central Bank would make in cash if the collateral is pledged, eg, securities available and eligible as collateral with the Central Bank.\r\n* `Firmcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral.\r\n* `Amountsthathavebeenusedtoserveasfirmcollateral` - Balance representing the cash equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral and have been used as collateral.\r\n* `Securitiesforecast` - Balance representing the total of all balance types representing the forecast of transactions to settle, blocked items, custody transactions and corporate actions cash disbursements.\r\n* `Netfunding` - Balance representing the net amount to be funded resulting from the difference between the total of all transactions with a cash impact and the existing cash coverage.\r\n* `Intermediate` - Balance representing an intermediate amount such as the opening or closing balance incrementally carried forward from one page to the next in a multi-page statement or report.\r\n* `Localcurrency` - Balance representing the amount in the local market currency for which the asset is held.\r\n* `Limitrelated` - Balance of a specific limit value, eg, a bilateral balance is calculated in relation to a given bilateral limit.\r\n* `Reservedliquidity` - Balance representing the amount that a financial institution has set aside for a specific reason and which is therefore not available. In the context of CSDs, reservation of liquidity made to meet settlement obligations.\r\n* `Securitiespending` - Balance of securities pending delivery, such as orders to sell securities have been executed but settlement of the open transactions has not been confirmed.\r\n* `Payinpayout` - Balance representing the fictive amount of automated direct debits or payment based on standing arrangements between the CSD and the user. Usage: Pay-Ins and Pay-Outs can be different based on individual payment instructions or available funds.\r\n* `Progressiveaverage` - Average of the daily balances on the account used to fulfil the reserve requirements calculated from the beginning of the maintenance period.\r\n* `Reserve` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes.\r\n* `Selfcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of the net incoming balance of securities qualified to serve as collateral for which settlement instructions are held at.\r\n* `Amountsthathavebeenusedtoserveasselfcollateral` - Balance representing the cash-equivalent resulting from evaluation of incoming securities, qualified to serve as collateral and actually used as collateral, which have been settled during the settlement process.\r\n* `Threshold` - Balance representing the amount that will be destined for investment. Difference between available balance and threshold for investment limit.\r\n"
    accountbalance:
      type: object
      properties:
        BalanceAmount:
          $ref: '#/components/schemas/amount'
        BalanceType:
          $ref: '#/components/schemas/balancetypevalues'
        BalanceValueDate:
          $ref: '#/components/schemas/datetime'
        BalanceIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        BalanceCounterpartyType:
          $ref: '#/components/schemas/balancecounterpartytypevalues'
        BalanceCalculationDate:
          $ref: '#/components/schemas/datetime'
        BalanceSubType:
          $ref: '#/components/schemas/balancesubtypevalues'
      description: "The state of the obligations managed on the account, the result of all entries on the account.\n\nNumerical representation of the net increases and decreases in an account at a specific point in time. (ISO20022)\n\nBanking: Amount available in an account for withdrawal or use.\nRead more: http://www.businessdictionary.com/definition/balance.html\n\nBookkeeping: Difference between the debit and credit sides of an account.\nRead more: http://www.businessdictionary.com/definition/balance.html"
    currencytypevalues:
      enum:
        - BaseCurrency
        - ReportingCurrency
        - SecondaryCurrency
        - TransferCurrency
      type: string
      description: ">\r\n* `BaseCurrency` - Base currency of the account. (ISO20022)\n\r\n* `ReportingCurrency` - Currency used to calculate and report the balance and related entries of an account. (ISO20022)\n\r\n* `SecondaryCurrency` - \r\n* `TransferCurrency` - Currency of the amount to be transferred which may be different from the currency of the debtor's account. (ISO20022)\r\n"
    accountcurrency:
      type: object
      properties:
        AccountCurrencyType:
          $ref: '#/components/schemas/currencytypevalues'
        AccountCurrency:
          $ref: '#/components/schemas/currencycode'
      description: ''
    account:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/accountstatus'
        AccountIdentification:
          $ref: '#/components/schemas/accountidentification'
        AccountDate:
          $ref: '#/components/schemas/accountdatetime'
        AccountType:
          $ref: '#/components/schemas/accounttypevalues'
        AccountPurpose:
          $ref: '#/components/schemas/text'
        AccountBalance:
          $ref: '#/components/schemas/accountbalance'
        AccountCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountDescription:
          $ref: '#/components/schemas/text'
        AccountName:
          $ref: '#/components/schemas/name'
      description: Reference to associated nostro account (our money at your bank) Account|Account  (https://www.iso20022.org/standardsrepository/type/Account)|Standard|ISO20022 BM ()
    clearingtransaction:
      type: object
      properties:
        ClearingTransaction:
          type: string
          description: Transaction that is the result of fulfilling a clearing arrangement
          format: class
      description: A record of a clearing transaction
    settlementtransaction:
      type: object
      properties:
        SettlementTransaction:
          type: string
          description: Transaction that is the result of fulfilling a settlement arrangement
          format: class
      description: A record of a settlement transaction
    ClearingandSettlement:
      type: object
      properties:
        CorrespondentBankClearingArrangementReference:
          $ref: '#/components/schemas/clearingarrangement'
        CorrespondentBankClearingArrangementClearingInstructions:
          $ref: '#/components/schemas/clearinginstruction'
        CorrespondentBankClearingArrangementSettlementInstructions:
          $ref: '#/components/schemas/settlementinstruction'
        MirrorNostroAccountReference:
          $ref: '#/components/schemas/account'
        ClearingTransaction:
          $ref: '#/components/schemas/clearingtransaction'
        SettlementTransaction:
          $ref: '#/components/schemas/settlementtransaction'
      description: The product features/services available with a financical facility
    transactiondatetimetypevalues:
      enum:
        - ExecutedDate
        - FulfillmentDate
        - InitiatedDate
        - CancelledDate
        - ApprovedDate
        - ValueDate
        - BookingDate
      type: string
      description: ">\r\n* `ExecutedDate` - \r\n* `FulfillmentDate` - \r\n* `InitiatedDate` - \r\n* `CancelledDate` - \r\n* `ApprovedDate` - \r\n* `ValueDate` - \r\n* `BookingDate` - \r\n"
    transactiondatetime:
      type: object
      properties:
        TransactionDate:
          $ref: '#/components/schemas/datetime'
        TransactionDateType:
          $ref: '#/components/schemas/transactiondatetimetypevalues'
      description: "The Date that the transaction has occurred or is planned to occur.\nA characteristic of transaction which refers to the LifecycleDate of transaction (e.g., initiated date, executed date, fulfillment date). "
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: ">\r\n* `FinancialTransaction` - \r\n* `BusinessTransaction` - \r\n* `BankingTransaction` - \r\n* `AccountingTransaction` - \r\n* `BookingTransaction` - \r\n* `AllocationTransaction` - \r\n* `DeliveryTransaction` - \r\n* `ProductionTransaction` - \r\n"
    transactionstatustypevalues:
      enum:
        - Initiated
        - Executed
        - Cancelled
        - Confirmed
        - Suspended
        - Pending
        - Completed
        - Notified
        - Booked
        - Rejected
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Executed` - \r\n* `Cancelled` - \r\n* `Confirmed` - \r\n* `Suspended` - \r\n* `Pending` - \r\n* `Completed` - \r\n* `Notified` - \r\n* `Booked` - \r\n* `Rejected` - \r\n"
    transactionstatus:
      type: object
      properties:
        TransactionStatus:
          $ref: '#/components/schemas/status'
        TransactionStatusType:
          $ref: '#/components/schemas/transactionstatustypevalues'
      description: 'A characteristic of transaction which refers to the LifecycleStatus of transaction (e.g., initiated, executed, confirmed, cancelled, etc.) '
    transaction:
      type: object
      properties:
        TransactionIdentification:
          $ref: '#/components/schemas/identifier'
        TransactionDate:
          $ref: '#/components/schemas/transactiondatetime'
        TransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TransactionDescription:
          $ref: '#/components/schemas/text'
        TransactionStatus:
          $ref: '#/components/schemas/transactionstatus'
        TransactionName:
          $ref: '#/components/schemas/name'
      description: Outbound payment transaction details
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: Payer account reference or number
    instructiondatetimetypevalues:
      enum:
        - DueDate
        - ExecutionDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n* `FulfillmentDate` - \r\n"
    instructiondatetime:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/datetime'
        InstructionDateType:
          $ref: '#/components/schemas/instructiondatetimetypevalues'
      description: ''
    instructionstatustypevalues:
      enum:
        - Pendingprocessing
        - Acknowledgedaccepted
        - Rejected
        - Accepted
        - Completed
        - Notreceived
        - Cancelled
        - Beingcancelled
        - Receivedbyissuerorregistrar
        - Pending
        - Standinginstruction
        - Queued
        - Cancelledbysubcustodian
        - Forwarded
      type: string
      description: ">\r\n* `Pendingprocessing` - Processing of the instruction is pending.\r\n* `Acknowledgedaccepted` - Instruction has been acknowledged and accepted and is validated for further processing.\r\n* `Rejected` - Instruction has been rejected.\r\n* `Accepted` - Instruction has been accepted and is validated for further processing.\r\n* `Completed` - Processing has been completed.\r\n* `Notreceived` - No instruction has been received (to be used in a reminder).\r\n* `Cancelled` - Instruction has been cancelled.\r\n* `Beingcancelled` - Cancel request is being processed.\r\n* `Receivedbyissuerorregistrar` - Instruction has been received by Issuer.\r\n* `Pending` - Instruction is pending.\r\n* `Standinginstruction` - Standing instruction is applied.\r\n* `Queued` - Instruction is queued.\r\n* `Cancelledbysubcustodian` - Instruction has been cancelled by the agent, for example, due to an event deadline extension.\r\n* `Forwarded` - Accepted and sent along the chain.\r\n"
    instructionstatus:
      type: object
      properties:
        InstructionStatusType:
          $ref: '#/components/schemas/instructionstatustypevalues'
        InstructionStatus:
          $ref: '#/components/schemas/status'
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instructionidentificationtypevalues:
      enum:
        - OrderNumber
        - InstructionNumber
      type: string
      description: ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
    instructionidentification:
      type: object
      properties:
        InstructionIdentification:
          $ref: '#/components/schemas/identifier'
        InstructionIdentificationType:
          $ref: '#/components/schemas/instructionidentificationtypevalues'
      description: "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
    instructiontypevalues:
      enum:
        - PaymentInstruction
        - DeliveryOrder
        - InformationRequest
        - ExchangeInstruction
        - AllocationInstruction
        - MaintenanceInstruction
      type: string
      description: ">\r\n* `PaymentInstruction` - \r\n* `DeliveryOrder` - \r\n* `InformationRequest` - \r\n* `ExchangeInstruction` - \r\n* `AllocationInstruction` - \r\n* `MaintenanceInstruction` - \r\n"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    instruction:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/instructiondatetime'
        InstructionStatus:
          $ref: '#/components/schemas/instructionstatus'
        InstructionIdentifier:
          $ref: '#/components/schemas/instructionidentification'
        InstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        InstructionResult:
          $ref: '#/components/schemas/text'
        InstructionDescription:
          $ref: '#/components/schemas/text'
        InstructionLog:
          $ref: '#/components/schemas/log'
        InstructionPurpose:
          $ref: '#/components/schemas/text'
      description: Transaction specific clearing and settlement instructions
    correspondentbankinvolvementtypevalues:
      enum:
        - AdvisingBank
        - BeneficiaryBank
        - ReimbursingBank
        - RefinancingBank
        - OrderingBank
        - SenderBank
        - PayingBank
        - IntermediaryBank
        - SenderCorrespondent
        - ReceiverCorrespondent
      type: string
      description: ">\r\n* `AdvisingBank` - \r\n* `BeneficiaryBank` - \r\n* `ReimbursingBank` - \r\n* `RefinancingBank` - \r\n* `OrderingBank` - \r\n* `SenderBank` - \r\n* `PayingBank` - \r\n* `IntermediaryBank` - \r\n* `SenderCorrespondent` - \r\n* `ReceiverCorrespondent` - \r\n"
    OutboundPayments:
      type: object
      properties:
        CorrespondentTransactionRecord:
          $ref: '#/components/schemas/transaction'
        SWIFTTransactionReference:
          $ref: '#/components/schemas/transaction'
        PayerBankReference:
          $ref: '#/components/schemas/involvedparty'
        PayerReference:
          $ref: '#/components/schemas/involvedparty'
        CorrespondedBankReference:
          $ref: '#/components/schemas/involvedparty'
        PayerProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        PayeeReference:
          $ref: '#/components/schemas/involvedparty'
        PayeeProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        PayeeBankReference:
          $ref: '#/components/schemas/involvedparty'
        SpecialInstructions:
          $ref: '#/components/schemas/instruction'
        Amount:
          $ref: '#/components/schemas/amount'
        Currency:
          $ref: '#/components/schemas/currencycode'
        DateType:
          $ref: '#/components/schemas/transactiondatetimetypevalues'
        Date:
          $ref: '#/components/schemas/transactiondatetime'
        CorrespondentBankRoleType:
          $ref: '#/components/schemas/correspondentbankinvolvementtypevalues'
        TransactionStatus:
          type: string
          description: ''
          format: ''
      description: The product features/services available with a financical facility
    InboundPayments:
      type: object
      properties:
        CorrespondentTransactionRecord:
          $ref: '#/components/schemas/transaction'
        SWIFTTransactionReference:
          $ref: '#/components/schemas/transaction'
        PayerBankReference:
          $ref: '#/components/schemas/involvedparty'
        PayerReference:
          $ref: '#/components/schemas/involvedparty'
        CorrespondedBankReference:
          $ref: '#/components/schemas/involvedparty'
        PayerProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        PayeeReference:
          $ref: '#/components/schemas/involvedparty'
        PayeeProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        PayeeBankReference:
          $ref: '#/components/schemas/involvedparty'
        SpecialInstructions:
          $ref: '#/components/schemas/instruction'
        Amount:
          $ref: '#/components/schemas/amount'
        Currency:
          $ref: '#/components/schemas/currencycode'
        DateType:
          $ref: '#/components/schemas/transactiondatetimetypevalues'
        Date:
          $ref: '#/components/schemas/datetime'
        CorrespondentBankRoleType:
          $ref: '#/components/schemas/correspondentbankinvolvementtypevalues'
      description: The product features/services available with a financical facility
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: Reference to the correspondent reconciliation task
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: 'Work documentation, accounts and transaction details produced and referenced during the reconciliation'
    Reconciliation:
      type: object
      properties:
        CorrespondentBankReconciliationTaskReference:
          $ref: '#/components/schemas/task'
        CorrespondentBankReconciliationTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        CorrespondentBankReconciliationTaskResult:
          $ref: '#/components/schemas/text'
      description: The product features/services available with a financical facility
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    event:
      type: object
      properties:
        EventType:
          $ref: '#/components/schemas/text'
        EventDateTime:
          $ref: '#/components/schemas/datetime'
        EventDescription:
          $ref: '#/components/schemas/text'
        EventSource:
          type: string
          description: ''
          format: object
        EventLocation:
          $ref: '#/components/schemas/location'
        EventAction:
          $ref: '#/components/schemas/action'
        EventStatus:
          $ref: '#/components/schemas/status'
        EventValue:
          $ref: '#/components/schemas/value'
        EventValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        EventIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    CorrespondentBankOperationsOutcome:
      type: object
      properties:
        CorrespondentBankOperationsIncident:
          $ref: '#/components/schemas/event'
        CorrespondentBankOperationsProvision:
          $ref: '#/components/schemas/text'
      description: The product features/services available with a financical facility
    correspondentbankingarrangement:
      type: object
      properties:
        CorrespondentBankingArrangement:
          type: string
          description: ''
          format: class
      description: "The correspondent bank arrangement (details agreed limits, fees, preferred payments mechanism, etc.) ||\r\n|"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "Details of the schedule for processing payments, clearing and settlement and reconciliations ||\r\n|"
    calendartypevalues:
      enum:
        - UKCalendar
        - ChineseCalendar
      type: string
      description: ">\r\n* `UKCalendar` - \r\n* `ChineseCalendar` - \r\n"
    calendar:
      type: object
      properties:
        CalendarType:
          $ref: '#/components/schemas/calendartypevalues'
        CalendarName:
          $ref: '#/components/schemas/name'
      description: "A reference to the bank calendar details for payment processing ||\r\n|"
    CorrespondentBankOperatingSession:
      type: object
      properties:
        CorrespondentBankFacilityReference:
          $ref: '#/components/schemas/correspondentbankingarrangement'
        CorrespondentBankFacility:
          $ref: '#/components/schemas/correspondentbankingarrangement'
        CorrespondentBankServicingSchedule:
          $ref: '#/components/schemas/schedule'
        HolidayTimezoneSchedule:
          $ref: '#/components/schemas/calendar'
        VostroAccountReference:
          $ref: '#/components/schemas/account'
        NostroMirrorAccountReference:
          $ref: '#/components/schemas/account'
        SessionStatus:
          $ref: '#/components/schemas/status'
      description: 'Fulfill any scheduled and ad-hoc obligations under a service arrangement, most typically for a financial product or facility within Correspondent Bank. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CorrespondentBankOperatingSession:
      description: CorrespondentBankOperatingSession
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorrespondentBankOperatingSession'
    InboundPayments:
      description: InboundPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InboundPayments'
    OutboundPayments:
      description: OutboundPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OutboundPayments'
    ClearingandSettlement:
      description: ClearingandSettlement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClearingandSettlement'
    Reconciliation:
      description: Reconciliation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reconciliation'
  parameters:
    correspondentbankoperationsid:
      name: correspondentbankoperationsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    inboundpaymentsid:
      name: inboundpaymentsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    outboundpaymentsid:
      name: outboundpaymentsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    clearingandsettlementid:
      name: clearingandsettlementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    reconciliationid:
      name: reconciliationid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CorrespondentBankOperatingSession:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorrespondentBankOperatingSession'
      required: true
    InboundPayments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InboundPayments'
      required: true
    OutboundPayments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OutboundPayments'
      required: true
    ClearingandSettlement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClearingandSettlement'
      required: true
    Reconciliation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reconciliation'
      required: true