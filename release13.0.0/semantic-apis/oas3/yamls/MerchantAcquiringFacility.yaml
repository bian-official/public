openapi: 3.0.1
info:
  title: Merchant Acquiring Facility
  description: 'This service domain orchestrates the activities related to Merchant fulfillment, Merchant Account maintenance, Merchant transactional activities and settlement, including the billing of merchant fees and charges.'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/MerchantAcquiringFacility/13.0.0
paths:
  /MerchantAcquiringFacility/Initiate:
    post:
      tags:
        - CR - MerchantAcquiringFacility
      summary: InCR Initiate a new merchant acquiring facility
      description: InCR Initiate a new merchant acquiring facility
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/MerchantAcquiringFacility'
      responses:
        '200':
          $ref: '#/components/responses/MerchantAcquiringFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Update':
    put:
      tags:
        - CR - MerchantAcquiringFacility
      summary: UpCR Update details of the merchant acquiring facility
      description: UpCR Update details of the merchant acquiring facility
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
      requestBody:
        $ref: '#/components/requestBodies/MerchantAcquiringFacility'
      responses:
        '200':
          $ref: '#/components/responses/MerchantAcquiringFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Control':
    put:
      tags:
        - CR - MerchantAcquiringFacility
      summary: CoCR Control the processing of the merchant acquiring facility (e.g. Suspend)
      description: CoCR Control the processing of the merchant acquiring facility (e.g. Suspend)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
      requestBody:
        $ref: '#/components/requestBodies/MerchantAcquiringFacility'
      responses:
        '200':
          $ref: '#/components/responses/MerchantAcquiringFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Request':
    put:
      tags:
        - CR - MerchantAcquiringFacility
      summary: RqCR Request manual intervention with the facility (e.g. resolve a problem)
      description: RqCR Request manual intervention with the facility (e.g. resolve a problem)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
      requestBody:
        $ref: '#/components/requestBodies/MerchantAcquiringFacility'
      responses:
        '200':
          $ref: '#/components/responses/MerchantAcquiringFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Retrieve':
    get:
      tags:
        - CR - MerchantAcquiringFacility
      summary: ReCR Retrieve details about a merchant facility
      description: ReCR Retrieve details about a merchant facility
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
      responses:
        '200':
          $ref: '#/components/responses/MerchantAcquiringFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/MerchantAccount/{merchantaccountid}/Retrieve':
    get:
      tags:
        - BQ - MerchantAccount
      summary: ReBQ Retrieve accounting details for the merchant account
      description: ReBQ Retrieve accounting details for the merchant account
      operationId: RetrieveMerchantAccount
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/merchantaccountid'
      responses:
        '200':
          $ref: '#/components/responses/MerchantAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Clearing/{clearingid}/Update':
    put:
      tags:
        - BQ - Clearing
      summary: UpBQ Update a clearing transaction booked against the account
      description: UpBQ Update a clearing transaction booked against the account
      operationId: UpdateClearing
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/clearingid'
      requestBody:
        $ref: '#/components/requestBodies/Clearing'
      responses:
        '200':
          $ref: '#/components/responses/Clearing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Clearing/{clearingid}/Execute':
    put:
      tags:
        - BQ - Clearing
      summary: ExBQ Execute a clearing transaction against the account
      description: ExBQ Execute a clearing transaction against the account
      operationId: ExecuteClearing
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/clearingid'
      requestBody:
        $ref: '#/components/requestBodies/Clearing'
      responses:
        '200':
          $ref: '#/components/responses/Clearing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Clearing/{clearingid}/Retrieve':
    get:
      tags:
        - BQ - Clearing
      summary: ReBQ Retrieve details about a clearing transaction
      description: ReBQ Retrieve details about a clearing transaction
      operationId: RetrieveClearing
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/clearingid'
      responses:
        '200':
          $ref: '#/components/responses/Clearing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Chargeback/{chargebackid}/Update':
    put:
      tags:
        - BQ - Chargeback
      summary: UpBQ Update a chargeback transaction booked against the account
      description: UpBQ Update a chargeback transaction booked against the account
      operationId: UpdateChargeback
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/chargebackid'
      requestBody:
        $ref: '#/components/requestBodies/Chargeback'
      responses:
        '200':
          $ref: '#/components/responses/Chargeback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Chargeback/{chargebackid}/Execute':
    put:
      tags:
        - BQ - Chargeback
      summary: ExBQ Execute a chargeback transaction against the account
      description: ExBQ Execute a chargeback transaction against the account
      operationId: ExecuteChargeback
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/chargebackid'
      requestBody:
        $ref: '#/components/requestBodies/Chargeback'
      responses:
        '200':
          $ref: '#/components/responses/Chargeback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Chargeback/{chargebackid}/Retrieve':
    get:
      tags:
        - BQ - Chargeback
      summary: ReBQ Retrieve details about a chargeback transaction
      description: ReBQ Retrieve details about a chargeback transaction
      operationId: RetrieveChargeback
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/chargebackid'
      responses:
        '200':
          $ref: '#/components/responses/Chargeback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Settlement/{settlementid}/Update':
    put:
      tags:
        - BQ - Settlement
      summary: UpBQ Update a settlement transaction booked against the account
      description: UpBQ Update a settlement transaction booked against the account
      operationId: UpdateSettlement
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/settlementid'
      requestBody:
        $ref: '#/components/requestBodies/Settlement'
      responses:
        '200':
          $ref: '#/components/responses/Settlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Settlement/{settlementid}/Execute':
    put:
      tags:
        - BQ - Settlement
      summary: ExBQ Execute a settlement transaction against the account
      description: ExBQ Execute a settlement transaction against the account
      operationId: ExecuteSettlement
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/settlementid'
      requestBody:
        $ref: '#/components/requestBodies/Settlement'
      responses:
        '200':
          $ref: '#/components/responses/Settlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/Settlement/{settlementid}/Retrieve':
    get:
      tags:
        - BQ - Settlement
      summary: ReBQ Retrieve details about a settlement transaction
      description: ReBQ Retrieve details about a settlement transaction
      operationId: RetrieveSettlement
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/settlementid'
      responses:
        '200':
          $ref: '#/components/responses/Settlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/ServiceFee/{servicefeeid}/Update':
    put:
      tags:
        - BQ - ServiceFee
      summary: UpBQ Update a fee or penalty transaction booked against the account
      description: UpBQ Update a fee or penalty transaction booked against the account
      operationId: UpdateServiceFee
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/servicefeeid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFee'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/ServiceFee/{servicefeeid}/Exchange':
    put:
      tags:
        - BQ - ServiceFee
      summary: 'EcBQ Accept, reject, verify etc. a fee or penalty transaction'
      description: 'EcBQ Accept, reject, verify etc. a fee or penalty transaction'
      operationId: ExchangeServiceFee
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/servicefeeid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFee'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/ServiceFee/{servicefeeid}/Execute':
    put:
      tags:
        - BQ - ServiceFee
      summary: Execute Apply Service Fee
      description: Execute Apply Service Fee
      operationId: ExecuteServiceFee
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/servicefeeid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFee'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MerchantAcquiringFacility/{merchantacquiringfacilityid}/ServiceFee/{servicefeeid}/Retrieve':
    get:
      tags:
        - BQ - ServiceFee
      summary: ReBQ Retrieve details about a fee or penalty charge
      description: ReBQ Retrieve details about a fee or penalty charge
      operationId: RetrieveServiceFee
      parameters:
        - $ref: '#/components/parameters/merchantacquiringfacilityid'
        - $ref: '#/components/parameters/servicefeeid'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: Specifies the reasons for the status.
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Date and time at which the status was assigned.
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: "The current calculated limit ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: Reference identifier linking the account to appropriate tax handling GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO20022 BM ()
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the legal entity (typically the customer) ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    accountstatustypevalues:
      enum:
        - Enabled
        - Disabled
        - Deleted
        - Proforma
        - Pending
      type: string
      description: ">\r\n* `Enabled` - Account can be used for its intended purpose.\r\n* `Disabled` - Account cannot be used for its intended purpose, either temporarily or permanently.\r\n* `Deleted` - Account cannot be used any longer.\r\n* `Proforma` - Account is temporary and can be partially used for its intended purpose. The account will be fully available for use when the account servicer has received all relevant documents.\r\n* `Pending` - Account change is pending approval.\r\n"
    accountstatus:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/status'
        AccountStatusType:
          $ref: '#/components/schemas/accountstatustypevalues'
      description: "A characteristic of account which refers to the LifecycleStatus of account like opened, closed, blocked, etc.\n\nSpecifies the current state of an account. (ISO20022)"
    accountidentificationtypevalues:
      enum:
        - BBAN
        - IBAN
        - UPIC
        - AccountNumber
        - PAN
        - Paym
        - Wallet
        - SortCodeAndAccountNumber
      type: string
      description: ">\r\n* `BBAN` - Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniquely identify the account of a customer. (ISO20022)\n\n.\r\n* `IBAN` - International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 \"Banking and related financial services - International Bank Account Number (IBAN)\" version 1997-10-01, or later revisions. (ISO20022)\n\nAn identifier used internationally by financial institutions to uniquely identify the account of a customer at a financial institution, as described in the latest edition of the international standard ISO 13616. \"Banking and related financial services - International Bank Account Number (IBAN)\". (OBExternalAccountIdentification4Code)\r\n* `UPIC` - Universal Payment Identification Code (UPIC) - identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes. (ISO20022)\r\n* `AccountNumber` - String of characters (mainly numbers) used to identify an account.(ISO20022)\n\r\n* `PAN` - Primary Account Number - identifier scheme used to identify a card account. (OBExternalAccountIdentification4Code)\r\n* `Paym` - Paym Scheme to make payments via mobile (OBExternalAccountIdentification4Code)\r\n* `Wallet` - A primary and unique account identifier used to identify a wallet.\nAn ASPSP must document on their developer portal, the payment methods that supports this account identifier.(OBExternalAccountIdentification4Code)\r\n* `SortCodeAndAccountNumber` - Sort Code and Account Number - identifier scheme used in the UK by financial institutions to identify the account of a customer. The identifier is the concatenation of the 6 digit UK sort code and 8 digit account number. (UK Open Banking)\r\n"
    accountidentification:
      type: object
      properties:
        AccountIdentificationType:
          $ref: '#/components/schemas/accountidentificationtypevalues'
        AccountIdentification:
          $ref: '#/components/schemas/identifier'
      description: The identifier of account like Account Number.
    accountdatetimetypevalues:
      enum:
        - OpeningDate
        - ClosingDate
        - BlockingDate
        - MaturityDate
        - LiveDate
        - RenewalDate
      type: string
      description: ">\r\n* `OpeningDate` - Date on which the account and related basic services are effectively operational for the account owner. (ISO20022)\r\n* `ClosingDate` - Date on which the account and related services cease effectively to be operational for the account owner. (ISO20022)\r\n* `BlockingDate` - \r\n* `MaturityDate` - Maturity date for the account.\r\n* `LiveDate` - \r\n* `RenewalDate` - \r\n"
    accountdatetime:
      type: object
      properties:
        AccountDateType:
          $ref: '#/components/schemas/accountdatetimetypevalues'
        AccountDate:
          $ref: '#/components/schemas/datetime'
      description: 'A characteristic of account which refers to LifecycleDate of account (e.g., ClosingDate, OpeningDate, LiveDate, etc.) '
    accounttypevalues:
      enum:
        - DebitAccount
        - CreditAccount
        - VostroAcount
        - NostroAccount
        - PaymentAccount
        - SettlementAccount
        - SavingAccount
        - CurrentAccount
        - CashAccount
        - LoanAccount
        - IndividualAccount
        - JointAccount
        - LiquidationAccount
        - ProvisionAccount
        - PartnershipAccount
        - InvestmentAccount
      type: string
      description: ">\r\n* `DebitAccount` - \r\n* `CreditAccount` - \r\n* `VostroAcount` - In correspondent banking, an account held by one bank on behalf of another bank (the customer bank); the customer bank regards this account as its nostro account. (ECB)\r\n* `NostroAccount` - In correspondent banking, an account held by a customer bank on the books of another bank acting as a service provider. The other bank regards this account as a loro account. (ECB)\r\n* `PaymentAccount` - \r\n* `SettlementAccount` - A specific purpose account used to post debit and credit entries as a result of the transaction. (ISO20022)\n\nAccount which is used for settlement. (ISO20022)\r\n* `SavingAccount` - \r\n* `CurrentAccount` - \r\n* `CashAccount` - \r\n* `LoanAccount` - \r\n* `IndividualAccount` - \r\n* `JointAccount` - \r\n* `LiquidationAccount` - \r\n* `ProvisionAccount` - \r\n* `PartnershipAccount` - \r\n* `InvestmentAccount` - \r\n"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: The billing currency for the merchant acquiring facility account CurrencyCode|CurrencyCode (https://www.iso20022.org/standardsrepository/type/CurrencyCode)|Standard|ISO20022 BM ()
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: ''
    balancetypevalues:
      enum:
        - OpeningBalance
        - ClosingBalance
        - CurrentBalance
        - AvailableBalance
        - LedgerBalance
        - ReserveBalance
        - FreeBalance
        - PrincipalBalance
        - ClosingAvailable
        - ClosingBooked
        - ForwardAvailable
        - Information
        - InterimAvailable
        - InterimBooked
        - OpeningAvailable
        - OpeningBooked
        - PreviouslyClosedBooked
        - Expected
      type: string
      description: ">\r\n* `OpeningBalance` - Book balance of the account at the beginning of the account servicer's business day. It always equals the closing book balance from the previous business day. Note: the available balance at the beginning of the account servicer's business day may be different from the closing book balance from the previous business day. (ISO20022)\r\n* `ClosingBalance` - Balance of the account at the end of the account servicer's business day. It is the sum of the opening balance at the beginning of the day and all entries booked to the account during the account servicer's business day. (ISO20022)\r\n* `CurrentBalance` - Balance of the account at a precise moment in time. (ISO20022)\r\n* `AvailableBalance` - Balance of money or securities that is at the disposal of the account owner on the date specified. (ISO20022)\r\n* `LedgerBalance` - Ledger balance refers to posted transactions (e.g. limit authorisation amount - posted transactions). (ISO20022)\r\n* `ReserveBalance` - \r\n* `FreeBalance` - \r\n* `PrincipalBalance` - \r\n* `ClosingAvailable` - Closing balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `ClosingBooked` - Balance of the account at the end of the pre-agreed account reporting period. It is the sum of the opening booked balance at the beginning of the period and all entries booked to the account during the pre-agreed account reporting period.\r\n* `ForwardAvailable` - Forward available balance of money that is at the disposal of the account owner on the date specified.\r\n* `Information` - Balance for informational purposes.\r\n* `InterimAvailable` - Available balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `InterimBooked` - Balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `OpeningAvailable` - Opening balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `OpeningBooked` - Book balance of the account at the beginning of the account reporting period. It always equals the closing book balance from the previous report.\r\n* `PreviouslyClosedBooked` - Balance of the account at the previously closed account reporting period. The opening booked balance for the new period has to be equal to this balance.\nUsage: the previously booked closing balance should equal (inclusive date) the booked closing balance of the date it references and equal the actual booked opening balance of the current date.\r\n* `Expected` - Balance, composed of booked entries and pending items known at the time of calculation, which projects the end of day balance if everything is booked on the account and no other entry is posted.\r\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    balancecounterpartytypevalues:
      enum:
        - Bilateral
        - Multilateral
      type: string
      description: ">\r\n* `Bilateral` - Balance calculated regarding one member in the system. (ISO20022)\r\n* `Multilateral` - Balance calculated regarding all members in the system. (ISO20022)\r\n"
    balancesubtypevalues:
      enum:
        - Adjustment
        - Basecurrency
        - Blocked
        - Blockedfunds
        - Daylightoverdraft
        - Eligibleassets
        - Firmcollateralization
        - Amountsthathavebeenusedtoserveasfirmcollateral
        - Securitiesforecast
        - Netfunding
        - Intermediate
        - Localcurrency
        - Limitrelated
        - Reservedliquidity
        - Securitiespending
        - Payinpayout
        - Progressiveaverage
        - Reserve
        - Selfcollateralization
        - Amountsthathavebeenusedtoserveasselfcollateral
        - Threshold
      type: string
      description: ">\r\n* `Adjustment` - Balance to be held in the settlement account in order to comply with the average reserve due, in the event that the bank's balance is equal to the reserve due during the remaining days of the maintenance period.\r\n* `Basecurrency` - Balance representing the amount in the domestic or base accounting currency.\r\n* `Blocked` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes. In some countries, a blocked balance is known as a 'reserve' balance.\r\n* `Blockedfunds` - Balance representing funds that cannot be touched by the account owner.\r\n* `Daylightoverdraft` - Balance representing the intra day overdraft granted by the Central Bank to financial institutions participating in a RTGS system. This balance may vary over time and shall be offset at the end of the day.\r\n* `Eligibleassets` - Balance representing the potential loan a Central Bank would make in cash if the collateral is pledged, eg, securities available and eligible as collateral with the Central Bank.\r\n* `Firmcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral.\r\n* `Amountsthathavebeenusedtoserveasfirmcollateral` - Balance representing the cash equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral and have been used as collateral.\r\n* `Securitiesforecast` - Balance representing the total of all balance types representing the forecast of transactions to settle, blocked items, custody transactions and corporate actions cash disbursements.\r\n* `Netfunding` - Balance representing the net amount to be funded resulting from the difference between the total of all transactions with a cash impact and the existing cash coverage.\r\n* `Intermediate` - Balance representing an intermediate amount such as the opening or closing balance incrementally carried forward from one page to the next in a multi-page statement or report.\r\n* `Localcurrency` - Balance representing the amount in the local market currency for which the asset is held.\r\n* `Limitrelated` - Balance of a specific limit value, eg, a bilateral balance is calculated in relation to a given bilateral limit.\r\n* `Reservedliquidity` - Balance representing the amount that a financial institution has set aside for a specific reason and which is therefore not available. In the context of CSDs, reservation of liquidity made to meet settlement obligations.\r\n* `Securitiespending` - Balance of securities pending delivery, such as orders to sell securities have been executed but settlement of the open transactions has not been confirmed.\r\n* `Payinpayout` - Balance representing the fictive amount of automated direct debits or payment based on standing arrangements between the CSD and the user. Usage: Pay-Ins and Pay-Outs can be different based on individual payment instructions or available funds.\r\n* `Progressiveaverage` - Average of the daily balances on the account used to fulfil the reserve requirements calculated from the beginning of the maintenance period.\r\n* `Reserve` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes.\r\n* `Selfcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of the net incoming balance of securities qualified to serve as collateral for which settlement instructions are held at.\r\n* `Amountsthathavebeenusedtoserveasselfcollateral` - Balance representing the cash-equivalent resulting from evaluation of incoming securities, qualified to serve as collateral and actually used as collateral, which have been settled during the settlement process.\r\n* `Threshold` - Balance representing the amount that will be destined for investment. Difference between available balance and threshold for investment limit.\r\n"
    accountbalance:
      type: object
      properties:
        BalanceAmount:
          $ref: '#/components/schemas/amount'
        BalanceType:
          $ref: '#/components/schemas/balancetypevalues'
        BalanceValueDate:
          $ref: '#/components/schemas/datetime'
        BalanceIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        BalanceCounterpartyType:
          $ref: '#/components/schemas/balancecounterpartytypevalues'
        BalanceCalculationDate:
          $ref: '#/components/schemas/datetime'
        BalanceSubType:
          $ref: '#/components/schemas/balancesubtypevalues'
      description: "The state of the obligations managed on the account, the result of all entries on the account.\n\nNumerical representation of the net increases and decreases in an account at a specific point in time. (ISO20022)\n\nBanking: Amount available in an account for withdrawal or use.\nRead more: http://www.businessdictionary.com/definition/balance.html\n\nBookkeeping: Difference between the debit and credit sides of an account.\nRead more: http://www.businessdictionary.com/definition/balance.html"
    currencytypevalues:
      enum:
        - BaseCurrency
        - ReportingCurrency
        - SecondaryCurrency
        - TransferCurrency
      type: string
      description: ">\r\n* `BaseCurrency` - Base currency of the account. (ISO20022)\n\r\n* `ReportingCurrency` - Currency used to calculate and report the balance and related entries of an account. (ISO20022)\n\r\n* `SecondaryCurrency` - \r\n* `TransferCurrency` - Currency of the amount to be transferred which may be different from the currency of the debtor's account. (ISO20022)\r\n"
    accountcurrency:
      type: object
      properties:
        AccountCurrencyType:
          $ref: '#/components/schemas/currencytypevalues'
        AccountCurrency:
          $ref: '#/components/schemas/currencycode'
      description: ''
    account:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/accountstatus'
        AccountIdentification:
          $ref: '#/components/schemas/accountidentification'
        AccountDate:
          $ref: '#/components/schemas/accountdatetime'
        AccountType:
          $ref: '#/components/schemas/accounttypevalues'
        AccountPurpose:
          $ref: '#/components/schemas/text'
        AccountBalance:
          $ref: '#/components/schemas/accountbalance'
        AccountCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountDescription:
          $ref: '#/components/schemas/text'
        AccountName:
          $ref: '#/components/schemas/name'
      description: 'Customer account to be used to credit a fee amount, e.g. reimbursement'
    modalitytypevalues:
      enum:
        - AllocationModality
        - CalculationModality
        - DerivationModality
        - PaymentModality
        - ProcessingModality
        - ApplicationModality
        - DeliveryModality
      type: string
      description: ">\r\n* `AllocationModality` - \r\n* `CalculationModality` - \r\n* `DerivationModality` - \r\n* `PaymentModality` - \r\n* `ProcessingModality` - \r\n* `ApplicationModality` - \r\n* `DeliveryModality` - \r\n"
    servicemodality:
      type: object
      properties:
        ServiceModalityType:
          $ref: '#/components/schemas/modalitytypevalues'
      description: Description of the fee calculation method for this fee type
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: 'Rate of fee (percentage) to be applied '
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
        - ChequeRelatedFee
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n* `ChequeRelatedFee` - \r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feeapplicationfrequencyvalues:
      enum:
        - Onclosing
        - Onopening
        - Chargingperiod
        - Daily
        - Peritem
        - Monthly
        - Onanniversary
        - Other
        - Perhundredpounds
        - Perhour
        - Peroccurrence
        - Persheet
        - Pertransaction
        - Pertransactionamount
        - Pertransactionpercentage
        - Quarterly
        - Sixmonthly
        - Statementmonthly
        - Weekly
        - Yearly
      type: string
      description: ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging period\r\n* `Daily` - This fee is triggered every day\r\n* `Peritem` - This fee is triggered by the processing of an item on the product\r\n* `Monthly` - This fee is triggered monthly\r\n* `Onanniversary` - This fee is triggered on the anniversary of opening the product\r\n* `Other` - Other Fee Frequency\r\n* `Perhundredpounds` - This fee is triggered for every hundred pounds withdrawn\r\n* `Perhour` - This fee is triggered every hour\r\n* `Peroccurrence` - This fee is triggered per occurrence of the transaction or service. This differs from PerItem, in that if a batch of items is processed at the same time, a PerOccurrence fee would incur a single charge, whereas a PerItem fee would be charged for each item within the batch.\r\n* `Persheet` - This fee is levied on every statement sheet\r\n* `Pertransaction` - The fee is charged for each transaction\r\n* `Pertransactionamount` - The amount stated is levied for each transaction processed\r\n* `Pertransactionpercentage` - The fee amount is the given percentage of the transaction processed and is levied for each transaction\r\n* `Quarterly` - This fee is triggered at the end of every quarter\r\n* `Sixmonthly` - This fee is triggered at the end of every 6 month period\r\n* `Statementmonthly` - This fee is triggered based on a monthly statement period\r\n* `Weekly` - The fee is triggered weekly\r\n* `Yearly` - This fee is triggered yearly\r\n"
    feecalculationmethodtypevalues:
      enum:
        - Flat
        - Perunit
        - Percentage
        - Rateperbrackets
        - Ratewithminimumamount
        - Ratewithmaximumamount
        - Other
        - Grossamount
        - Netamount
        - Netassetvalueprice
      type: string
      description: ">\r\n* `Flat` - Charge/tax basis is a lump sum.\r\n* `Perunit` - Charges/tax basis is per unit of financial instrument.\r\n* `Percentage` - Charge/tax basis is a percentage.\r\n* `Rateperbrackets` - Charge/tax basis is a percentage which depends on the tax brackets.\r\n* `Ratewithminimumamount` - Rate with a minimum amount.\r\n* `Ratewithmaximumamount` - Rate with a maximum amount.\r\n* `Other` - Another type of taxation basis.\r\n* `Grossamount` - Charge/Commission/tax basis is based on the gross amount.\r\n* `Netamount` - Charge/commission/tax basis is based on the net amount.\r\n* `Netassetvalueprice` - Charge/tax basis is the price.\r\n"
    feecalculationfrequencyvalues:
      enum:
        - Onclosing
        - Onopening
        - Chargingperiod
        - Daily
        - Peritem
        - Monthly
        - Onanniversary
        - Other
        - Perhundredpounds
        - Perhour
        - Peroccurrence
        - Persheet
        - Pertransaction
        - Pertransactionamount
        - Pertransactionpercentage
        - Quarterly
        - Sixmonthly
        - Statementmonthly
        - Weekly
        - Yearly
      type: string
      description: ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging period\r\n* `Daily` - This fee is triggered every day\r\n* `Peritem` - This fee is triggered by the processing of an item on the product\r\n* `Monthly` - This fee is triggered monthly\r\n* `Onanniversary` - This fee is triggered on the anniversary of opening the product\r\n* `Other` - Other Fee Frequency\r\n* `Perhundredpounds` - This fee is triggered for every hundred pounds withdrawn\r\n* `Perhour` - This fee is triggered every hour\r\n* `Peroccurrence` - This fee is triggered per occurrence of the transaction or service. This differs from PerItem, in that if a batch of items is processed at the same time, a PerOccurrence fee would incur a single charge, whereas a PerItem fee would be charged for each item within the batch.\r\n* `Persheet` - This fee is levied on every statement sheet\r\n* `Pertransaction` - The fee is charged for each transaction\r\n* `Pertransactionamount` - The amount stated is levied for each transaction processed\r\n* `Pertransactionpercentage` - The fee amount is the given percentage of the transaction processed and is levied for each transaction\r\n* `Quarterly` - This fee is triggered at the end of every quarter\r\n* `Sixmonthly` - This fee is triggered at the end of every 6 month period\r\n* `Statementmonthly` - This fee is triggered based on a monthly statement period\r\n* `Weekly` - The fee is triggered weekly\r\n* `Yearly` - This fee is triggered yearly\r\n"
    feepaymentmethodtypevalues:
      enum:
        - Cash
        - Unit
      type: string
      description: ">\r\n* `Cash` - Payment is with cash.\r\n* `Unit` - Units are redeemed to cover payment.\r\n"
    ServiceFee:
      type: object
      properties:
        FeeCreditAccount:
          $ref: '#/components/schemas/account'
        FeeCalculationMethod:
          $ref: '#/components/schemas/servicemodality'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        ChargeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
        ChargeBearerReference:
          $ref: '#/components/schemas/involvedparty'
        FeeApplicationFrequency:
          $ref: '#/components/schemas/feeapplicationfrequencyvalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        AccrualFeeAmount:
          $ref: '#/components/schemas/amount'
        FeeDebitAccount:
          $ref: '#/components/schemas/account'
        FeePaymentMethod:
          $ref: '#/components/schemas/servicemodality'
        AccruedCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeCalculationMethodType:
          $ref: '#/components/schemas/feecalculationmethodtypevalues'
        FeeCalculationFrequency:
          $ref: '#/components/schemas/feecalculationfrequencyvalues'
        FeePaymentMethodType:
          $ref: '#/components/schemas/feepaymentmethodtypevalues'
        FeeApplicationAmount:
          $ref: '#/components/schemas/amount'
        FeeApplicationDate:
          $ref: '#/components/schemas/datetime'
        FeeApplicationCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
      description: The product features/services available with a financical facility
    transactiondatetimetypevalues:
      enum:
        - ExecutedDate
        - FulfillmentDate
        - InitiatedDate
        - CancelledDate
        - ApprovedDate
        - ValueDate
        - BookingDate
      type: string
      description: ">\r\n* `ExecutedDate` - \r\n* `FulfillmentDate` - \r\n* `InitiatedDate` - \r\n* `CancelledDate` - \r\n* `ApprovedDate` - \r\n* `ValueDate` - \r\n* `BookingDate` - \r\n"
    transactiondatetime:
      type: object
      properties:
        TransactionDate:
          $ref: '#/components/schemas/datetime'
        TransactionDateType:
          $ref: '#/components/schemas/transactiondatetimetypevalues'
      description: "The Date that the transaction has occurred or is planned to occur.\nA characteristic of transaction which refers to the LifecycleDate of transaction (e.g., initiated date, executed date, fulfillment date). "
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: ">\r\n* `FinancialTransaction` - \r\n* `BusinessTransaction` - \r\n* `BankingTransaction` - \r\n* `AccountingTransaction` - \r\n* `BookingTransaction` - \r\n* `AllocationTransaction` - \r\n* `DeliveryTransaction` - \r\n* `ProductionTransaction` - \r\n"
    transactionstatustypevalues:
      enum:
        - Initiated
        - Executed
        - Cancelled
        - Confirmed
        - Suspended
        - Pending
        - Completed
        - Notified
        - Booked
        - Rejected
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Executed` - \r\n* `Cancelled` - \r\n* `Confirmed` - \r\n* `Suspended` - \r\n* `Pending` - \r\n* `Completed` - \r\n* `Notified` - \r\n* `Booked` - \r\n* `Rejected` - \r\n"
    transactionstatus:
      type: object
      properties:
        TransactionStatus:
          $ref: '#/components/schemas/status'
        TransactionStatusType:
          $ref: '#/components/schemas/transactionstatustypevalues'
      description: 'A characteristic of transaction which refers to the LifecycleStatus of transaction (e.g., initiated, executed, confirmed, cancelled, etc.) '
    transaction:
      type: object
      properties:
        TransactionIdentification:
          $ref: '#/components/schemas/identifier'
        TransactionDate:
          $ref: '#/components/schemas/transactiondatetime'
        TransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TransactionDescription:
          $ref: '#/components/schemas/text'
        TransactionStatus:
          $ref: '#/components/schemas/transactionstatus'
        TransactionName:
          $ref: '#/components/schemas/name'
      description: Reference to the posting transaction against the merchant account
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: The value date for the posting
    MerchantAccount:
      type: object
      properties:
        MerchantAccountPostingTransaction:
          $ref: '#/components/schemas/transaction'
        MerchantAcquiringAccountPostingPurpose:
          $ref: '#/components/schemas/text'
        MerchantAcquiringAccountPostingAmount:
          $ref: '#/components/schemas/amount'
        MerchantAcquiringAccountPostingValueDate:
          $ref: '#/components/schemas/date'
        MerchantAcquiringAccountPostingResult:
          $ref: '#/components/schemas/text'
      description: The product features/services available with a financical facility
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: Place where the merchant actually performed the transaction. (ISO20022)
    transactionchanneltypevalues:
      enum:
        - Mailorder
        - Telephoneorder
        - Electroniccommerce
        - Televisionpayment
        - Officeorbranch
        - Homebanking
        - Financialadvisor
        - Mobilepayment
        - Securedelectroniccommerce
        - Mobilepos
      type: string
      description: ">\r\n* `Mailorder` - Mail order.\r\n* `Telephoneorder` - Telephone order.\r\n* `Electroniccommerce` - Electronic commerce.\r\n* `Televisionpayment` - Payment on television.\r\n* `Officeorbranch` - Office or branch.\r\n* `Homebanking` - Home banking.\r\n* `Financialadvisor` - Financial advisor.\r\n* `Mobilepayment` - Payment performed through a cardholder mobile device.\r\n* `Securedelectroniccommerce` - Electronic commerce with cardholder authentication.\r\n* `Mobilepos` - Payment performed through a merchant mobile device.\r\n"
    pointofservice:
      type: object
      properties:
        PointOfService:
          type: string
          description: "Point at which a service is offered and/or fulfilled. \n"
          format: class
      description: Describes the Point of Interaction through which the payment by card was initiated. (ISO20022)
    transactionenvironmenttypevalues:
      enum:
        - Merchant
        - Private
        - Public
        - Branch
        - Other
      type: string
      description: ">\r\n* `Merchant` - Merchant environment.\r\n* `Private` - Private environment.\r\n* `Public` - Public environment.\r\n* `Branch` - Bank environment.\r\n* `Other` - Other environments, for instance a mall or an airport.\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the merchant where the transaction took place. (ISO20022)
    cardnetwork:
      type: object
      properties:
        CardNetwork:
          type: string
          description: "Network for handling the card based transaction (e.g. Visa, MC, AMEX, Diners, etc.)\n\nA card network are networks of issuing and acquiring banks through which payment cards of some certain brand are processed. two types of card networks can be pointed out, namely, credit card associations (Visa, MasterCard, Discover, Amex, etc.) and PINless debit card networks (NYCE, PULSE, Maestro, Interlink, Cirrus, etc.).\n\nCard networks are financial services companies that enables, processes and settles payments between card issuing banks and merchant banks worldwide. Examples are Visa, MasterCard, Discover, RuPay etc.\n\nA card network is a system of connecting merchants and card issuers.  A middle person that collects funds from card issuer and pays it to the merchant.  Visa and MasterCard are examples of card networks."
          format: class
      description: Network used for handling the card payment transaction.
    amountqualifiertypevalues:
      enum:
        - Cashback
        - Gratuity
        - Fees
        - Rebates
        - Valueaddedtax
        - Actual
        - Replacement
        - Maximum
        - Default
        - Estimated
        - Original
        - Surcharge
        - Servicefee
        - Interchangefee
        - Discount
        - Atmcommissionfee
        - Authorisedamount
        - Cardremainingbalance
        - Maximumallowedamount
        - Minimumallowedamount
        - Requestedamount
        - Issuerfees
        - Issuercommission
        - Interchangefees
        - Processingfees
        - Currencyconversionfees
        - Internationalserviceassessmentfees
        - Commission
        - Donation
        - Tax
        - Incremental
        - Decremental
        - Reserved
        - Confirmedamount
        - Instructedamount
        - Atmaccessfee
        - Cardholderbillingfee
        - Clearingfee
        - Credittransactionfee
        - Cumulative
        - Debittransactionfee
        - Extra
        - Foreignexchangefee
        - Fundstransfer
        - Instantpaymentfee
        - Instanttransferfee
        - Issuercardholderfee
        - Limit
        - Othernational
        - Otherprivate
        - Reconciliationfee
        - Settlementfee
        - Transactionfee
        - Anticipated
        - Baggage
        - Chargedtocard
        - Clearingpriorityfee
        - Dental
        - Deposit
        - Fundstransferfee
        - Otherqualifiedmedical
        - Prescription
        - Proxy
        - Requestedcashback
        - Settlementpriorityfee
        - Totalhealthcare
        - Transit
        - Vision
        - Connect
        - Data
        - Exchangeticket
        - Exchangeticketfee
        - Fare
        - Foodbeverage
        - Insurance
        - Longdistance
        - Miscellaneous
        - Phone
        - Prepayment
        - Total
        - Usage
        - Predcc
        - Upgrade
        - Clubfee
        - Cargo
        - Dutyfree
        - Ticketdelivery
        - Petcarrier
        - Tourorder
        - Minimuminterchangefee
        - Maximuminterchangefee
        - Cashbackinterchangefee
      type: string
      description: ">\r\n* `Cashback` - Cash-back amount.\r\n* `Gratuity` - Gratuity amount.\r\n* `Fees` - Fees.\r\n* `Rebates` - Global rebate of the transaction. This amount is counted as a negative amount.\r\n* `Valueaddedtax` - Value added tax amount.\r\n* `Actual` - Actual amount.\r\n* `Replacement` - Replacement amount.\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Original` - Original amount authorised during the real-time authorisation process.\r\n* `Surcharge` - Extra fee for a purchase or a withdrawal.\r\n* `Servicefee` - Service fee.\r\n* `Interchangefee` - Interchange fee.\r\n* `Discount` - Discount, rebate or voucher, related to loyalty programs. This amount is counted as a negative amount.\r\n* `Atmcommissionfee` - Commission that the issuer will charge to the cardholder, which should be shown and accepted by the cardholder before the money is disbursed.\r\n* `Authorisedamount` - Transaction amount that has been authorised.\r\n* `Cardremainingbalance` - Remaining allowed amount for this type of transaction with this card, after the transaction, until the end of the card limit period.\r\n* `Maximumallowedamount` - Maximum amount allowed for the transaction in the transaction amount currency if the transaction amount of the request was declined.\r\n* `Minimumallowedamount` - Minimum amount allowed in the TransactionAmount currency if the transaction amount of the request was declined.\r\n* `Requestedamount` - Transaction amount that has been requested to be authorised.\r\n* `Issuerfees` - Fees amount from the card issuer.\r\n* `Issuercommission` - Commission from the card issuer.\r\n* `Interchangefees` - Interchange fees.\r\n* `Processingfees` - Processing fees.\r\n* `Currencyconversionfees` - Currency conversion fees.\r\n* `Internationalserviceassessmentfees` - International service assessment fees.\r\n* `Commission` - Commission, for example for DCC (Dynamic Currency Conversion) transactions.\r\n* `Donation` - Donation amount.\r\n* `Tax` - Taxes applicable to the transaction.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Confirmedamount` - Actual amount that has been paid to the ultimate beneficiary, after all charges etc... have been deducted.\r\n* `Instructedamount` - Amount of money to be moved between the debtor (ordering customer) and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\r\n* `Atmaccessfee` - Fee for giving access to an ATM.\r\n* `Cardholderbillingfee` - Fee related to a cardholder billing.\r\n* `Clearingfee` - Fee related to a clearing transaction.\r\n* `Credittransactionfee` - Fee related to a credit transaction.\r\n* `Cumulative` - Contains the total amount of all authorisations related to the same cardholder purchase activities. Example: total of all incremental or splitted shipment authorisations for the same purchase.\r\n* `Debittransactionfee` - Fee related to a debit transaction.\r\n* `Extra` - Extra charges (for example,  minibar, etc.)\r\n* `Foreignexchangefee` - Fee related to a foreign exchange transaction.\r\n* `Fundstransfer` - Fee related to a funds transfer transaction\r\n* `Instantpaymentfee` - Fee related to an instant payment.\r\n* `Instanttransferfee` - Fee related to an instant transfer transaction.\r\n* `Issuercardholderfee` - Fee applied by the card issuer to the cardholder.\r\n* `Limit` - Limit of amounts for the transaction.\r\n* `Othernational` - Other type of amount defined at national level.\r\n* `Otherprivate` - Other type of amount defined at private level.\r\n* `Reconciliationfee` - Fee related to a reconciliation transaction.\r\n* `Settlementfee` - Fee related to a settlement transaction.\r\n* `Transactionfee` - Fee related to a transaction.\r\n* `Anticipated` - Amount anticipated for the transaction\r\n* `Baggage` - Baggage related fees\r\n* `Chargedtocard` - Amount that has been charged to card account\r\n* `Clearingpriorityfee` - Fee related to a clearing transaction for a given priority.\r\n* `Dental` - Amount qualified for dental prescriptions\r\n* `Deposit` - Deposit amount.\r\n* `Fundstransferfee` - Fee related to a funds transfer.\r\n* `Otherqualifiedmedical` - Amount qualified for other medical expenses\r\n* `Prescription` - Amount for medical prescription\r\n* `Proxy` - Substitute for an amount to be authorised.\r\n* `Requestedcashback` - Requested cashback amount\r\n* `Settlementpriorityfee` - Fee related to a settlement transaction for a given priority.\r\n* `Totalhealthcare` - Total healthcare amount\r\n* `Transit` - Amount in transit\r\n* `Vision` - Amount qualified for medical vision expenses\r\n* `Connect` - Telephone connection-related charge\r\n* `Data` - Data communication related charges\r\n* `Exchangeticket` - Fee for exchanging a ticket (modifying an itinerary)\r\n* `Exchangeticketfee` - Fee for exchanging a ticket (modifying an itinerary)\r\n* `Fare` - Amount of fare\r\n* `Foodbeverage` - Amount of food and beverages\r\n* `Insurance` - Insurance charges\r\n* `Longdistance` - Charges related to a long distance call.\r\n* `Miscellaneous` - Miscellaneous charges not elsewhere defined\r\n* `Phone` - Phone charges\r\n* `Prepayment` - Amount of prepayment\r\n* `Total` - Total amount of charges\r\n* `Usage` - Telephone usage-related charge\r\n* `Predcc` - Local amount before DCC (Dynamic Currency Conversion) was applied.\r\n* `Upgrade` - Amount for an upgrade.\r\n* `Clubfee` - Amount for club fee.\r\n* `Cargo` - Cargo Amount.\r\n* `Dutyfree` - Duty free amount\r\n* `Ticketdelivery` - Ticket delivery amount.\r\n* `Petcarrier` - Pet carrier.\r\n* `Tourorder` - Tour order amount.\r\n* `Minimuminterchangefee` - Minimum interchange fee applicable.\r\n* `Maximuminterchangefee` - Maximum applicable interchange fee.\r\n* `Cashbackinterchangefee` - Interchange fee applicable to cash back amount.\r\n"
    cardtransactioncategorytypevalues:
      type: object
      properties:
        Cardtransactioncategorytypevalues:
          type: string
          description: ''
          format: enumeration
      description: Specifies the category to which the card transaction belongs. (ISO20022)
    cardpaymenttransactionidentificationtypevalues:
      enum:
        - Issuercitidentification
        - Merchantcitidentification
      type: string
      description: ">\r\n* `Issuercitidentification` - Identification, given by the Issuer, of the transaction processed with the cardholder that legitimates this merchant initiated transaction. (ISO20022)\r\n* `Merchantcitidentification` - Identification, given by the merchant, of the transaction processed with the cardholder that legitimates this merchant initiated transaction. (ISO20022)\r\n"
    cardpaymenttransactionidentification:
      type: object
      properties:
        CardPaymentTransactionIdentification:
          $ref: '#/components/schemas/identifier'
        CardPaymentTransactionIdentificationType:
          $ref: '#/components/schemas/cardpaymenttransactionidentificationtypevalues'
      description: Identification of the transaction assigned by the initiator of the request. For instance refers to POITransactionIdentification if used inside an authorisation request or to SaleTransactionIdentification if the message is a payment request initiated by a sale system. (ISO20022)
    cardpaymenttransactionservicetypevalues:
      enum:
        - Cardsfundtransfer
        - Originalcredit
        - Cardpayment
        - Cashback
        - Cashadvance
        - Cashdeposit
        - Deferredpayment
        - Reservation
        - Loading
        - Refund
        - Quasicash
        - Balance
        - Cardactivation
        - Cardverification
        - Pinchange
        - Validitycheck
        - Aggregation
        - DCC
        - Gratuity
        - Instalment
        - Loyalty
        - Noshow
        - Purchasecorporate
        - Recurringpayment
        - Solicitedavailablefunds
        - Unsolicitedavailablefunds
        - Voiceauthorisation
        - Initialreservation
        - Updatereservation
        - Paymentreservation
        - Additionalpayment
        - Firstrecurring
        - Followingrecurring
        - Persontobusiness
        - Persontoperson
        - Acceptorinstalment
        - Issuerinstalment
        - Unloading
        - Cardsfundtransferpush
        - Cardsfundtransferpull
        - Cashwithdrawal
        - Pinunblock
        - Chosenwithdrawal
        - Preauthorisedwithdrawal
        - Profilewithdrawal
        - Standardwithdrawal
        - Transfercardbillpayment
        - Transferfromcash
        - Transferfromcheque
        - Transferfundsdisbursementgeneral
        - Transfergovernmentdisbursement
        - Transfermerchantdisbursement
        - Transferpayrollpensiondisbursement
        - Nonrefundable
        - Instant
        - Creditadjustement
        - Debitadjustement
        - Createcertificate
        - Renewcerificate
        - Revokecertificate
        - Addwhitelist
        - Removewhitelist
        - Cardinitiatingdirectdebit
        - Guaranteeofpayment
      type: string
      description: ">\r\n* `Cardsfundtransfer` - Transfer of funds to and/or from a card account.\r\n* `Originalcredit` - Original credit.\r\n* `Cardpayment` - Card payment.\r\n* `Cashback` - Card payment with cash-back.\r\n* `Cashadvance` - Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.\r\n* `Cashdeposit` - Cash deposit.\r\n* `Deferredpayment` - Deferred payment.\r\n* `Reservation` - Reservation (pre-authorisation).\r\n* `Loading` - Loading or reloading non-financial account.\r\n* `Refund` - Refund transaction.\r\n* `Quasicash` - Quasi-cash.\r\n* `Balance` - Balance enquiry.\r\n* `Cardactivation` - Card activation.\r\n* `Cardverification` - Card verification.\r\n* `Pinchange` - PIN (Personal Identification Number) change.\r\n* `Validitycheck` - Card validity check.\r\n* `Aggregation` - Aggregation of low payments.\r\n* `DCC` - Dynamic currency conversion (DCC).\r\n* `Gratuity` - Card payment with gratuity.\r\n* `Instalment` - Instalment payment.\r\n* `Loyalty` - Loyalty services.\r\n* `Noshow` - No show after reservation.\r\n* `Purchasecorporate` - Purchase and corporate data.\r\n* `Recurringpayment` - Recurring payment.\r\n* `Solicitedavailablefunds` - Solicited available funds.\r\n* `Unsolicitedavailablefunds` - Unsolicited available funds.\r\n* `Voiceauthorisation` - Voice authorisation.\r\n* `Initialreservation` - Initial reservation.\r\n* `Updatereservation` - Update reservation.\r\n* `Paymentreservation` - Payment after reservation.\r\n* `Additionalpayment` - Additional payment after reservation.\r\n* `Firstrecurring` - Initial recurring payment.\r\n* `Followingrecurring` - Repeat recurring payment.\r\n* `Persontobusiness` - Card payment transaction transfer from person to business.\r\n* `Persontoperson` - Card payment transaction transfer from person to person.\r\n* `Acceptorinstalment` - Instalment payment transaction performed by the acceptor or the acquirer.\r\n* `Issuerinstalment` - Instalment payment transaction performed by the card issuer.\r\n* `Unloading` - Unloading non-financial account.\r\n* `Cardsfundtransferpush` - Transfer of funds to a card or an account.\r\n* `Cardsfundtransferpull` - Transfer of funds from a card or an account.\r\n* `Cashwithdrawal` - Withdrawal of cash on an ATM.\r\n* `Pinunblock` - Unblock the cardholder PIN.\r\n* `Chosenwithdrawal` - Amount and notes values are chosen by the customer.\r\n* `Preauthorisedwithdrawal` - Withdrawal transaction was pre-authorised by another channel (amount could be absent).\r\n* `Profilewithdrawal` - Amount and Notes Values are pre-defined by the customer profile.\r\n* `Standardwithdrawal` - Customer pressed a button associated with a withdrawal of unique amount and notes mix.\r\n* `Transfercardbillpayment` - Transfer for payment of bills.\r\n* `Transferfromcash` - Transfer from cash deposit.\r\n* `Transferfromcheque` - Transfer from cheque deposit.\r\n* `Transferfundsdisbursementgeneral` - Transfer for general disbursement.\r\n* `Transfergovernmentdisbursement` - Transfer for government disbursement.\r\n* `Transfermerchantdisbursement` - Transfer for merchant disbursement.\r\n* `Transferpayrollpensiondisbursement` - Transfer for payroll pension disbursement.\r\n* `Nonrefundable` - Payment of goods or services which are not refundable, for instance low cost airline tickets.\r\n* `Instant` - Instant transaction.\r\n* `Creditadjustement` - Credit adjustment to a previous transaction.\r\n* `Debitadjustement` - Debit adjustment to a previous transaction.\r\n* `Createcertificate` - Creation of an X.509 certificate with the public key and the information of the owner of the asymmetric key provided by the requestor.\r\n* `Renewcerificate` - Renewal of an X.509 certificate, protected by the certificate to renew.\r\n* `Revokecertificate` - Revocation of an active X.509 certificate.\r\n* `Addwhitelist` - Add a POI in the white list of the terminal manager.\r\n* `Removewhitelist` - Remove a POI from the white list of the terminal manager.\r\n* `Cardinitiatingdirectdebit` - Direct Debit initiated by Card.\r\n* `Guaranteeofpayment` - Acceptor claims for guarantee of payment.\r\n"
    cardpaymenttransaction:
      type: object
      properties:
        Amount:
          $ref: '#/components/schemas/amount'
        MerchantLocation:
          $ref: '#/components/schemas/location'
        DebitCreditDirection:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        CardTransactionChannel:
          $ref: '#/components/schemas/transactionchanneltypevalues'
        PointOfInteraction:
          $ref: '#/components/schemas/pointofservice'
        CardTransactionDateTime:
          $ref: '#/components/schemas/datetime'
        CardTransactionEnvironmentType:
          $ref: '#/components/schemas/transactionenvironmenttypevalues'
        MerchantCountry:
          $ref: '#/components/schemas/country'
        CardNetwork:
          $ref: '#/components/schemas/cardnetwork'
        AmountQualifier:
          $ref: '#/components/schemas/amountqualifiertypevalues'
        CardPaymentStatus:
          $ref: '#/components/schemas/status'
        CardTransactionCategory:
          $ref: '#/components/schemas/cardtransactioncategorytypevalues'
        CardPaymentTransactionIdentification:
          $ref: '#/components/schemas/cardpaymenttransactionidentification'
        CardPaymentTransactionServiceType:
          $ref: '#/components/schemas/cardpaymenttransactionservicetypevalues'
      description: Reference to the card transaction as recorded by issuer and/or acquirer
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: The account number associated with the card transaction
    issueddevicestatustypevalues:
      enum:
        - Issued
        - IssuedButNotActivated
        - Activated
        - Suspended
        - Retrieved
      type: string
      description: ">\r\n* `Issued` - \r\n* `IssuedButNotActivated` - \r\n* `Activated` - \r\n* `Suspended` - \r\n* `Retrieved` - \r\n"
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: Reference to the device that is issued
    branch:
      type: object
      properties:
        BranchIdentification:
          $ref: '#/components/schemas/identifier'
        BranchLegalEntityIdentification:
          $ref: '#/components/schemas/identifier'
        BranchAddress:
          $ref: '#/components/schemas/address'
        BranchName:
          $ref: '#/components/schemas/name'
      description: "Bank branch associated with the merchant account for booking purposes ||\r\n|"
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: The product or service to which the Issued Device will be attached
    devicecustomizationtypevalues:
      enum:
        - CardDesign
      type: string
      description: ">\r\n* `CardDesign` - \r\n"
    issueddevice:
      type: object
      properties:
        IssuedDeviceStatus:
          $ref: '#/components/schemas/issueddevicestatustypevalues'
        IssuedDevicePartyReference:
          $ref: '#/components/schemas/party'
        IssuedDeviceConfiguration:
          $ref: '#/components/schemas/text'
        IssuedDeviceReference:
          $ref: '#/components/schemas/device'
        IssuedDeviceValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        IssuedDeviceDeliveryMethod:
          $ref: '#/components/schemas/text'
        DeviceIssueDate:
          $ref: '#/components/schemas/datetime'
        IssuedDeviceCollectLocation:
          $ref: '#/components/schemas/branch'
        IssuedDeviceProductReference:
          $ref: '#/components/schemas/bankingproduct'
        IssedDeviceCustomizationType:
          $ref: '#/components/schemas/devicecustomizationtypevalues'
      description: Reference to the issued device submitted to authorize the transaction (e.g. card number)
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goaltypevalues:
      enum:
        - Short-TermGoal
        - Long-TermGoal
        - BusinessGoal
        - PerformanceGoal
        - FinancialGoal
        - OutcomeGoal
        - SMARTGoal
      type: string
      description: ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
    goaldatetimetypevalues:
      enum:
        - SettingDate
        - PlanningDate
        - StartDate
        - ReviewDate
        - CompletionDate
      type: string
      description: ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
    goaldatetime:
      type: object
      properties:
        GoalDateAndTime:
          $ref: '#/components/schemas/datetime'
        GoalDateAndTimeType:
          $ref: '#/components/schemas/goaldatetimetypevalues'
      description: 'The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date.'
    goalstatustypevalues:
      enum:
        - Setting
        - Planning
        - Execution
        - MonitoringAndEvaluation
        - CompletionOrAchievement
        - MaintenanceOrSustainment
        - ClosureOrRenewal
      type: string
      description: ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
    goalstatus:
      type: object
      properties:
        GoalStatus:
          $ref: '#/components/schemas/status'
        GoalStatusType:
          $ref: '#/components/schemas/goalstatustypevalues'
      description: 'The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal'
    goal:
      type: object
      properties:
        GoalType:
          $ref: '#/components/schemas/goaltypevalues'
        GoalDefinition:
          $ref: '#/components/schemas/text'
        GoalName:
          $ref: '#/components/schemas/name'
        GoalDateAndTime:
          $ref: '#/components/schemas/goaldatetime'
        GoalStatus:
          $ref: '#/components/schemas/goalstatus'
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
        - DevelopmentPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n* `DevelopmentPlan` - \r\n"
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: The applied currency conversion charge
    authorization:
      type: object
      properties:
        Authorization:
          type: string
          description: "An evaluation whether a party or system is allowed to do something.\n\nThe consent given by a participant (or a third party acting on behalf of that participant) in order to transfer funds or securities. (ECB)\n\nAuthorization is a mechanism by which a computer system determines whether to allow or deny specific action to a user. Authorization is often controlled by rather complex rules and algorithms, usually specified as part of an access control model. Authorization often follows (and required) authentication, however, authentication and authorization are two separate mechanisms. In rare cases, \"authorization\" is understood as a process of allowing access, granting permissions or giving approval. Such as \"authorization\" of a request to join a group. (ISO/IEC 24760-1:2019 - IT Security and Privacy)"
          format: class
      description: 'Details the reference, amount, timestamp of the transaction authorization'
    Clearing:
      type: object
      properties:
        CardTransactionRecordReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
        CardTransactionProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        CardHolderReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionIssuedDeviceReference:
          $ref: '#/components/schemas/issueddevice'
        CardTransactionNetworkReference:
          $ref: '#/components/schemas/cardnetwork'
        CardTransactionIssuingBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionMerchantAcquiringBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        CardTransactionCurrency:
          $ref: '#/components/schemas/currencycode'
        CardTransactionAmountType:
          $ref: '#/components/schemas/amounttypevalues'
        CardTransactionAmount:
          $ref: '#/components/schemas/amount'
        CardTransactionMerchantReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionLocationReference:
          $ref: '#/components/schemas/location'
        CardTransactionProductandServiceReference:
          $ref: '#/components/schemas/bankingproduct'
        CardTransactionDateandTime:
          $ref: '#/components/schemas/datetime'
        CardTransactionFXConversionCharge:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionInterchargeFee:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionAuthorizationRecord:
          $ref: '#/components/schemas/authorization'
      description: The product features/services available with a financical facility
    chargebackinstruction:
      type: object
      properties:
        ChargebackInstruction:
          type: string
          description: 'An instruction to book chargeback for the transaction. '
          format: class
      description: Details the instruction received from Card Case to book chargeback for the transaction - could be partial chargeback - amount is detailed in instruction
    cardholder:
      type: object
      properties:
        CardHolderIdentifier:
          type: string
          description: 'Identifier of the card holder. '
          format: string
      description: The identity of the account holder submitting the transaction
    Chargeback:
      type: object
      properties:
        CardTransactionRecordReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
        ChargebackInstruction:
          $ref: '#/components/schemas/chargebackinstruction'
        CardTransactionProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        CardHolderReference:
          $ref: '#/components/schemas/cardholder'
        CardTransactionIssuedDeviceReference:
          $ref: '#/components/schemas/issueddevice'
        CardTransactionNetworkReference:
          $ref: '#/components/schemas/cardnetwork'
        CardTransactionIssuingBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionMerchantAcquiringBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        CardTransactionCurrency:
          $ref: '#/components/schemas/currencycode'
        CardTransactionAmountType:
          $ref: '#/components/schemas/amounttypevalues'
        CardTransactionAmount:
          $ref: '#/components/schemas/amount'
        CardTransactionMerchantReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionLocationReference:
          $ref: '#/components/schemas/location'
        CardTransactionProductandServiceReference:
          $ref: '#/components/schemas/bankingproduct'
        CardTransactionDateandTime:
          $ref: '#/components/schemas/datetime'
        CardTransactionFXConversionCharge:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionInterchargeFee:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionAuthorizationRecord:
          $ref: '#/components/schemas/authorization'
      description: The product features/services available with a financical facility
    accountstatementtypevalues:
      enum:
        - AccountClosure
        - AccountOpening
        - Annual
        - Interim
        - RegularPeriodic
      type: string
      description: ">\r\n* `AccountClosure` - \r\n* `AccountOpening` - \r\n* `Annual` - \r\n* `Interim` - \r\n* `RegularPeriodic` - \r\n"
    accountstatement:
      type: object
      properties:
        AccountStatementBalanceType:
          $ref: '#/components/schemas/balancetypevalues'
        AccountStatementBalance:
          $ref: '#/components/schemas/accountbalance'
        'AccountStatementIdentification,':
          $ref: '#/components/schemas/identifier'
        AccountStatementType:
          $ref: '#/components/schemas/accountstatementtypevalues'
        AccountStatementContentType:
          $ref: '#/components/schemas/text'
        AccountStatementPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AccountStatementContent:
          $ref: '#/components/schemas/text'
        AccountStatementCreationDate:
          $ref: '#/components/schemas/datetime'
      description: The settlement account statement for the processing window - used to confirm payments
    Settlement:
      type: object
      properties:
        ParticipantMerchantAcquirerBankReference:
          $ref: '#/components/schemas/involvedparty'
        ParticipantIssuerBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardFinancialSettlementServicePaymentAdviceRecord:
          $ref: '#/components/schemas/text'
        ParticipantPaymentTransaction:
          $ref: '#/components/schemas/cardpaymenttransaction'
        ParticipantAcquirerBankSettlementAccountStatement:
          $ref: '#/components/schemas/accountstatement'
      description: The product features/services available with a financical facility
    merchantagreement:
      type: object
      properties:
        MerchantAgreement:
          type: string
          description: "An agreement between Acquiring Bank and Merchant for handling the Merchant Account and the specific terms and conditions for the merchant. \n\nA written contract between a merchant and an acquirer to honor or accept credit cards, or to transmit or process for payment credit card payments, for the purchase of goods or services or a charitable contribution. (Law and Legal Definition)\n\n"
          format: class
      description: "Reference to the merchant facility product instance ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: Operational terms governing the merchant facility Obligation|Obligation (https://www.iso20022.org/standardsrepository/type/Obligation)|Standard|ISO20022 BM ()
    limittypevalues:
      enum:
        - Multilateral
        - Bilateral
        - Netbilateral
        - Indirectbilateral
        - Global
        - Mandatorybilateral
        - Discretionarybilateral
        - Directdebit
        - Singlecustomerdirectdebit
        - Singlefinancialinstitutiondirectdebit
        - Totaldailycustomerdirectdebit
        - Totaldailyfinancialinstitutiondirectdebit
        - Autocollateralisation
        - Unsecuredcredit
        - Externalguarantee
      type: string
      description: The type of limit  LimitTypeCode|LimitTypeCode (https://www.iso20022.org/standardsrepository/type/LimitTypeCode)|Standard|ISO20022 BM ()
    limitstatustypevalues:
      enum:
        - Enabled
        - Disabled
        - Deleted
        - Requested
      type: string
      description: ">\r\n* `Enabled` - Limit is currently in effect.\r\n* `Disabled` - Limit is not currently in effect.\r\n* `Deleted` - Limit has been deleted or suspended.\r\n* `Requested` - Limit has been asked for and is not yet enabled.\r\n"
    limitstatus:
      type: object
      properties:
        LimitStatus:
          $ref: '#/components/schemas/status'
        LimitStatusType:
          $ref: '#/components/schemas/limitstatustypevalues'
      description: Current status of the limit.
    frequencytypevalues:
      enum:
        - Annual
        - Monthly
        - Quarterly
        - Semiannual
        - Weekly
        - Daily
        - Adhoc
        - Intraday
        - Overnight
        - Tendays
        - Fortnightly
        - Triggeredbymovement
        - Never
        - Rate
        - Oncreditevent
        - Upfront
        - Onexpiry
        - Hourly
      type: string
      description: ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n* `Semiannual` - Event takes place every six months or two times a year.\r\n* `Weekly` - Event takes place once a week.\r\n* `Daily` - Event takes place every day.\r\n* `Adhoc` - Event takes place on request or as necessary.\r\n* `Intraday` - Event takes place several times a day.\r\n* `Overnight` - Event takes place overnight.\r\n* `Tendays` - Event takes place every ten business days.\r\n* `Fortnightly` - Event takes place every two weeks.\r\n* `Triggeredbymovement` - Event takes place at the end of the day if there was a movement on the account, otherwise nothing is sent that day.\r\n* `Never` - Event does never take place.\r\n* `Rate` - Event takes place based on a change of a rate.\r\n* `Oncreditevent` - Event occurs due to a credit event occurring for an issuer.\r\n* `Upfront` - Event that takes place at the initiation of a trade or agreement.\r\n* `Onexpiry` - Event occurs on expiry of a financial contract.\r\n* `Hourly` - Event takes place every hours.\r\n"
    frequency:
      type: object
      properties:
        FrequencyCode:
          $ref: '#/components/schemas/frequencytypevalues'
        FrequencyName:
          $ref: '#/components/schemas/name'
        FrequencyDefinition:
          $ref: '#/components/schemas/text'
      description: Specifies the periodicity linked to a limit for example the periodicity can indicate that the limit can be reached daily or monthly. (ISO20022)
    limitarrangement:
      type: object
      properties:
        LimitType:
          $ref: '#/components/schemas/limittypevalues'
        LimitCurrency:
          $ref: '#/components/schemas/currencycode'
        LimitValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LimitAmount:
          $ref: '#/components/schemas/amount'
        LimitStatus:
          $ref: '#/components/schemas/limitstatus'
        LimitRate:
          $ref: '#/components/schemas/rate'
        LimitFrequency:
          $ref: '#/components/schemas/frequency'
        LimitIdentification:
          $ref: '#/components/schemas/identifier'
        LimitStartDatetime:
          $ref: '#/components/schemas/datetime'
        LimitCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        LimitAmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: The associated limit settings and rules Limit|Limit (https://www.iso20022.org/standardsrepository/type/Limit)|Standard|ISO20022 (https://www.iso20022.org/)
    MerchantAcquiringFacility:
      type: object
      properties:
        ProductInstanceReference:
          $ref: '#/components/schemas/merchantagreement'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        PartyReference:
          $ref: '#/components/schemas/involvedparty'
        BankBranchLocationReference:
          $ref: '#/components/schemas/branch'
        AccountCurrency:
          $ref: '#/components/schemas/currencycode'
        TaxReference:
          $ref: '#/components/schemas/identifier'
        MerchantAcquiringFacilityOperationalTerms:
          $ref: '#/components/schemas/arrangement'
        LimitSettings:
          $ref: '#/components/schemas/limitarrangement'
        LimitValue:
          $ref: '#/components/schemas/value'
        LimitType:
          $ref: '#/components/schemas/limittypevalues'
      description: 'Fulfill any scheduled and ad-hoc obligations under a service arrangement, most typically for a financial product or facility within Merchant Acquiring Facility. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    MerchantAcquiringFacility:
      description: MerchantAcquiringFacility
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MerchantAcquiringFacility'
    MerchantAccount:
      description: MerchantAccount
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MerchantAccount'
    Clearing:
      description: Clearing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Clearing'
    Chargeback:
      description: Chargeback
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chargeback'
    Settlement:
      description: Settlement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
    ServiceFee:
      description: ServiceFee
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceFee'
  parameters:
    merchantacquiringfacilityid:
      name: merchantacquiringfacilityid
      in: path
      required: true
      style: simple
      schema:
        type: string
    merchantaccountid:
      name: merchantaccountid
      in: path
      required: true
      style: simple
      schema:
        type: string
    clearingid:
      name: clearingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    chargebackid:
      name: chargebackid
      in: path
      required: true
      style: simple
      schema:
        type: string
    settlementid:
      name: settlementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    servicefeeid:
      name: servicefeeid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    MerchantAcquiringFacility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MerchantAcquiringFacility'
      required: true
    Clearing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Clearing'
      required: true
    Chargeback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chargeback'
      required: true
    Settlement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
      required: true
    ServiceFee:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceFee'
      required: true