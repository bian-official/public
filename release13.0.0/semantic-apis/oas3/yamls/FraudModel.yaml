openapi: 3.0.1
info:
  title: Fraud Model
  description: 'This service domain handles the design and maintenance of a portfolio of fraud models used across all production activity to detect potential fraud on the part of customers, merchants and other involved parties'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/FraudModel/13.0.0
paths:
  /FraudModel/Create:
    post:
      tags:
        - CR - FraudModelSpecification
      summary: CrCR Create or register an imported fraud model
      description: CrCR Create or register an imported fraud model
      operationId: Create
      requestBody:
        $ref: '#/components/requestBodies/FraudModelSpecification'
      responses:
        '200':
          $ref: '#/components/responses/FraudModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Execute':
    put:
      tags:
        - CR - FraudModelSpecification
      summary: ExCR Automatically download a fraud model
      description: ExCR Automatically download a fraud model
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
      requestBody:
        $ref: '#/components/requestBodies/FraudModelSpecification'
      responses:
        '200':
          $ref: '#/components/responses/FraudModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Request':
    put:
      tags:
        - CR - FraudModelSpecification
      summary: RqCR Request the use of a fraud model
      description: RqCR Request the use of a fraud model
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
      requestBody:
        $ref: '#/components/requestBodies/FraudModelSpecification'
      responses:
        '200':
          $ref: '#/components/responses/FraudModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Retrieve':
    get:
      tags:
        - CR - FraudModelSpecification
      summary: ReCR Retrieve details about a fraud model
      description: ReCR Retrieve details about a fraud model
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
      responses:
        '200':
          $ref: '#/components/responses/FraudModelSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/FunctionalRequirements/{functionalrequirementsid}/Update':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: UpBQ Update the requirements or other properties of a model
      description: UpBQ Update the requirements or other properties of a model
      operationId: UpdateFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/FunctionalRequirements/{functionalrequirementsid}/Exchange':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: EcBQ accept or reject requirements for a fraud model
      description: EcBQ accept or reject requirements for a fraud model
      operationId: ExchangeFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/FunctionalRequirements/{functionalrequirementsid}/Capture':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: CaBQ Capture usage reports for a fraud model
      description: CaBQ Capture usage reports for a fraud model
      operationId: CaptureFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/FunctionalRequirements/{functionalrequirementsid}/Request':
    put:
      tags:
        - BQ - FunctionalRequirements
      summary: RqBQ Request changes or improvements to a model
      description: RqBQ Request changes or improvements to a model
      operationId: RequestFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      requestBody:
        $ref: '#/components/requestBodies/FunctionalRequirements'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/FunctionalRequirements/{functionalrequirementsid}/Retrieve':
    get:
      tags:
        - BQ - FunctionalRequirements
      summary: ReBQ Retrieve details about the model specification and properties
      description: ReBQ Retrieve details about the model specification and properties
      operationId: RetrieveFunctionalRequirements
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/functionalrequirementsid'
      responses:
        '200':
          $ref: '#/components/responses/FunctionalRequirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Testing/{testingid}/Update':
    put:
      tags:
        - BQ - Testing
      summary: UpBQ Update user testing content
      description: UpBQ Update user testing content
      operationId: UpdateTesting
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/testingid'
      requestBody:
        $ref: '#/components/requestBodies/Testing'
      responses:
        '200':
          $ref: '#/components/responses/Testing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Testing/{testingid}/Exchange':
    put:
      tags:
        - BQ - Testing
      summary: EcBQ Accept or reject testing results
      description: EcBQ Accept or reject testing results
      operationId: ExchangeTesting
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/testingid'
      requestBody:
        $ref: '#/components/requestBodies/Testing'
      responses:
        '200':
          $ref: '#/components/responses/Testing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Testing/{testingid}/Retrieve':
    get:
      tags:
        - BQ - Testing
      summary: ReBQ Retrieve details and testing results
      description: ReBQ Retrieve details and testing results
      operationId: RetrieveTesting
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/testingid'
      responses:
        '200':
          $ref: '#/components/responses/Testing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Production/{productionid}/Execute':
    put:
      tags:
        - BQ - Production
      summary: ExBQ Get automated support for model deployment
      description: ExBQ Get automated support for model deployment
      operationId: ExecuteProduction
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/productionid'
      requestBody:
        $ref: '#/components/requestBodies/Production'
      responses:
        '200':
          $ref: '#/components/responses/Production'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Production/{productionid}/Request':
    put:
      tags:
        - BQ - Production
      summary: RqBQ Request production support for a deployed model
      description: RqBQ Request production support for a deployed model
      operationId: RequestProduction
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/productionid'
      requestBody:
        $ref: '#/components/requestBodies/Production'
      responses:
        '200':
          $ref: '#/components/responses/Production'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/FraudModel/{fraudmodelid}/Production/{productionid}/Retrieve':
    get:
      tags:
        - BQ - Production
      summary: ReBQ Retrieve details and documentation covering model production deployment
      description: ReBQ Retrieve details and documentation covering model production deployment
      operationId: RetrieveProduction
      parameters:
        - $ref: '#/components/parameters/fraudmodelid'
        - $ref: '#/components/parameters/productionid'
      responses:
        '200':
          $ref: '#/components/responses/Production'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: "Recorded details of a deployment task ||\r\n|"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: 'The name of service. '
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "Release version of available model plus version history as appropriate ||\r\n|"
    servicetypevalues:
      enum:
        - ITService
        - AdministrativeService
        - SystemService
        - FinancialService
        - InformationService
        - BusinessService
      type: string
      description: ">\r\n* `ITService` - \r\n* `AdministrativeService` - \r\n* `SystemService` - \r\n* `FinancialService` - \r\n* `InformationService` - \r\n* `BusinessService` - \r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Entity that assigns and manages the identification.
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: The identifier of service.
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The operational and development status of the model (e.g. under development, available, under review) Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()'
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This feature calculates and tracks interest earnings or charges on accounts, loans, or investments over time.\r\n* `WithdrawalFeature` - The withdraw feature typically refers to an option or functionality that allows users to retrieve or remove something from a system or platform.\r\n* `DepositFeature` - This refers to a functionality that allows users to add funds to an account or system, often by transferring money from another source.\r\n* `SweepFeature` - \r\n* `LienFeature` - \r\n* `PaymentFeature` - This refers to the functionality that facilitates or tracks the transfer of funds for a purchase or settlement of dues.\r\n* `RepaymentFeature` - This feature facilitates or manages the process of paying back borrowed funds, such as loans, credit card balances, or advances.\r\n* `LimitFeature` - This feature sets, monitors, or enforces restrictions on the maximum amount that can be accessed, spent, or transacted within a system.\r\n* `OverdraftFeature` - This functionality allows users to withdraw more money than what is available in their account balance, often up to a predefined limit.\r\n* `StatementFeature` - The statement feature refers to a functionality in banking, finance, or digital platforms that provides users with a detailed record of their transactions or activities over a specific period.\r\n* `CurrencyExchangeFeature` - This feature enables users to convert funds from one currency to another at prevailing exchange rates, often within financial or payment platforms.\r\n* `PriceFeature` - This feature involves displaying or managing the price of goods, services, or financial instruments within a platform.\r\n"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: A characteristic of service which refers 1) mainly to the function or condition of service. 2) to non-functional features like quality and security
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        ServiceIdentification:
          $ref: '#/components/schemas/identifier'
        ServiceLifecycleStatus:
          $ref: '#/components/schemas/status'
        ServiceFeature:
          $ref: '#/components/schemas/feature'
      description: Reference to external service information provider used to obtain example production data for design
    FunctionalRequirements:
      type: object
      properties:
        FraudModelDesignTaskReference:
          $ref: '#/components/schemas/task'
        FraudModelDesignTaskRecord:
          $ref: '#/components/schemas/task'
        CustomerMarketDataServiceReference:
          $ref: '#/components/schemas/service'
        CustomerMarketDataRecord:
          type: string
          description: Record of example production data file
          format: object
        FraudModelFeedbackRecord:
          type: string
          description: 'User provided and solicited feedback, suggestions for model refinement'
          format: object
        FraudModelRequirementsSpecification:
          $ref: '#/components/schemas/text'
      description: "The main design elements/views making up the overall specification\n\nExamples: Business Requirements"
    requirement:
      type: object
      properties:
        RequirementType:
          type: string
          description: ''
          format: string
      description: Specification of the operational and technical requirements
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its actions in pursuit of long-term goals. (Business Dictionary)\n\r\n* `Regulation` - A rule used to carry out a law (FIBO)\n\nBusiness Dictionary: a rule (with or without the coercive power of law) employed in controlling, directing, or managing an activity, organization, or system. \n\nThe set of rules and legislation governing certain actions. \nhttps://financial-dictionary.thefreedictionary.com/Regulatory\r\n* `Law` - A binding rule that the courts will enforce.\nA system of rules and guidelines which are enforced through social institutions to govern behavior. (FIBO)\n\r\n* `Guideline` - A recommended practice (adapted from Business Dictionary)\nA general rule, principle, or piece of advice.\r\n* `Criterion` - A principle or standard by which something may be judged or decided.\n\nRead more: http://www.businessdictionary.com/definition/criterion.html\r\n* `Standard` - A rule considered by an authority or by general consent as a basis of comparison\r\n"
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: Provides guidance on the use of the model
    Production:
      type: object
      properties:
        FraudModelOperationalRequirements:
          $ref: '#/components/schemas/requirement'
        FraudModelAllowedUsage:
          type: string
          description: Defines rules and suitability for model usage
          format: object
        FraudModelUsageGuidelines:
          $ref: '#/components/schemas/ruleset'
      description: "The main design elements/views making up the overall specification\n\nExamples: Business Requirements"
    modeltest:
      type: object
      properties:
        ModelTestType:
          type: string
          description: "Defines the type of test (e.g. unit, integration, load, user acceptance etc.)\n"
          format: string
        ModelTestHarness:
          type: string
          description: "Reference to the testing environment used to apply the test.\n"
          format: string
        ModelTestActivity:
          type: string
          description: ''
          format: string
        ModelTestResult:
          type: string
          description: ''
          format: string
      description: Reference to a type of test
    testtypevalues:
      enum:
        - ProductEligibilityTest
        - NextBestProductTest
        - IssuedDeviceTest
        - CardHolderAuthenticationTest
        - CardFundsAvailableTest
        - CardTransactionFraudTest
        - CardStand-InAuthorizationTest
        - ExternalAccessRequestTest
        - SuitabilityTest
        - LegalComplianceTest
        - RegulatoryComplianceTest
        - SystemFunctionalTest
        - SystemProductionTest
        - SystemBusinessRiskTest
        - SystemOperationsTest
        - CreditPolicyComplianceTest
        - RuleSetAndDecisionTreeTest
        - ModelBasedTests
        - AssetAndLiabilityValuationTest
        - LiquidityAndCashFlowTest
        - RiskTest
        - SensitivityTest
      type: string
      description: ">\r\n* `ProductEligibilityTest` - \r\n* `NextBestProductTest` - \r\n* `IssuedDeviceTest` - \r\n* `CardHolderAuthenticationTest` - \r\n* `CardFundsAvailableTest` - \r\n* `CardTransactionFraudTest` - \r\n* `CardStand-InAuthorizationTest` - \r\n* `ExternalAccessRequestTest` - \r\n* `SuitabilityTest` - \r\n* `LegalComplianceTest` - \r\n* `RegulatoryComplianceTest` - \r\n* `SystemFunctionalTest` - \r\n* `SystemProductionTest` - \r\n* `SystemBusinessRiskTest` - \r\n* `SystemOperationsTest` - \r\n* `CreditPolicyComplianceTest` - \r\n* `RuleSetAndDecisionTreeTest` - \r\n* `ModelBasedTests` - \r\n* `AssetAndLiabilityValuationTest` - \r\n* `LiquidityAndCashFlowTest` - \r\n* `RiskTest` - \r\n* `SensitivityTest` - \r\n"
    test:
      type: object
      properties:
        TestResult:
          $ref: '#/components/schemas/text'
        TestGuidance:
          $ref: '#/components/schemas/text'
        TestType:
          $ref: '#/components/schemas/testtypevalues'
        TestDescription:
          $ref: '#/components/schemas/text'
      description: Reference to a compliance task performed against the specification
    Testing:
      type: object
      properties:
        FraudModelTestReference:
          $ref: '#/components/schemas/modeltest'
        FraudModelTestType:
          $ref: '#/components/schemas/text'
        FraudModelTestHarnessReference:
          type: string
          description: Reference to the testing environment used to apply the test
          format: object
        FraudModelTestResult:
          $ref: '#/components/schemas/modeltest'
        FraudModelTestingTaskReference:
          $ref: '#/components/schemas/task'
        FraudModelTestingTaskRecord:
          $ref: '#/components/schemas/task'
        FraudModelComplianceTaskReference:
          $ref: '#/components/schemas/task'
        FraudModelComplianceTaskRecord:
          $ref: '#/components/schemas/task'
        FraudModelComplianceTestReference:
          $ref: '#/components/schemas/test'
        FraudModelComplianceTestType:
          $ref: '#/components/schemas/text'
      description: "The main design elements/views making up the overall specification\n\nExamples: Business Requirements"
    businessunit:
      type: object
      properties:
        BusinessFunction:
          type: string
          description: ''
          format: string
        Goal:
          type: string
          description: ''
          format: string
      description: "Reference to the business units where the model is deployed and in use ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: Details of the deployment for reference Obligation|Obligation (https://www.iso20022.org/standardsrepository/type/Obligation)|Standard|ISO20022 BM ()
    modelusage:
      type: object
      properties:
        ModelUsage:
          type: string
          description: The use of a model over a specified time period.
          format: class
      description: "Tracking deployment and usage frequency ||\r\n|"
    fraudmodel:
      type: object
      properties:
        FraudModel:
          type: string
          description: "A model used across all production activity to detect the potential fraud\n\nModel is used to facilitate identifying out of pattern transactions or events and their fraud risk score. "
          format: class
      description: "The deployable model in any appropriate form (including historical versions as appropriate) ||\r\n|"
    FraudModelSpecification:
      type: object
      properties:
        FraudModelType:
          $ref: '#/components/schemas/text'
        FraudModelPurpose:
          $ref: '#/components/schemas/text'
        FraudModelDeployment:
          type: string
          description: Maintains the current deployment configuration of the model
          format: object
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/businessunit'
        FraudModelDeploymentConfiguration:
          $ref: '#/components/schemas/arrangement'
        FraudModelDeploymentTaskReference:
          $ref: '#/components/schemas/task'
        FraudModelDeploymentTaskRecord:
          $ref: '#/components/schemas/task'
        FraudModelStatus:
          $ref: '#/components/schemas/status'
        FraudModelUsage:
          $ref: '#/components/schemas/modelusage'
        FraudModelImpact:
          type: string
          description: Track reporting of the impact/accuracy of the model's insights
          format: object
        FraudModelVersion:
          $ref: '#/components/schemas/text'
        FraudModel:
          $ref: '#/components/schemas/fraudmodel'
      description: "Create and maintain a design for a procedure, product/service model or other such entity  within Fraud Model. \nExample: Create and maintain product designs and analytical models."
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    FraudModelSpecification:
      description: FraudModelSpecification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FraudModelSpecification'
    FunctionalRequirements:
      description: FunctionalRequirements
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FunctionalRequirements'
    Testing:
      description: Testing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Testing'
    Production:
      description: Production
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Production'
  parameters:
    fraudmodelid:
      name: fraudmodelid
      in: path
      required: true
      style: simple
      schema:
        type: string
    functionalrequirementsid:
      name: functionalrequirementsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    testingid:
      name: testingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    productionid:
      name: productionid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    FraudModelSpecification:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FraudModelSpecification'
      required: true
    FunctionalRequirements:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FunctionalRequirements'
      required: true
    Testing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Testing'
      required: true
    Production:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Production'
      required: true