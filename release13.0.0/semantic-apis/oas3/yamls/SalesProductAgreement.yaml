openapi: 3.0.1
info:
  title: Sales Product Agreement
  description: This service domain maintains a structured legal agreement defining the contractual terms and conditions for an in-force product for a customer. It is subordinate to the customer's master agreement that is maintained by the Customer Agreement service domain
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/SalesProductAgreement/13.0.0
paths:
  /SalesProductAgreement/Evaluate:
    post:
      tags:
        - CR - SalesProductAgreement
      summary: EvCR Establish a sales product agreement
      description: EvCR Establish a sales product agreement
      operationId: Evaluate
      requestBody:
        $ref: '#/components/requestBodies/SalesProductAgreement'
      responses:
        '200':
          $ref: '#/components/responses/SalesProductAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/Update':
    put:
      tags:
        - CR - SalesProductAgreement
      summary: UpCR Update details of an active sales product agreement
      description: UpCR Update details of an active sales product agreement
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/SalesProductAgreement'
      responses:
        '200':
          $ref: '#/components/responses/SalesProductAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/Control':
    put:
      tags:
        - CR - SalesProductAgreement
      summary: CoCR Control the processing of an agreement
      description: CoCR Control the processing of an agreement
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/SalesProductAgreement'
      responses:
        '200':
          $ref: '#/components/responses/SalesProductAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/Exchange':
    put:
      tags:
        - CR - SalesProductAgreement
      summary: 'EcCR Accept, reject etc an agreement'
      description: 'EcCR Accept, reject etc an agreement'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/SalesProductAgreement'
      responses:
        '200':
          $ref: '#/components/responses/SalesProductAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/Request':
    put:
      tags:
        - CR - SalesProductAgreement
      summary: RqCR Request check of a proposed activity is compatible
      description: RqCR Request check of a proposed activity is compatible
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/SalesProductAgreement'
      responses:
        '200':
          $ref: '#/components/responses/SalesProductAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/Grant':
    put:
      tags:
        - CR - SalesProductAgreement
      summary: GrCR Obtain grant authority to act under the terms of the agreement
      description: GrCR Obtain grant authority to act under the terms of the agreement
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/SalesProductAgreement'
      responses:
        '200':
          $ref: '#/components/responses/SalesProductAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/Retrieve':
    get:
      tags:
        - CR - SalesProductAgreement
      summary: ReCR Retrieve details about a sales product agreement
      description: ReCR Retrieve details about a sales product agreement
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      responses:
        '200':
          $ref: '#/components/responses/SalesProductAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/LegalTerms/Evaluate':
    post:
      tags:
        - BQ - LegalTerms
      summary: EvBQ Establish the legal terms for a sales product agreement
      description: EvBQ Establish the legal terms for a sales product agreement
      operationId: EvaluateLegalTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/LegalTerms'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/LegalTerms/{legaltermsid}/Update':
    put:
      tags:
        - BQ - LegalTerms
      summary: UpBQ Update the legal terms for a sales product agreement
      description: UpBQ Update the legal terms for a sales product agreement
      operationId: UpdateLegalTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
        - $ref: '#/components/parameters/legaltermsid'
      requestBody:
        $ref: '#/components/requestBodies/LegalTerms'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/LegalTerms/{legaltermsid}/Retrieve':
    get:
      tags:
        - BQ - LegalTerms
      summary: ReBQ Retrieve details about the legal terms of an agreement
      description: ReBQ Retrieve details about the legal terms of an agreement
      operationId: RetrieveLegalTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
        - $ref: '#/components/parameters/legaltermsid'
      responses:
        '200':
          $ref: '#/components/responses/LegalTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/RegulatoryTerms/Evaluate':
    post:
      tags:
        - BQ - RegulatoryTerms
      summary: EvBQ Establish the regulatory terms for a sales product agreement
      description: EvBQ Establish the regulatory terms for a sales product agreement
      operationId: EvaluateRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/RegulatoryTerms'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/RegulatoryTerms/{regulatorytermsid}/Update':
    put:
      tags:
        - BQ - RegulatoryTerms
      summary: UpBQ Update the regulatory terms for a sales product agreement
      description: UpBQ Update the regulatory terms for a sales product agreement
      operationId: UpdateRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
        - $ref: '#/components/parameters/regulatorytermsid'
      requestBody:
        $ref: '#/components/requestBodies/RegulatoryTerms'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/RegulatoryTerms/{regulatorytermsid}/Retrieve':
    get:
      tags:
        - BQ - RegulatoryTerms
      summary: ReBQ Retrieve details about the regulatory terms of an agreement
      description: ReBQ Retrieve details about the regulatory terms of an agreement
      operationId: RetrieveRegulatoryTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
        - $ref: '#/components/parameters/regulatorytermsid'
      responses:
        '200':
          $ref: '#/components/responses/RegulatoryTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/PolicyTerms/Evaluate':
    post:
      tags:
        - BQ - PolicyTerms
      summary: EvBQ Establish the corporate policy terms for a sales product agreement
      description: EvBQ Establish the corporate policy terms for a sales product agreement
      operationId: EvaluatePolicyTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
      requestBody:
        $ref: '#/components/requestBodies/PolicyTerms'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/PolicyTerms/{policytermsid}/Update':
    put:
      tags:
        - BQ - PolicyTerms
      summary: UpBQ Update the corporate policy terms for a sales product agreement
      description: UpBQ Update the corporate policy terms for a sales product agreement
      operationId: UpdatePolicyTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
        - $ref: '#/components/parameters/policytermsid'
      requestBody:
        $ref: '#/components/requestBodies/PolicyTerms'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SalesProductAgreement/{salesproductagreementid}/PolicyTerms/{policytermsid}/Retrieve':
    get:
      tags:
        - BQ - PolicyTerms
      summary: ReBQ Retrieve details about the corporate policy terms of an agreement
      description: ReBQ Retrieve details about the corporate policy terms of an agreement
      operationId: RetrievePolicyTerms
      parameters:
        - $ref: '#/components/parameters/salesproductagreementid'
        - $ref: '#/components/parameters/policytermsid'
      responses:
        '200':
          $ref: '#/components/responses/PolicyTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    regulatoryauthority:
      type: object
      properties:
        RegulatoryAuthority:
          type: string
          description: An organisation that is alowed to impose regulations
          format: class
      description: The applicable regulatory authority
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: ''
    regulation:
      type: object
      properties:
        RegulationDefinition:
          $ref: '#/components/schemas/text'
      description: Reference to any regulatory requirements
    RegulatoryTerms:
      type: object
      properties:
        RegulatoryAuthority:
          $ref: '#/components/schemas/regulatoryauthority'
        ApplicableRegulationReference:
          $ref: '#/components/schemas/regulation'
        ApplicableRegulationInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\n- The Regulatory Terms reflects the application of a specific rule or regulation that is an aspect of the Service Domain"
    jurisdiction:
      type: object
      properties:
        Jurisdiction:
          type: string
          description: Jurisdiction that will be assigned in case of legal dispute.
          format: class
      description: The contractual jurisdiction or coverage of the agreement (e.g. "governed by State") Jurisdiction|Jurisdiction (https://www.iso20022.org/standardsrepository/type/Jurisdiction)|Standard|ISO20022 BM ()
    law:
      type: object
      properties:
        LawType:
          $ref: '#/components/schemas/text'
        LawDescription:
          $ref: '#/components/schemas/text'
        LegalPenalty:
          $ref: '#/components/schemas/text'
        LegalGuideline:
          $ref: '#/components/schemas/text'
      description: Reference to any legal requirements
    LegalTerms:
      type: object
      properties:
        Jurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        ApplicableLawReference:
          $ref: '#/components/schemas/law'
        ApplicableLawInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\n- The Regulatory Terms reflects the application of a specific rule or regulation that is an aspect of the Service Domain"
    policytypevalues:
      enum:
        - SecurityPolicy
        - AdministrativePolicy
        - SocialPolicy
        - RegulatoryPolicy
      type: string
      description: ">\r\n* `SecurityPolicy` - \r\n* `AdministrativePolicy` - \r\n* `SocialPolicy` - \r\n* `RegulatoryPolicy` - \r\n"
    policy:
      type: object
      properties:
        PolicyType:
          $ref: '#/components/schemas/policytypevalues'
      description: Reference to the bank's policies or rules
    PolicyTerms:
      type: object
      properties:
        BankPolicy-RuleType:
          $ref: '#/components/schemas/text'
        ApplicableBankPolicy-RuleReference:
          $ref: '#/components/schemas/policy'
        ApplicableBankPolicy-RuleInterpretation:
          $ref: '#/components/schemas/text'
      description: "A collection of terms (within some jurisdiction) that can be selected and configured to define a contract /agreement\n\n- The Regulatory Terms reflects the application of a specific rule or regulation that is an aspect of the Service Domain"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: The term of the agreement DateTimePeriod|DateTimePeriod (https://www.iso20022.org/standardsrepository/type/DateTimePeriod)|Standard|ISO20022 BM ()
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the legal entity that is the subject of the agreement ||\r\n|"
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: "Reference to the specific product instance covered by the sales product agreement ||\r\n|"
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - BrokerAgreement
        - SalesAgreement
        - PurchaseAgreement
        - MaintenanceAgreement
        - ProductAgreement
        - ProductSalesAgreement
        - ResourceAgreement
      type: string
      description: "The type of customer agreement (e.g. individual, corporate) ||\r\n|"
    productserviceagreementinvolvementtypevalues:
      enum:
        - Principal
        - SecondaryOwner
        - Beneficiary
        - PowerOfAttorney
        - LegalGuardian
        - CustodianForMinor
        - SuccessorOnDeath
        - Administrator
        - OtherParty
        - Granter
        - Settlor
        - SeniorManagingOfficial
        - Protector
        - RegisteredShareholderName
      type: string
      description: ">\r\n* `Principal` - \r\n* `SecondaryOwner` - \r\n* `Beneficiary` - \r\n* `PowerOfAttorney` - \r\n* `LegalGuardian` - \r\n* `CustodianForMinor` - \r\n* `SuccessorOnDeath` - \r\n* `Administrator` - \r\n* `OtherParty` - \r\n* `Granter` - \r\n* `Settlor` - \r\n* `SeniorManagingOfficial` - \r\n* `Protector` - \r\n* `RegisteredShareholderName` - \r\n"
    productagreementinvolvement:
      type: object
      properties:
        InvolvementType:
          $ref: '#/components/schemas/productserviceagreementinvolvementtypevalues'
        PartyReference:
          $ref: '#/components/schemas/party'
        AgreementReference:
          $ref: '#/components/schemas/productagreement'
      description: "Reference to signatories ||\r\n|"
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: "Reference to any associated documents ||\r\n|"
    customeragreement:
      type: object
      properties:
        CustomerAgreement:
          type: string
          description: 'An agreement between a bank and its customer. '
          format: class
      description: "Reference to the customer master agreement that governs the product agreement ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    partyrelationshiplifecyclephase:
      type: object
      properties:
        Description:
          $ref: '#/components/schemas/text'
        IsCurrentPhase:
          $ref: '#/components/schemas/text'
        PhaseName:
          $ref: '#/components/schemas/name'
        PhaseStatus:
          $ref: '#/components/schemas/status'
        PhasePeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: "Reference to KYC/Regulatory assessments maintained elsewhere for the customer ||\r\n|"
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: "Reference to the banking product (e.g., its features, terms and conditions) Product_x000D_\n|Product (https://www.iso20022.org/standardsrepository/type/Product)|Standard|ISO20022 BM ()"
    SalesProductAgreement:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        LegalEntityReference:
          $ref: '#/components/schemas/involvedparty'
        ProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        AgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        AgreementJurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        AgreementValidFromToDate:
          $ref: '#/components/schemas/datetimeperiod'
        AgreementSignatoriesResponsibleParties:
          $ref: '#/components/schemas/productagreementinvolvement'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        CustomerAgreementReference:
          $ref: '#/components/schemas/customeragreement'
        PartyLife-cycleManagementReference:
          $ref: '#/components/schemas/partyrelationshiplifecyclephase'
        BankingProductReference:
          $ref: '#/components/schemas/bankingproduct'
      description: "Maintain the terms and conditions that apply to a commercial relationship within Sales Product Agreement.\n\n\n"
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    SalesProductAgreement:
      description: SalesProductAgreement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SalesProductAgreement'
    LegalTerms:
      description: LegalTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LegalTerms'
    RegulatoryTerms:
      description: RegulatoryTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegulatoryTerms'
    PolicyTerms:
      description: PolicyTerms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyTerms'
  parameters:
    salesproductagreementid:
      name: salesproductagreementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    legaltermsid:
      name: legaltermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    regulatorytermsid:
      name: regulatorytermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    policytermsid:
      name: policytermsid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    SalesProductAgreement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SalesProductAgreement'
      required: true
    LegalTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LegalTerms'
      required: true
    RegulatoryTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegulatoryTerms'
      required: true
    PolicyTerms:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyTerms'
      required: true