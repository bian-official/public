openapi: 3.0.1
info:
  title: Market Order Execution
  description: 'The Market Order Execution Service Domain is responsible for the booking of securities transactions (e.g. resulting from market orders or some types of corporate actions) on investment accounts, so in terms of security name plus quantity.'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/MarketOrderExecution/13.0.0
paths:
  /MarketOrderExecution/Initiate:
    post:
      tags:
        - CR - MarketTradeTransaction
      summary: InCR Initiate a market trade
      description: InCR Initiate a market trade
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/MarketTradeTransaction'
      responses:
        '200':
          $ref: '#/components/responses/MarketTradeTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Update':
    put:
      tags:
        - CR - MarketTradeTransaction
      summary: UpCR Update details on an active market trade request
      description: UpCR Update details on an active market trade request
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/MarketTradeTransaction'
      responses:
        '200':
          $ref: '#/components/responses/MarketTradeTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Request':
    put:
      tags:
        - CR - MarketTradeTransaction
      summary: RqCR Request manual intervention to an active market trade
      description: RqCR Request manual intervention to an active market trade
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/MarketTradeTransaction'
      responses:
        '200':
          $ref: '#/components/responses/MarketTradeTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Retrieve':
    get:
      tags:
        - CR - MarketTradeTransaction
      summary: ReCR Retrieve details about a market trade
      description: ReCR Retrieve details about a market trade
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
      responses:
        '200':
          $ref: '#/components/responses/MarketTradeTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Quote/Initiate':
    post:
      tags:
        - BQ - Quote
      summary: InBQ Obtain a trading quote for a proposed order
      description: InBQ Obtain a trading quote for a proposed order
      operationId: InitiateQuote
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/Quote'
      responses:
        '200':
          $ref: '#/components/responses/Quote'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Quote/{quoteid}/Retrieve':
    get:
      tags:
        - BQ - Quote
      summary: ReBQ Retrieve details about quotation activity
      description: ReBQ Retrieve details about quotation activity
      operationId: RetrieveQuote
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/quoteid'
      responses:
        '200':
          $ref: '#/components/responses/Quote'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/TradeInitiation/Initiate':
    post:
      tags:
        - BQ - TradeInitiation
      summary: InBQ Initiate a market trade
      description: InBQ Initiate a market trade
      operationId: InitiateTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
      requestBody:
        $ref: '#/components/requestBodies/TradeInitiation'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/TradeInitiation/{tradeinitiationid}/Update':
    put:
      tags:
        - BQ - TradeInitiation
      summary: UpBQ Update details of an 'executed' market trade
      description: UpBQ Update details of an 'executed' market trade
      operationId: UpdateTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/tradeinitiationid'
      requestBody:
        $ref: '#/components/requestBodies/TradeInitiation'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/TradeInitiation/{tradeinitiationid}/Exchange':
    put:
      tags:
        - BQ - TradeInitiation
      summary: 'EcBQ Accept, reject, etc a market trade'
      description: 'EcBQ Accept, reject, etc a market trade'
      operationId: ExchangeTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/tradeinitiationid'
      requestBody:
        $ref: '#/components/requestBodies/TradeInitiation'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/TradeInitiation/{tradeinitiationid}/Execute':
    put:
      tags:
        - BQ - TradeInitiation
      summary: ExBQ Execute an automated action against an active market trade
      description: ExBQ Execute an automated action against an active market trade
      operationId: ExecuteTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/tradeinitiationid'
      requestBody:
        $ref: '#/components/requestBodies/TradeInitiation'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/TradeInitiation/{tradeinitiationid}/Request':
    put:
      tags:
        - BQ - TradeInitiation
      summary: RqBQ Request manual intervention for an active market trade
      description: RqBQ Request manual intervention for an active market trade
      operationId: RequestTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/tradeinitiationid'
      requestBody:
        $ref: '#/components/requestBodies/TradeInitiation'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/TradeInitiation/{tradeinitiationid}/Retrieve':
    get:
      tags:
        - BQ - TradeInitiation
      summary: ReBQ Retrieve details about a market trade
      description: ReBQ Retrieve details about a market trade
      operationId: RetrieveTradeInitiation
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/tradeinitiationid'
      responses:
        '200':
          $ref: '#/components/responses/TradeInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Position/{positionid}/Control':
    put:
      tags:
        - BQ - Position
      summary: CoBQ Control the position trading activity
      description: CoBQ Control the position trading activity
      operationId: ControlPosition
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/positionid'
      requestBody:
        $ref: '#/components/requestBodies/Position'
      responses:
        '200':
          $ref: '#/components/responses/Position'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Position/{positionid}/Exchange':
    put:
      tags:
        - BQ - Position
      summary: 'EcBQ Accept, reject, etc wholesale position trading'
      description: 'EcBQ Accept, reject, etc wholesale position trading'
      operationId: ExchangePosition
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/positionid'
      requestBody:
        $ref: '#/components/requestBodies/Position'
      responses:
        '200':
          $ref: '#/components/responses/Position'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Position/{positionid}/Request':
    put:
      tags:
        - BQ - Position
      summary: RqBQ Request manual intervention for position management
      description: RqBQ Request manual intervention for position management
      operationId: RequestPosition
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/positionid'
      requestBody:
        $ref: '#/components/requestBodies/Position'
      responses:
        '200':
          $ref: '#/components/responses/Position'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/MarketOrderExecution/{marketorderexecutionid}/Position/{positionid}/Retrieve':
    get:
      tags:
        - BQ - Position
      summary: ReBQ Retrieve details about position wholesale trading activity
      description: ReBQ Retrieve details about position wholesale trading activity
      operationId: RetrievePosition
      parameters:
        - $ref: '#/components/parameters/marketorderexecutionid'
        - $ref: '#/components/parameters/positionid'
      responses:
        '200':
          $ref: '#/components/responses/Position'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The type of market order (e.g. Day Order. Order on Open/Close, Fill or Kill, Limit Order) ||\r\n|"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: "Key dates associated with the transaction (e.g. order capture, trade execution, order completion) ||\r\n|"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Value of the specific date type ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: Reference to the associated market trade if the order is executed in the market directly GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO20022 BM ()
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "The employee/business unit placing the market order ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The tracked and returned processing status of the market trade (e.g. pending, partially complete, complete)'
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: Details of the market trade initiation task
    TradeInitiation:
      type: object
      properties:
        WholesaleTradeReference:
          type: string
          description: 'If the market trade is not executed against the bank position, but directly in the wholesale market, this refers to the actual wholesale trading record'
          format: object
        MarketTradeTransactionInstanceProcessingStatus:
          $ref: '#/components/schemas/status'
        MarketTradeInitiationTaskResult:
          $ref: '#/components/schemas/task'
      description: The sub-tasks involved in the execution of the financial transaction
    securitytypevalues:
      enum:
        - Equity
        - Warrant
        - Entitlement
      type: string
      description: "The security to be traded ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: The terms covering the clearing and settlement of the trade
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: The document reference for the trade confirmation notice
    Position:
      type: object
      properties:
        BankSecurityPositionSecurityType:
          $ref: '#/components/schemas/securitytypevalues'
        PositionMarketOrderTradeInitiationInstanceReference:
          $ref: '#/components/schemas/identifier'
        BankSecurityPositionSecurityPAndLRecord:
          type: string
          description: 'The consolidated record of trading activity against the position during the trading period, including the derived position P&L'
          format: object
        WholesaleTrade:
          type: string
          description: The record of trades made in the wholesale markets by the bank to manage its net security position. Note for larger market orders/trades there may be a corresponding wholesale transaction as appropriate)
          format: object
        WholesaleTradeSecurityType:
          $ref: '#/components/schemas/securitytypevalues'
        WholesaleTradeVolume:
          type: string
          description: The volume of share bought/sold
          format: object
        WholesaleTradePrice:
          type: string
          description: The security and cash flow details of the trade
          format: object
        WholesaleTradeClearingandSettlementTerms:
          $ref: '#/components/schemas/arrangement'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        CorrespondenceInstanceReference:
          $ref: '#/components/schemas/identifier'
        WholesaleTradeStatus:
          $ref: '#/components/schemas/status'
      description: The sub-tasks involved in the execution of the financial transaction
    pricetypevalues:
      enum:
        - Average
        - Averageoverride
        - Combined
        - Grossofall
        - Limit
        - Net
        - Netdisclosed
        - Netofall
        - Netundisclosed
        - Notionalgross
        - Parvalue
        - Roundedaverage
        - Stop
        - Bid
        - Offer
        - Netassetvalue
        - Creation
        - Cancellation
        - Interim
        - Swing
        - Other
        - Mid
        - Reinvestment
        - Switch
        - Dailydividendrate
        - Market
        - Indicative
        - Actual
        - Nonadjustedunpublished
        - Guaranteed
        - Estimatednav
        - Grossassetvalue
        - Estimatedgav
        - Sidepocketnav
        - Ask
        - Auction
        - Calculated
        - Clean
        - Dirty
        - Draw
        - Fairvalue
        - Indicativepaid
        - Kassa
        - Paid
        - Redemptionnav
        - Settlement
        - Spread
        - Subscriptionnav
        - Tax
        - Taxableincomepersharecalculated
      type: string
      description: ">\r\n* `Average` - Price is an average execution price.\r\n* `Averageoverride` - Price is an override of the average price.\r\n* `Combined` - Price is composed of the combined expenses (used in the UK market).\r\n* `Grossofall` - Price is a gross execution price. The price is an all inclusive price, ie, including all charges, fees, and taxes.\r\n* `Limit` - Price is the limit price of a limit order, eg, a customer might put in a limit order to sell financial instruments at 67 or to buy at 60.\r\n* `Net` - Price is a net price, ie, net only of local broker's commission, local fees and local taxes.\r\n* `Netdisclosed` - Price is net to the disclosed client.\r\n* `Netofall` - Price is a net price, ie, net of all charges, fees and taxes.\r\n* `Netundisclosed` - Price is net to the client undisclosed (used in the UK market).\r\n* `Notionalgross` - Price is notional gross (used in the UK market).\r\n* `Parvalue` - Price is equal to the nominal or face value of the instrument.\r\n* `Roundedaverage` - Price is a rounded average price.\r\n* `Stop` - Price is a stop price used in an order to buy. The order becomes a market order when the financial instrument trades at or above the stop price after the order is submitted. In an order to sell the order becomes a market order when the financial instrument trades at or below the stop price.\r\n* `Bid` - Price is the calculated bid price of a dual-priced fund (offer-bid prices), that is, the selling price of the units for the investor.\r\n* `Offer` - Price is the calculated offer price of a dual-priced investment fund (offer-bid prices), that is, the buying price of the units for an investor.\r\n* `Netassetvalue` - Price is the net asset value per unit that is used either as a transacting price for a single-priced investment fund class, or as a notional price for the calculation of other prices.\r\n* `Creation` - Price is the calculated creation price of a dual-priced investment fund (creation-cancellation prices) and the highest possible buying price of the units before the initial charge. The actual buying or offer price, which includes charges, will be higher.\r\n* `Cancellation` - Price is the calculated cancellation price of a dual-priced investment fund (creation-cancellation price), and the lowest possible valuation of the units on any one-day. The actual selling or bid price is usually higher.\r\n* `Interim` - Price is the non-official interim price given to an investor before the executed price.\r\n* `Swing` - Price is the calculated net asset value price of a single-priced investment fund. The price is adjusted to take into account the dealing costs due to individual large deals, or due to a significant imbalance in volumes of subscriptions vs redemptions, as an alternative to dilution levy.\r\n* `Other` - Price is another type of price, which is not explicitly defined.\r\n* `Mid` - Price is the average price between the bid and offer prices.\r\n* `Reinvestment` - Price is the price used when reinvesting units after distribution.\r\n* `Switch` - Price is the price used when transferring units between products.\r\n* `Dailydividendrate` - Price is the net income of a financial instrument, calculated on each dealing day, and divided by all the units outstanding on that day.\r\n* `Market` - Price is the current market price.\r\n* `Indicative` - Price is the estimated indicative price.\r\n* `Actual` - True offer price.\r\n* `Nonadjustedunpublished` - The original NAV before the price of the investment fund was swung.\r\n* `Guaranteed` - Price is a guaranteed price.\r\n* `Estimatednav` - Price is an estimated net asset value per unit.\r\n* `Grossassetvalue` - Price is the gross asset value per unit and includes the performance fee per share. It is used as the transacting price for a fund with equalisation. GAVL price minus the NAVL price = performance fee.\r\n* `Estimatedgav` - Price is the estimated gross asset value per unit and includes the performance fee per share. It is used as the transacting price for a fund with equalisation. GAVL price minus the NAVL price = performance fee.\r\n* `Sidepocketnav` - Price is the estimated net asset value for the side pocket.\r\n* `Ask` - Offer. Price for which seller is willing to sell item.\r\n* `Auction` - Price selected as a crossing of an auction.\r\n* `Calculated` - Price is calculated.\r\n* `Clean` - Paid without accumulated interest.\r\n* `Dirty` - Paid with accumulated interest.\r\n* `Draw` - Price selected as a result of a lottery/tiebreaker.\r\n* `Fairvalue` - Estimate of the potential market price.\r\n* `Indicativepaid` - Reduced and partial execution based on high bids and ask orders.\r\n* `Kassa` - Official declared price.\r\n* `Paid` - Price at which the trade was done.\r\n* `Redemptionnav` - Net Asset Value (NAV) applicable to redemptions.\r\n* `Settlement` - Price used for the settlement of futures and options.\r\n* `Spread` - The difference between bid and ask.\r\n* `Subscriptionnav` - Net Asset Value (NAV) applicable to subscriptions.\r\n* `Tax` - Price for tax declaration purpose.\r\n* `Taxableincomepersharecalculated` - Specifies whether the fund calculates a taxable interest per share (TIS).\r\n"
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: Exchange rate specified in a quote. (ISO20022)
    quotestatusvalue:
      enum:
        - Accepted
        - Cancelsymbol
        - Cancelsecurity
        - Cancelunderlying
        - Cancelall
        - Rejected
        - Removedfrommarket
        - Expired
        - Query
        - Quotenotfound
        - Pending
        - Pass
        - Lockedmarketwarning
        - Crossmarketwarning
        - Canceledduetolockmarket
        - Canceledduetocrossmarket
      type: string
      description: ">\r\n* `Accepted` - Indicates that the quote is accepted for further negotiation.\r\n* `Cancelsymbol` - Indicates that all quotes are cancelled for a financial instrument's symbol.\r\n* `Cancelsecurity` - Indicates that all quotes are cancelled for a specific security.\r\n* `Cancelunderlying` - Indicates that all quotes are cancelled for an underlying financial instrument.\r\n* `Cancelall` - Indicates that all quotes are cancelled.\r\n* `Rejected` - Indicates that the quote is not accepted.\r\n* `Removedfrommarket` - Indicates that all quotes are removed from the market.\r\n* `Expired` - Indicates that the quote is not valid anymore.\r\n* `Query` - Indicates that the quote is being requested.\r\n* `Quotenotfound` - Indicates that no quote can be computed or communicated.\r\n* `Pending` - Indicates that the quote is being processed.\r\n* `Pass` - Indicates that the counterparty is not interested in the transaction.\r\n* `Lockedmarketwarning` - Warning due to a situation of locked market.\r\n* `Crossmarketwarning` - Warning due to a situation of cross market.\r\n* `Canceledduetolockmarket` - Indicates that the quote is canceled due to a situation of locked market.\r\n* `Canceledduetocrossmarket` - Indicates that the quote is canceled due to a situation of cross market.\r\n"
    quote:
      type: object
      properties:
        Price:
          type: string
          description: ''
          format: ''
        PriceType:
          $ref: '#/components/schemas/pricetypevalues'
        QuotedRate:
          $ref: '#/components/schemas/rate'
        QuoteStatus:
          $ref: '#/components/schemas/quotestatusvalue'
      description: The buy/sell quote by trade type and volume as appropriate
    Quote:
      type: object
      properties:
        QuoteSecurityType:
          $ref: '#/components/schemas/securitytypevalues'
        QuoteType:
          $ref: '#/components/schemas/text'
        Quote:
          $ref: '#/components/schemas/quote'
      description: The sub-tasks involved in the execution of the financial transaction
    instructiondatetimetypevalues:
      enum:
        - DueDate
        - ExecutionDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n* `FulfillmentDate` - \r\n"
    instructiondatetime:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/datetime'
        InstructionDateType:
          $ref: '#/components/schemas/instructiondatetimetypevalues'
      description: ''
    instructionstatustypevalues:
      enum:
        - Pendingprocessing
        - Acknowledgedaccepted
        - Rejected
        - Accepted
        - Completed
        - Notreceived
        - Cancelled
        - Beingcancelled
        - Receivedbyissuerorregistrar
        - Pending
        - Standinginstruction
        - Queued
        - Cancelledbysubcustodian
        - Forwarded
      type: string
      description: ">\r\n* `Pendingprocessing` - Processing of the instruction is pending.\r\n* `Acknowledgedaccepted` - Instruction has been acknowledged and accepted and is validated for further processing.\r\n* `Rejected` - Instruction has been rejected.\r\n* `Accepted` - Instruction has been accepted and is validated for further processing.\r\n* `Completed` - Processing has been completed.\r\n* `Notreceived` - No instruction has been received (to be used in a reminder).\r\n* `Cancelled` - Instruction has been cancelled.\r\n* `Beingcancelled` - Cancel request is being processed.\r\n* `Receivedbyissuerorregistrar` - Instruction has been received by Issuer.\r\n* `Pending` - Instruction is pending.\r\n* `Standinginstruction` - Standing instruction is applied.\r\n* `Queued` - Instruction is queued.\r\n* `Cancelledbysubcustodian` - Instruction has been cancelled by the agent, for example, due to an event deadline extension.\r\n* `Forwarded` - Accepted and sent along the chain.\r\n"
    instructionstatus:
      type: object
      properties:
        InstructionStatusType:
          $ref: '#/components/schemas/instructionstatustypevalues'
        InstructionStatus:
          $ref: '#/components/schemas/status'
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instructionidentificationtypevalues:
      enum:
        - OrderNumber
        - InstructionNumber
      type: string
      description: ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
    instructionidentification:
      type: object
      properties:
        InstructionIdentification:
          $ref: '#/components/schemas/identifier'
        InstructionIdentificationType:
          $ref: '#/components/schemas/instructionidentificationtypevalues'
      description: "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
    instructiontypevalues:
      enum:
        - PaymentInstruction
        - DeliveryOrder
        - InformationRequest
        - ExchangeInstruction
        - AllocationInstruction
        - MaintenanceInstruction
      type: string
      description: ">\r\n* `PaymentInstruction` - \r\n* `DeliveryOrder` - \r\n* `InformationRequest` - \r\n* `ExchangeInstruction` - \r\n* `AllocationInstruction` - \r\n* `MaintenanceInstruction` - \r\n"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    instruction:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/instructiondatetime'
        InstructionStatus:
          $ref: '#/components/schemas/instructionstatus'
        InstructionIdentifier:
          $ref: '#/components/schemas/instructionidentification'
        InstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        InstructionResult:
          $ref: '#/components/schemas/text'
        InstructionDescription:
          $ref: '#/components/schemas/text'
        InstructionLog:
          $ref: '#/components/schemas/log'
        InstructionPurpose:
          $ref: '#/components/schemas/text'
      description: "Any customer specific processing preferences or requirements ||\r\n|"
    marketordertransaction:
      type: object
      properties:
        MarketOrderTransaction:
          type: string
          description: "Transaction to fulfill the market order\n\n"
          format: class
      description: "The details of the market order transaction ||\r\n|"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: 'The volume of shares to be bought or sold. This can include different amount types - quoted/committed, traded etc.) CurrencyAndAmount|CurrencyAndAmount (https://www.iso20022.org/standardsrepository/type/CurrencyAndAmount)|Standard|ISO20022  ()'
    MarketTradeTransaction:
      type: object
      properties:
        MarketOrderTransactionInstanceReference:
          $ref: '#/components/schemas/identifier'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        EmployeeorBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerMarketOrderProcessingInstruction:
          $ref: '#/components/schemas/instruction'
        MarketOrderTransaction:
          $ref: '#/components/schemas/marketordertransaction'
        InvestmentAccountArrangementInstanceReference:
          $ref: '#/components/schemas/identifier'
        CurrentAccountArrangementInstanceReference:
          $ref: '#/components/schemas/identifier'
        MarketOrderType:
          $ref: '#/components/schemas/text'
        SecurityType:
          $ref: '#/components/schemas/securitytypevalues'
        Amount:
          $ref: '#/components/schemas/amount'
        DateType:
          $ref: '#/components/schemas/datetimetypevalues'
        Date:
          $ref: '#/components/schemas/datetime'
        MarketOrderTradeInitiationInstanceReference:
          $ref: '#/components/schemas/identifier'
      description: 'Execute a well-bounded financial transaction/task, typically involving largely automated/structured fulfillment processing within Market Order Execution. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    MarketTradeTransaction:
      description: MarketTradeTransaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MarketTradeTransaction'
    Quote:
      description: Quote
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Quote'
    TradeInitiation:
      description: TradeInitiation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TradeInitiation'
    Position:
      description: Position
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Position'
  parameters:
    marketorderexecutionid:
      name: marketorderexecutionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    quoteid:
      name: quoteid
      in: path
      required: true
      style: simple
      schema:
        type: string
    tradeinitiationid:
      name: tradeinitiationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    positionid:
      name: positionid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    MarketTradeTransaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MarketTradeTransaction'
      required: true
    Quote:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Quote'
      required: true
    TradeInitiation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TradeInitiation'
      required: true
    Position:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Position'
      required: true