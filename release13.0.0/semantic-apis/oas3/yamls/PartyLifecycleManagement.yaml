openapi: 3.0.1
info:
  title: Party Lifecycle Management
  description: This service domain tracks the state of a party relationship with the bank from the initial checks made during the establishment of a new party connection and subsequently maintained as necessary over the duration of the relationship. The checks and the maintenance requirements will vary by party type and jurisdiction. The checks cover bank specific and legal and regulatory considerations and may be updated based on a standard schedule or by request in specific circumstances.
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/PartyLifecycleManagement/13.0.0
paths:
  /PartyLifecycleManagement/Initiate:
    post:
      tags:
        - CR - PartyRelationshipAdministrativePlan
      summary: InCR Initiate party life-cycle administrative plan
      description: InCR Initiate party life-cycle administrative plan
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/PartyRelationshipAdministrativePlan'
      responses:
        '200':
          $ref: '#/components/responses/PartyRelationshipAdministrativePlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Update':
    put:
      tags:
        - CR - PartyRelationshipAdministrativePlan
      summary: UpCR Update details about a party life-cycle administrative plan
      description: UpCR Update details about a party life-cycle administrative plan
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/PartyRelationshipAdministrativePlan'
      responses:
        '200':
          $ref: '#/components/responses/PartyRelationshipAdministrativePlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Control':
    put:
      tags:
        - CR - PartyRelationshipAdministrativePlan
      summary: CoCR Control the processing of a party-life-cycle administrative plan (e.g. terminate)
      description: CoCR Control the processing of a party-life-cycle administrative plan (e.g. terminate)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/PartyRelationshipAdministrativePlan'
      responses:
        '200':
          $ref: '#/components/responses/PartyRelationshipAdministrativePlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Exchange':
    put:
      tags:
        - CR - PartyRelationshipAdministrativePlan
      summary: 'EcCR Accept, verify, etc. of the party life-cycle administrative plan'
      description: 'EcCR Accept, verify, etc. of the party life-cycle administrative plan'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/PartyRelationshipAdministrativePlan'
      responses:
        '200':
          $ref: '#/components/responses/PartyRelationshipAdministrativePlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Execute':
    put:
      tags:
        - CR - PartyRelationshipAdministrativePlan
      summary: ExCR Execute an automated action (e.g. input data)
      description: ExCR Execute an automated action (e.g. input data)
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/PartyRelationshipAdministrativePlan'
      responses:
        '200':
          $ref: '#/components/responses/PartyRelationshipAdministrativePlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Request':
    put:
      tags:
        - CR - PartyRelationshipAdministrativePlan
      summary: RqCR Request manual intervention (e.g. negotiate resolution)
      description: RqCR Request manual intervention (e.g. negotiate resolution)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/PartyRelationshipAdministrativePlan'
      responses:
        '200':
          $ref: '#/components/responses/PartyRelationshipAdministrativePlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Retrieve':
    get:
      tags:
        - CR - PartyRelationshipAdministrativePlan
      summary: ReCR Retrieve details about a party life-cycle administrative plan
      description: ReCR Retrieve details about a party life-cycle administrative plan
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
      responses:
        '200':
          $ref: '#/components/responses/PartyRelationshipAdministrativePlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Qualification/{qualificationid}/Retrieve':
    get:
      tags:
        - BQ - Qualification
      summary: ReBQ Retrieve details about a party qualification routine
      description: ReBQ Retrieve details about a party qualification routine
      operationId: RetrieveQualification
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/qualificationid'
      responses:
        '200':
          $ref: '#/components/responses/Qualification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Documentation/{documentationid}/Update':
    put:
      tags:
        - BQ - Documentation
      summary: UpBQ Update details about document handling
      description: UpBQ Update details about document handling
      operationId: UpdateDocumentation
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/documentationid'
      requestBody:
        $ref: '#/components/requestBodies/Documentation'
      responses:
        '200':
          $ref: '#/components/responses/Documentation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Documentation/{documentationid}/Execute':
    put:
      tags:
        - BQ - Documentation
      summary: ExBQ Execute an automated action (e.g. input data about a document)
      description: ExBQ Execute an automated action (e.g. input data about a document)
      operationId: ExecuteDocumentation
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/documentationid'
      requestBody:
        $ref: '#/components/requestBodies/Documentation'
      responses:
        '200':
          $ref: '#/components/responses/Documentation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Documentation/{documentationid}/Request':
    put:
      tags:
        - BQ - Documentation
      summary: RqBQ Request manual intervention (e.g. handle a document exchange)
      description: RqBQ Request manual intervention (e.g. handle a document exchange)
      operationId: RequestDocumentation
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/documentationid'
      requestBody:
        $ref: '#/components/requestBodies/Documentation'
      responses:
        '200':
          $ref: '#/components/responses/Documentation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Documentation/{documentationid}/Retrieve':
    get:
      tags:
        - BQ - Documentation
      summary: ReBQ Retrieve details about document processing for a party life-cycle administration
      description: ReBQ Retrieve details about document processing for a party life-cycle administration
      operationId: RetrieveDocumentation
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/documentationid'
      responses:
        '200':
          $ref: '#/components/responses/Documentation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Precedents/{precedentsid}/Update':
    put:
      tags:
        - BQ - Precedents
      summary: UpBQ Update details about customer precedents
      description: UpBQ Update details about customer precedents
      operationId: UpdatePrecedents
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/precedentsid'
      requestBody:
        $ref: '#/components/requestBodies/Precedents'
      responses:
        '200':
          $ref: '#/components/responses/Precedents'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/Precedents/{precedentsid}/Retrieve':
    get:
      tags:
        - BQ - Precedents
      summary: ReBQ Retrieve details about customer precedent maintenance
      description: ReBQ Retrieve details about customer precedent maintenance
      operationId: RetrievePrecedents
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/precedentsid'
      responses:
        '200':
          $ref: '#/components/responses/Precedents'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/PartyLifecycleManagement/{partylifecyclemanagementid}/IdentityProofing/{identityproofingid}/Retrieve':
    get:
      tags:
        - BQ - IdentityProofing
      summary: ReBQ Retrieve details about a party identity proofing routine
      description: ReBQ Retrieve details about a party identity proofing routine
      operationId: RetrieveIdentityProofing
      parameters:
        - $ref: '#/components/parameters/partylifecyclemanagementid'
        - $ref: '#/components/parameters/identityproofingid'
      responses:
        '200':
          $ref: '#/components/responses/IdentityProofing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    verificationtypevalues:
      enum:
        - IdentityVerification/Proofing
        - DocumentVerification
      type: string
      description: ">\r\n* `IdentityVerification/Proofing` - Identity proofing, also known as identity verification or identity authentication, is the process of confirming that an individual's claimed identity is accurate and valid.\r\n* `DocumentVerification` - Document verification is a process of verifying the authenticity and validity of documents presented by individuals or entities.\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The outcome of the task  (will be used to update the Status and Status Record) ||\r\n|"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Date and time at which the range starts. (ISO20022)
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: Reference to the legal entity (typically the customer) Party|Party (https://www.iso20022.org/standardsrepository/type/Party)|Standard|ISO20022BM ()
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the associated customer (can currently be a person or a company) ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: The state of relationship Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()
    directory:
      type: object
      properties:
        DirectoryVersion:
          type: string
          description: ''
          format: number
        DirectoryConfiguration:
          type: string
          description: ''
          format: string
        DirectoryValidPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        DirectoryStatus:
          $ref: '#/components/schemas/status'
      description: Reference to an external verification source (e.g. for registered address/location verification)
    servicetypevalues:
      enum:
        - ITService
        - AdministrativeService
        - SystemService
        - FinancialService
        - InformationService
        - BusinessService
      type: string
      description: ">\r\n* `ITService` - \r\n* `AdministrativeService` - \r\n* `SystemService` - \r\n* `FinancialService` - \r\n* `InformationService` - \r\n* `BusinessService` - \r\n"
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This feature calculates and tracks interest earnings or charges on accounts, loans, or investments over time.\r\n* `WithdrawalFeature` - The withdraw feature typically refers to an option or functionality that allows users to retrieve or remove something from a system or platform.\r\n* `DepositFeature` - This refers to a functionality that allows users to add funds to an account or system, often by transferring money from another source.\r\n* `SweepFeature` - \r\n* `LienFeature` - \r\n* `PaymentFeature` - This refers to the functionality that facilitates or tracks the transfer of funds for a purchase or settlement of dues.\r\n* `RepaymentFeature` - This feature facilitates or manages the process of paying back borrowed funds, such as loans, credit card balances, or advances.\r\n* `LimitFeature` - This feature sets, monitors, or enforces restrictions on the maximum amount that can be accessed, spent, or transacted within a system.\r\n* `OverdraftFeature` - This functionality allows users to withdraw more money than what is available in their account balance, often up to a predefined limit.\r\n* `StatementFeature` - The statement feature refers to a functionality in banking, finance, or digital platforms that provides users with a detailed record of their transactions or activities over a specific period.\r\n* `CurrencyExchangeFeature` - This feature enables users to convert funds from one currency to another at prevailing exchange rates, often within financial or payment platforms.\r\n* `PriceFeature` - This feature involves displaying or managing the price of goods, services, or financial instruments within a platform.\r\n"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: A characteristic of service which refers 1) mainly to the function or condition of service. 2) to non-functional features like quality and security
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        ServiceIdentification:
          $ref: '#/components/schemas/identifier'
        ServiceLifecycleStatus:
          $ref: '#/components/schemas/status'
        ServiceFeature:
          $ref: '#/components/schemas/feature'
      description: Reference to an external verification service (e.g. to perform background verification checks)
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: "Tasks performed to maintain/verify the life-cycle status ||\r\n|"
    instructiondatetimetypevalues:
      enum:
        - DueDate
        - ExecutionDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n* `FulfillmentDate` - \r\n"
    instructiondatetime:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/datetime'
        InstructionDateType:
          $ref: '#/components/schemas/instructiondatetimetypevalues'
      description: ''
    instructionstatustypevalues:
      enum:
        - Pendingprocessing
        - Acknowledgedaccepted
        - Rejected
        - Accepted
        - Completed
        - Notreceived
        - Cancelled
        - Beingcancelled
        - Receivedbyissuerorregistrar
        - Pending
        - Standinginstruction
        - Queued
        - Cancelledbysubcustodian
        - Forwarded
      type: string
      description: ">\r\n* `Pendingprocessing` - Processing of the instruction is pending.\r\n* `Acknowledgedaccepted` - Instruction has been acknowledged and accepted and is validated for further processing.\r\n* `Rejected` - Instruction has been rejected.\r\n* `Accepted` - Instruction has been accepted and is validated for further processing.\r\n* `Completed` - Processing has been completed.\r\n* `Notreceived` - No instruction has been received (to be used in a reminder).\r\n* `Cancelled` - Instruction has been cancelled.\r\n* `Beingcancelled` - Cancel request is being processed.\r\n* `Receivedbyissuerorregistrar` - Instruction has been received by Issuer.\r\n* `Pending` - Instruction is pending.\r\n* `Standinginstruction` - Standing instruction is applied.\r\n* `Queued` - Instruction is queued.\r\n* `Cancelledbysubcustodian` - Instruction has been cancelled by the agent, for example, due to an event deadline extension.\r\n* `Forwarded` - Accepted and sent along the chain.\r\n"
    instructionstatus:
      type: object
      properties:
        InstructionStatusType:
          $ref: '#/components/schemas/instructionstatustypevalues'
        InstructionStatus:
          $ref: '#/components/schemas/status'
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instructionidentificationtypevalues:
      enum:
        - OrderNumber
        - InstructionNumber
      type: string
      description: ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
    instructionidentification:
      type: object
      properties:
        InstructionIdentification:
          $ref: '#/components/schemas/identifier'
        InstructionIdentificationType:
          $ref: '#/components/schemas/instructionidentificationtypevalues'
      description: "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
    instructiontypevalues:
      enum:
        - PaymentInstruction
        - DeliveryOrder
        - InformationRequest
        - ExchangeInstruction
        - AllocationInstruction
        - MaintenanceInstruction
      type: string
      description: ">\r\n* `PaymentInstruction` - \r\n* `DeliveryOrder` - \r\n* `InformationRequest` - \r\n* `ExchangeInstruction` - \r\n* `AllocationInstruction` - \r\n* `MaintenanceInstruction` - \r\n"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: " ||\r\n|"
    instruction:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/instructiondatetime'
        InstructionStatus:
          $ref: '#/components/schemas/instructionstatus'
        InstructionIdentifier:
          $ref: '#/components/schemas/instructionidentification'
        InstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        InstructionResult:
          $ref: '#/components/schemas/text'
        InstructionDescription:
          $ref: '#/components/schemas/text'
        InstructionLog:
          $ref: '#/components/schemas/log'
        InstructionPurpose:
          $ref: '#/components/schemas/text'
      description: Result from the verification service request
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: Reference to documents used for verification
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: "Work documentation, forms and schedules produced and referenced during the analysis ||\r\n|"
    verificationentitytypevalues:
      enum:
        - Acquirer
        - Agent
        - Issuer
        - Acceptor
        - Othernational
        - Otherprivate
        - Terminal
        - Cardapplication
        - Acceptancedevice
      type: string
      description: ">\r\n* `Acquirer` - Acquirer of the transaction.\r\n* `Agent` - Entity providing card payment processing services acting as an intermediary between (or on behalf of) an acquirer and an issuer.\r\n* `Issuer` - Card issuer.\r\n* `Acceptor` - Acceptor (for example signature verification by the attendant).\r\n* `Othernational` - Other type of authentication entity defined at national level.\r\n* `Otherprivate` - Other type of authentication entity defined at private level.\r\n* `Terminal` - Secure application in the terminal.\r\n* `Cardapplication` - Application in the smart card.\r\n* `Acceptancedevice` - Type of Device to accept payment\r\n"
    verificationresulttypevalues:
      enum:
        - Technicalerror
        - Successful
        - Partialmatch
        - Notperformed
        - Missing
        - Failed
        - Furtheraction
        - Othernational
        - Otherprivate
        - Notsupported
      type: string
      description: ">\r\n* `Technicalerror` - Device or entity to perform the verification was unavailable.\r\n* `Successful` - Verification was successful.\r\n* `Partialmatch` - Verification was partially successful.\r\n* `Notperformed` - Verification has not been performed.\r\n* `Missing` - Information required to perform the verification was missing.\r\n* `Failed` - Verification failed.\r\n* `Furtheraction` - Further action required.\r\n* `Othernational` - Other result of verification defined at national level.\r\n* `Otherprivate` - Other result of verification defined at private level.\r\n* `Notsupported` - Not support the verification type\r\n"
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: Contains end date of the verification that has been performed. (ISO20022)
    time:
      type: object
      properties:
        Time:
          type: string
          description: "Time is a time of day to various common resolutions - hour, minute, second and fractions thereof. (UN/CEFACT)\n\nA particular point in the progression of time in a calendar day expressed in either UTC time format (hh:mm:ss.sssZ), local time with UTC offset format (hh:mm:ss.sss+/-hh:mm), or local time format (hh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. (ISO20022)\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed."
          format: datatype
      description: 'Contains end time of the verification that has been performed. '
    verification:
      type: object
      properties:
        VerificationType:
          $ref: '#/components/schemas/verificationtypevalues'
        VerificationEtity:
          $ref: '#/components/schemas/verificationentitytypevalues'
        VerificationResult:
          $ref: '#/components/schemas/verificationresulttypevalues'
        VerificationDateTime:
          $ref: '#/components/schemas/datetime'
        VerificationReason:
          $ref: '#/components/schemas/text'
        VerificationValidityEndDate:
          $ref: '#/components/schemas/date'
        VerificationValidityEndTime:
          $ref: '#/components/schemas/time'
      description: The outcome of the verification routine
    IdentityProofing:
      type: object
      properties:
        IdentityProofingType:
          $ref: '#/components/schemas/verificationtypevalues'
        PublicDirectoryReference:
          $ref: '#/components/schemas/directory'
        SpecialistAgencyServiceReference:
          $ref: '#/components/schemas/service'
        IdentityProofingTaskRecord:
          $ref: '#/components/schemas/task'
        IdentityProofingTaskDescription:
          $ref: '#/components/schemas/text'
        SpecialistAgencyServiceRequestResult:
          $ref: '#/components/schemas/instruction'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        IdentityProofingTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        IdentityProofingTaskResult:
          $ref: '#/components/schemas/verification'
        IdentityProofingReference:
          $ref: '#/components/schemas/identifier'
      description: "A course of action for doing Identity Proofing in the context of executing the Service Domain\n\nA course of action conducted for confirming that an individual's claimed identity is accurate and valid.\n"
    partyprecedent:
      type: object
      properties:
        PrecedentType:
          $ref: '#/components/schemas/text'
        PrecedentValue:
          $ref: '#/components/schemas/value'
        PrecedentValueDate:
          $ref: '#/components/schemas/datetime'
      description: Reference to the tracked value
    Precedents:
      type: object
      properties:
        PrecedentType:
          $ref: '#/components/schemas/text'
        CustomerPrecedentReference:
          $ref: '#/components/schemas/partyprecedent'
        CustomerPrecedentValue:
          $ref: '#/components/schemas/value'
        CustomerPrecedentValueDate:
          $ref: '#/components/schemas/date'
      description: "A course of action for doing Identity Proofing in the context of executing the Service Domain\n\nA course of action conducted for confirming that an individual's claimed identity is accurate and valid.\n"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "Defines scheduled update/review tasks covering all tracked properties ||\r\n|"
    Documentation:
      type: object
      properties:
        PartyLife-cycleRequiredDocumentation:
          $ref: '#/components/schemas/documentdirectoryentry'
        PartyLife-cycleDocumentSchedule:
          $ref: '#/components/schemas/schedule'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
      description: "A course of action for doing Identity Proofing in the context of executing the Service Domain\n\nA course of action conducted for confirming that an individual's claimed identity is accurate and valid.\n"
    assessmenttypevalues:
      enum:
        - AssetValuation
        - ProductMatching
        - Authorization
        - Authentication
        - QualityAssurance
        - Audit
        - ComplianceCheck
        - FundingCheck
        - SuitabilityCheck
        - PerformanceCheck
        - ImpactAssessment
        - RiskAssessment
        - Rating
        - UnderwritingAssessment
        - Qualification
        - Verification
        - KYCAssessment
        - PEPAssessment
        - AMLAssessment
      type: string
      description: ">\r\n* `AssetValuation` - \r\n* `ProductMatching` - \r\n* `Authorization` - An evaluation whether a party or system is allowed to do something.\n\nThe consent given by a participant (or a third party acting on behalf of that participant) in order to transfer funds or securities. (ECB)\n\nAuthorization is a mechanism by which a computer system determines whether to allow or deny specific action to a user. Authorization is often controlled by rather complex rules and algorithms, usually specified as part of an access control model. Authorization often follows (and required) authentication, however, authentication and authorization are two separate mechanisms. In rare cases, \"authorization\" is understood as a process of allowing access, granting permissions or giving approval. Such as \"authorization\" of a request to join a group. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `Authentication` - An evaluation whether a party or system is what it claims to be.\n\nA security mechanism for verifying: 1) the identity of an individual or other entity (including verification by means of a computer or computer application); and 2) the level of authority of that person or entity (i.e. the ability of that person or entity to perform specific tasks or activities). (ECB)\n\nAuthentication is a mechanism by which a computer system checks that the user is really the one she or he claims to be. Authentication can be implemented by a broad variety of mechanisms broadly divided into three categories: something you know, something you have, something you are. Traditionally, authentication is done by the means of by username and password. Authentication is often followed by authorization, however, authentication and authorization are two separate mechanisms. (ISO/IEC 24760-1:2019 - IT Security and Privacy)\r\n* `QualityAssurance` - \r\n* `Audit` - \r\n* `ComplianceCheck` - \r\n* `FundingCheck` - \r\n* `SuitabilityCheck` - \r\n* `PerformanceCheck` - \r\n* `ImpactAssessment` - \r\n* `RiskAssessment` - \r\n* `Rating` - \r\n* `UnderwritingAssessment` - \r\n* `Qualification` - \r\n* `Verification` - A process establishing that a particular information is correct, while the meaning of \"information\" and \"correct\" varies from context to context. When dealing with identity information, this usually means formal verification of identity attributes, checking the schema, identifier uniqueness and referential integrity. However, verification may mean deeper verification, such as checking that the information is true and up-to-date.  (ISO/IEC 24760-1:2019 - IT Security and Privacy)\n\r\n* `KYCAssessment` - An assessment conducted by businesses and financial institutions to verify and confirm the identity of their customers or clients. The primary purpose of a KYC check is to prevent illegal activities, such as money laundering, terrorist financing, and fraud, by ensuring that customers are who they claim to be.\r\n* `PEPAssessment` - A PEP check, or \"Politically Exposed Person\" check, is an assessment conducted by used by businesses, financial institutions, and government agencies to identify individuals who hold prominent public positions or have significant political influence. The purpose of a PEP check is to assess and manage the potential risks associated with doing business with these individuals, as they may be more susceptible to corruption, money laundering, or other illicit activities.\r\n* `AMLAssessment` - An AML (Anti-Money Laundering) check is an assessment conducted by businesses, financial institutions, and other organizations to prevent and detect money laundering and the financing of criminal activities. The main purpose of an AML check is to ensure that financial transactions and business relationships are not being used to disguise the illegal origins of funds.\r\n"
    model:
      type: object
      properties:
        ModelType:
          $ref: '#/components/schemas/text'
        ModelPurpose:
          $ref: '#/components/schemas/text'
        ModelVersion:
          $ref: '#/components/schemas/text'
        ModelName:
          $ref: '#/components/schemas/name'
        ModelDateAndTime:
          $ref: '#/components/schemas/datetime'
        ModelStatus:
          $ref: '#/components/schemas/status'
      description: ''
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: Document that provides background or corroborating information regarding an assessment(s).
    requirement:
      type: object
      properties:
        RequirementType:
          type: string
          description: ''
          format: string
      description: ''
    assessment:
      type: object
      properties:
        AssessmentType:
          $ref: '#/components/schemas/assessmenttypevalues'
        AssessmentMethod:
          $ref: '#/components/schemas/text'
        AssessmentSchedule:
          $ref: '#/components/schemas/schedule'
        AssessmentDescription:
          $ref: '#/components/schemas/text'
        AssessmentModel:
          $ref: '#/components/schemas/model'
        AssessmentDateTime:
          $ref: '#/components/schemas/datetime'
        AssessmentResult:
          $ref: '#/components/schemas/text'
        AssessmentSupportingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRepresentingDocument:
          $ref: '#/components/schemas/document'
        AssessmentRequiredAdjustment:
          $ref: '#/components/schemas/text'
        AssessmentRequirement:
          $ref: '#/components/schemas/requirement'
        AssessmentExpiryDate:
          $ref: '#/components/schemas/date'
        AssessmentStatus:
          $ref: '#/components/schemas/status'
      description: The outcome of the qualification workstep
    Qualification:
      type: object
      properties:
        QualificationType:
          $ref: '#/components/schemas/assessmenttypevalues'
        PublicDirectoryReference:
          $ref: '#/components/schemas/directory'
        SpecialistAgencyServiceReference:
          $ref: '#/components/schemas/service'
        QualificationTaskRecord:
          $ref: '#/components/schemas/task'
        QualificationTaskDescription:
          $ref: '#/components/schemas/text'
        SpecialistAgencyRegulatorServiceRequestResult:
          $ref: '#/components/schemas/instruction'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        QualificationTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        QualificationTaskResult:
          $ref: '#/components/schemas/assessment'
      description: "A course of action for doing Identity Proofing in the context of executing the Service Domain\n\nA course of action conducted for confirming that an individual's claimed identity is accurate and valid.\n"
    party_partyrelationshiptypevalues:
      enum:
        - PartyIsParentOfParty
        - PartyIsSubsidiaryOfParty
        - PartyIsCertifiedByParty
        - PartyIsMarriedToParty
        - PartyActsOnBehalfOfParty
        - PartyIsContactPointForParty
        - PartyIsTrustedByParty
        - PartyIsThePowerOfAttorneyForParty
        - PartyReceivesBenefitsFromAParty
      type: string
      description: "Defines the nature of the bank association with the party (e.g. customer, supplier) ||\r\n|"
    partyrelationshiplifecyclephase:
      type: object
      properties:
        Description:
          $ref: '#/components/schemas/text'
        IsCurrentPhase:
          $ref: '#/components/schemas/text'
        PhaseName:
          $ref: '#/components/schemas/name'
        PhaseStatus:
          $ref: '#/components/schemas/status'
        PhasePeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: "Phase that characterizes the course of existence of a party relationship in a specific context.\n ||\r\n|"
    PartyRelationshipAdministrativePlan:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyRelationshipType:
          $ref: '#/components/schemas/party_partyrelationshiptypevalues'
        PartyLife-cycleMaintenanceSchedule:
          $ref: '#/components/schemas/schedule'
        PartyLife-cycleMaintenanceTask:
          $ref: '#/components/schemas/task'
        PartyLife-cycleMaintenanceTaskType:
          $ref: '#/components/schemas/text'
        PartyLife-cycleMaintenanceWorkProducts:
          $ref: '#/components/schemas/workproduct'
        PartyLife-cycleMaintenanceTaskResult:
          $ref: '#/components/schemas/text'
        CustomerPrecedentProfileUpdateLog:
          $ref: '#/components/schemas/log'
        PartyRelationshipLifecycleStatus:
          $ref: '#/components/schemas/status'
        PartyRelationshipLifecyclePhase:
          $ref: '#/components/schemas/partyrelationshiplifecyclephase'
      description: ''
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    PartyRelationshipAdministrativePlan:
      description: PartyRelationshipAdministrativePlan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PartyRelationshipAdministrativePlan'
    Qualification:
      description: Qualification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Qualification'
    Documentation:
      description: Documentation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Documentation'
    Precedents:
      description: Precedents
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Precedents'
    IdentityProofing:
      description: IdentityProofing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdentityProofing'
  parameters:
    partylifecyclemanagementid:
      name: partylifecyclemanagementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    qualificationid:
      name: qualificationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    documentationid:
      name: documentationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    precedentsid:
      name: precedentsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    identityproofingid:
      name: identityproofingid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    PartyRelationshipAdministrativePlan:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PartyRelationshipAdministrativePlan'
      required: true
    Documentation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Documentation'
      required: true
    Precedents:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Precedents'
      required: true