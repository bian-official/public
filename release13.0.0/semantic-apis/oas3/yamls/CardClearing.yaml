openapi: 3.0.1
info:
  title: Card Clearing
  description: 'This service domain orchestrates the capture and consolidation of card financial transactions originating from various sources, such as POS Network, E-Commerce Gateway, ATM Network, or Card Case Management. It also handles the clearing of the transactions from the Acquirers to the Issuers through the Card Networks'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CardClearing/13.0.0
paths:
  /CardClearing/Initiate:
    post:
      tags:
        - CR - CardClearingProcedure
      summary: InCR Initiate a card clearing process
      description: InCR Initiate a card clearing process
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CardClearingProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardClearingProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Update':
    put:
      tags:
        - CR - CardClearingProcedure
      summary: UpCR Update details of a card clearing processing batch
      description: UpCR Update details of a card clearing processing batch
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
      requestBody:
        $ref: '#/components/requestBodies/CardClearingProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardClearingProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Retrieve':
    get:
      tags:
        - CR - CardClearingProcedure
      summary: ReCR Retrieve details about a card clearing process
      description: ReCR Retrieve details about a card clearing process
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
      responses:
        '200':
          $ref: '#/components/responses/CardClearingProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Capture/{captureid}/Update':
    put:
      tags:
        - BQ - Capture
      summary: UpBQ Update details of a captured card transaction (for repair)
      description: UpBQ Update details of a captured card transaction (for repair)
      operationId: UpdateCapture
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/captureid'
      requestBody:
        $ref: '#/components/requestBodies/Capture'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Capture/{captureid}/Retrieve':
    get:
      tags:
        - BQ - Capture
      summary: ReBQ Retrieve details about a captured card transaction
      description: ReBQ Retrieve details about a captured card transaction
      operationId: RetrieveCapture
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/captureid'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Addressing/{addressingid}/Retrieve':
    get:
      tags:
        - BQ - Addressing
      summary: ReBQ Retrieve details about card transaction addressing
      description: ReBQ Retrieve details about card transaction addressing
      operationId: RetrieveAddressing
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/addressingid'
      responses:
        '200':
          $ref: '#/components/responses/Addressing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/FXConversion/{fxconversionid}/Retrieve':
    get:
      tags:
        - BQ - FXConversion
      summary: ReBQ Retrieve details about card transaction FX conversion|
      description: ReBQ Retrieve details about card transaction FX conversion|
      operationId: RetrieveFXConversion
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/fxconversionid'
      responses:
        '200':
          $ref: '#/components/responses/FXConversion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Fees/{feesid}/Update':
    put:
      tags:
        - BQ - Fees
      summary: UpBQ Update details of applied fees
      description: UpBQ Update details of applied fees
      operationId: UpdateFees
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/feesid'
      requestBody:
        $ref: '#/components/requestBodies/Fees'
      responses:
        '200':
          $ref: '#/components/responses/Fees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Fees/{feesid}/Retrieve':
    get:
      tags:
        - BQ - Fees
      summary: ReBQ Retrieve details about card transaction intercharge fees
      description: ReBQ Retrieve details about card transaction intercharge fees
      operationId: RetrieveFees
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/feesid'
      responses:
        '200':
          $ref: '#/components/responses/Fees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Matching/{matchingid}/Retrieve':
    get:
      tags:
        - BQ - Matching
      summary: ReBQ Retrieve details about card transaction matching
      description: ReBQ Retrieve details about card transaction matching
      operationId: RetrieveMatching
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/matchingid'
      responses:
        '200':
          $ref: '#/components/responses/Matching'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Reconciliation/{reconciliationid}/Retrieve':
    get:
      tags:
        - BQ - Reconciliation
      summary: ReBQ Retrieve details about card transaction reconciliation
      description: ReBQ Retrieve details about card transaction reconciliation
      operationId: RetrieveReconciliation
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/reconciliationid'
      responses:
        '200':
          $ref: '#/components/responses/Reconciliation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Routing/{routingid}/Retrieve':
    get:
      tags:
        - BQ - Routing
      summary: ReBQ Retrieve details about card transaction routing
      description: ReBQ Retrieve details about card transaction routing
      operationId: RetrieveRouting
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/routingid'
      responses:
        '200':
          $ref: '#/components/responses/Routing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardClearing/{cardclearingid}/Fees/{feesid}/Execute':
    put:
      tags:
        - BQ - Fees
      summary: Execute calculation of interchange fees
      description: Execute calculation of interchange fees
      operationId: ExecuteFees
      parameters:
        - $ref: '#/components/parameters/cardclearingid'
        - $ref: '#/components/parameters/feesid'
      requestBody:
        $ref: '#/components/requestBodies/Fees'
      responses:
        '200':
          $ref: '#/components/responses/Fees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: ''
    testtypevalues:
      enum:
        - ProductEligibilityTest
        - NextBestProductTest
        - IssuedDeviceTest
        - CardHolderAuthenticationTest
        - CardFundsAvailableTest
        - CardTransactionFraudTest
        - CardStand-InAuthorizationTest
        - ExternalAccessRequestTest
        - SuitabilityTest
        - LegalComplianceTest
        - RegulatoryComplianceTest
        - SystemFunctionalTest
        - SystemProductionTest
        - SystemBusinessRiskTest
        - SystemOperationsTest
        - CreditPolicyComplianceTest
        - RuleSetAndDecisionTreeTest
        - ModelBasedTests
        - AssetAndLiabilityValuationTest
        - LiquidityAndCashFlowTest
        - RiskTest
        - SensitivityTest
      type: string
      description: ">\r\n* `ProductEligibilityTest` - \r\n* `NextBestProductTest` - \r\n* `IssuedDeviceTest` - \r\n* `CardHolderAuthenticationTest` - \r\n* `CardFundsAvailableTest` - \r\n* `CardTransactionFraudTest` - \r\n* `CardStand-InAuthorizationTest` - \r\n* `ExternalAccessRequestTest` - \r\n* `SuitabilityTest` - \r\n* `LegalComplianceTest` - \r\n* `RegulatoryComplianceTest` - \r\n* `SystemFunctionalTest` - \r\n* `SystemProductionTest` - \r\n* `SystemBusinessRiskTest` - \r\n* `SystemOperationsTest` - \r\n* `CreditPolicyComplianceTest` - \r\n* `RuleSetAndDecisionTreeTest` - \r\n* `ModelBasedTests` - \r\n* `AssetAndLiabilityValuationTest` - \r\n* `LiquidityAndCashFlowTest` - \r\n* `RiskTest` - \r\n* `SensitivityTest` - \r\n"
    test:
      type: object
      properties:
        TestResult:
          $ref: '#/components/schemas/text'
        TestGuidance:
          $ref: '#/components/schemas/text'
        TestType:
          $ref: '#/components/schemas/testtypevalues'
        TestDescription:
          $ref: '#/components/schemas/text'
      description: Details of the transaction addressing
    Addressing:
      type: object
      properties:
        AddressingTaskResult:
          $ref: '#/components/schemas/test'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
        - ChequeRelatedFee
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n* `ChequeRelatedFee` - \r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: "Base amount that would be applied when the service is requested. \n\n"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Date and time at which the range starts. (ISO20022)
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: 'Rate used to calculate the amount of the adjustment, allowance, charge or fee. (ISO20022)'
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: ''
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goaltypevalues:
      enum:
        - Short-TermGoal
        - Long-TermGoal
        - BusinessGoal
        - PerformanceGoal
        - FinancialGoal
        - OutcomeGoal
        - SMARTGoal
      type: string
      description: ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
    goaldatetimetypevalues:
      enum:
        - SettingDate
        - PlanningDate
        - StartDate
        - ReviewDate
        - CompletionDate
      type: string
      description: ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
    goaldatetime:
      type: object
      properties:
        GoalDateAndTime:
          $ref: '#/components/schemas/datetime'
        GoalDateAndTimeType:
          $ref: '#/components/schemas/goaldatetimetypevalues'
      description: 'The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date.'
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the Issuing bank for which the Network orchestrates clearing processing ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    goalstatustypevalues:
      enum:
        - Setting
        - Planning
        - Execution
        - MonitoringAndEvaluation
        - CompletionOrAchievement
        - MaintenanceOrSustainment
        - ClosureOrRenewal
      type: string
      description: ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
    goalstatus:
      type: object
      properties:
        GoalStatus:
          $ref: '#/components/schemas/status'
        GoalStatusType:
          $ref: '#/components/schemas/goalstatustypevalues'
      description: 'The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal'
    goal:
      type: object
      properties:
        GoalType:
          $ref: '#/components/schemas/goaltypevalues'
        GoalDefinition:
          $ref: '#/components/schemas/text'
        GoalName:
          $ref: '#/components/schemas/name'
        GoalDateAndTime:
          $ref: '#/components/schemas/goaldatetime'
        GoalStatus:
          $ref: '#/components/schemas/goalstatus'
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
        - DevelopmentPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n* `DevelopmentPlan` - \r\n"
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: The FX rates and fees that are applied to the transactions
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: Details of the transaction FX conversion
    FXConversion:
      type: object
      properties:
        FXConversionRatesandFees:
          $ref: '#/components/schemas/feearrangement'
        FXConversionTaskResult:
          $ref: '#/components/schemas/task'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    Fees:
      type: object
      properties:
        InterchargeFees:
          $ref: '#/components/schemas/feearrangement'
        FeeTaskResult:
          $ref: '#/components/schemas/test'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    Matching:
      type: object
      properties:
        MatchingTaskResult:
          $ref: '#/components/schemas/test'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: The account number associated with the card transaction
    cardnetwork:
      type: object
      properties:
        CardNetwork:
          type: string
          description: "Network for handling the card based transaction (e.g. Visa, MC, AMEX, Diners, etc.)\n\nA card network are networks of issuing and acquiring banks through which payment cards of some certain brand are processed. two types of card networks can be pointed out, namely, credit card associations (Visa, MasterCard, Discover, Amex, etc.) and PINless debit card networks (NYCE, PULSE, Maestro, Interlink, Cirrus, etc.).\n\nCard networks are financial services companies that enables, processes and settles payments between card issuing banks and merchant banks worldwide. Examples are Visa, MasterCard, Discover, RuPay etc.\n\nA card network is a system of connecting merchants and card issuers.  A middle person that collects funds from card issuer and pays it to the merchant.  Visa and MasterCard are examples of card networks."
          format: class
      description: "Refers to the card network ||\r\n|"
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: ">\r\n* `FinancialTransaction` - \r\n* `BusinessTransaction` - \r\n* `BankingTransaction` - \r\n* `AccountingTransaction` - \r\n* `BookingTransaction` - \r\n* `AllocationTransaction` - \r\n* `DeliveryTransaction` - \r\n* `ProductionTransaction` - \r\n"
    cardpaymentinvolvementtypevalues:
      enum:
        - Cardholder
        - Cardissuer
        - Cardacceptor
        - Cardacquirer
        - Merchant
        - Cardnetwork
      type: string
      description: ">\r\n* `Cardholder` - A person to whom a payment card is issued and who is authorised to use that card. (a proposed definition for BIAN BOM adapted from ECB)\n\r\n* `Cardissuer` - A financial institution that makes payment cards available to cardholders, authorises transactions at point-of-sale (POS) terminals or automated teller machines (ATMs) and guarantees payment to the acquirer for transactions that are in conformity with the rules of the relevant scheme. (a proposed definition for BIAN BOM adapted from ECB)\r\n* `Cardacceptor` - Entity accepting payment related cards. (ISO20022)\n\r\n* `Cardacquirer` - Entity acquiring card payment transactions. (ISO20022)\n\r\n* `Merchant` - Party performing the card payment transaction. (ISO20022)\n\r\n* `Cardnetwork` - Network for handling the card-based transaction (e.g. Visa, MC, AMEX, Diners, etc.)\n\nA card network are networks of issuing and acquiring banks through which payment cards of some certain brand are processed. two types of card networks can be pointed out, namely, credit card associations (Visa, MasterCard, Discover, Amex, etc.) and PINless debit card networks (NYCE, PULSE, Maestro, Interlink, Cirrus, etc.).\n\nCard networks are financial services companies that enables, processes and settles payments between card issuing banks and merchant banks worldwide. Examples are Visa, MasterCard, Discover, RuPay etc.\n\nA card network is a system of connecting merchants and card issuers.  A middle person that collects funds from card issuer and pays it to the merchant.  Visa and MasterCard are examples of card networks.\n\n\n\n\r\n"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: Place where the merchant actually performed the transaction. (ISO20022)
    transactionchanneltypevalues:
      enum:
        - Mailorder
        - Telephoneorder
        - Electroniccommerce
        - Televisionpayment
        - Officeorbranch
        - Homebanking
        - Financialadvisor
        - Mobilepayment
        - Securedelectroniccommerce
        - Mobilepos
      type: string
      description: ">\r\n* `Mailorder` - Mail order.\r\n* `Telephoneorder` - Telephone order.\r\n* `Electroniccommerce` - Electronic commerce.\r\n* `Televisionpayment` - Payment on television.\r\n* `Officeorbranch` - Office or branch.\r\n* `Homebanking` - Home banking.\r\n* `Financialadvisor` - Financial advisor.\r\n* `Mobilepayment` - Payment performed through a cardholder mobile device.\r\n* `Securedelectroniccommerce` - Electronic commerce with cardholder authentication.\r\n* `Mobilepos` - Payment performed through a merchant mobile device.\r\n"
    pointofservice:
      type: object
      properties:
        PointOfService:
          type: string
          description: "Point at which a service is offered and/or fulfilled. \n"
          format: class
      description: Describes the Point of Interaction through which the payment by card was initiated. (ISO20022)
    transactionenvironmenttypevalues:
      enum:
        - Merchant
        - Private
        - Public
        - Branch
        - Other
      type: string
      description: ">\r\n* `Merchant` - Merchant environment.\r\n* `Private` - Private environment.\r\n* `Public` - Public environment.\r\n* `Branch` - Bank environment.\r\n* `Other` - Other environments, for instance a mall or an airport.\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the merchant where the transaction took place. (ISO20022)
    amountqualifiertypevalues:
      enum:
        - Cashback
        - Gratuity
        - Fees
        - Rebates
        - Valueaddedtax
        - Actual
        - Replacement
        - Maximum
        - Default
        - Estimated
        - Original
        - Surcharge
        - Servicefee
        - Interchangefee
        - Discount
        - Atmcommissionfee
        - Authorisedamount
        - Cardremainingbalance
        - Maximumallowedamount
        - Minimumallowedamount
        - Requestedamount
        - Issuerfees
        - Issuercommission
        - Interchangefees
        - Processingfees
        - Currencyconversionfees
        - Internationalserviceassessmentfees
        - Commission
        - Donation
        - Tax
        - Incremental
        - Decremental
        - Reserved
        - Confirmedamount
        - Instructedamount
        - Atmaccessfee
        - Cardholderbillingfee
        - Clearingfee
        - Credittransactionfee
        - Cumulative
        - Debittransactionfee
        - Extra
        - Foreignexchangefee
        - Fundstransfer
        - Instantpaymentfee
        - Instanttransferfee
        - Issuercardholderfee
        - Limit
        - Othernational
        - Otherprivate
        - Reconciliationfee
        - Settlementfee
        - Transactionfee
        - Anticipated
        - Baggage
        - Chargedtocard
        - Clearingpriorityfee
        - Dental
        - Deposit
        - Fundstransferfee
        - Otherqualifiedmedical
        - Prescription
        - Proxy
        - Requestedcashback
        - Settlementpriorityfee
        - Totalhealthcare
        - Transit
        - Vision
        - Connect
        - Data
        - Exchangeticket
        - Exchangeticketfee
        - Fare
        - Foodbeverage
        - Insurance
        - Longdistance
        - Miscellaneous
        - Phone
        - Prepayment
        - Total
        - Usage
        - Predcc
        - Upgrade
        - Clubfee
        - Cargo
        - Dutyfree
        - Ticketdelivery
        - Petcarrier
        - Tourorder
        - Minimuminterchangefee
        - Maximuminterchangefee
        - Cashbackinterchangefee
      type: string
      description: ">\r\n* `Cashback` - Cash-back amount.\r\n* `Gratuity` - Gratuity amount.\r\n* `Fees` - Fees.\r\n* `Rebates` - Global rebate of the transaction. This amount is counted as a negative amount.\r\n* `Valueaddedtax` - Value added tax amount.\r\n* `Actual` - Actual amount.\r\n* `Replacement` - Replacement amount.\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Original` - Original amount authorised during the real-time authorisation process.\r\n* `Surcharge` - Extra fee for a purchase or a withdrawal.\r\n* `Servicefee` - Service fee.\r\n* `Interchangefee` - Interchange fee.\r\n* `Discount` - Discount, rebate or voucher, related to loyalty programs. This amount is counted as a negative amount.\r\n* `Atmcommissionfee` - Commission that the issuer will charge to the cardholder, which should be shown and accepted by the cardholder before the money is disbursed.\r\n* `Authorisedamount` - Transaction amount that has been authorised.\r\n* `Cardremainingbalance` - Remaining allowed amount for this type of transaction with this card, after the transaction, until the end of the card limit period.\r\n* `Maximumallowedamount` - Maximum amount allowed for the transaction in the transaction amount currency if the transaction amount of the request was declined.\r\n* `Minimumallowedamount` - Minimum amount allowed in the TransactionAmount currency if the transaction amount of the request was declined.\r\n* `Requestedamount` - Transaction amount that has been requested to be authorised.\r\n* `Issuerfees` - Fees amount from the card issuer.\r\n* `Issuercommission` - Commission from the card issuer.\r\n* `Interchangefees` - Interchange fees.\r\n* `Processingfees` - Processing fees.\r\n* `Currencyconversionfees` - Currency conversion fees.\r\n* `Internationalserviceassessmentfees` - International service assessment fees.\r\n* `Commission` - Commission, for example for DCC (Dynamic Currency Conversion) transactions.\r\n* `Donation` - Donation amount.\r\n* `Tax` - Taxes applicable to the transaction.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Confirmedamount` - Actual amount that has been paid to the ultimate beneficiary, after all charges etc... have been deducted.\r\n* `Instructedamount` - Amount of money to be moved between the debtor (ordering customer) and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\r\n* `Atmaccessfee` - Fee for giving access to an ATM.\r\n* `Cardholderbillingfee` - Fee related to a cardholder billing.\r\n* `Clearingfee` - Fee related to a clearing transaction.\r\n* `Credittransactionfee` - Fee related to a credit transaction.\r\n* `Cumulative` - Contains the total amount of all authorisations related to the same cardholder purchase activities. Example: total of all incremental or splitted shipment authorisations for the same purchase.\r\n* `Debittransactionfee` - Fee related to a debit transaction.\r\n* `Extra` - Extra charges (for example,  minibar, etc.)\r\n* `Foreignexchangefee` - Fee related to a foreign exchange transaction.\r\n* `Fundstransfer` - Fee related to a funds transfer transaction\r\n* `Instantpaymentfee` - Fee related to an instant payment.\r\n* `Instanttransferfee` - Fee related to an instant transfer transaction.\r\n* `Issuercardholderfee` - Fee applied by the card issuer to the cardholder.\r\n* `Limit` - Limit of amounts for the transaction.\r\n* `Othernational` - Other type of amount defined at national level.\r\n* `Otherprivate` - Other type of amount defined at private level.\r\n* `Reconciliationfee` - Fee related to a reconciliation transaction.\r\n* `Settlementfee` - Fee related to a settlement transaction.\r\n* `Transactionfee` - Fee related to a transaction.\r\n* `Anticipated` - Amount anticipated for the transaction\r\n* `Baggage` - Baggage related fees\r\n* `Chargedtocard` - Amount that has been charged to card account\r\n* `Clearingpriorityfee` - Fee related to a clearing transaction for a given priority.\r\n* `Dental` - Amount qualified for dental prescriptions\r\n* `Deposit` - Deposit amount.\r\n* `Fundstransferfee` - Fee related to a funds transfer.\r\n* `Otherqualifiedmedical` - Amount qualified for other medical expenses\r\n* `Prescription` - Amount for medical prescription\r\n* `Proxy` - Substitute for an amount to be authorised.\r\n* `Requestedcashback` - Requested cashback amount\r\n* `Settlementpriorityfee` - Fee related to a settlement transaction for a given priority.\r\n* `Totalhealthcare` - Total healthcare amount\r\n* `Transit` - Amount in transit\r\n* `Vision` - Amount qualified for medical vision expenses\r\n* `Connect` - Telephone connection-related charge\r\n* `Data` - Data communication related charges\r\n* `Exchangeticket` - Fee for exchanging a ticket (modifying an itinerary)\r\n* `Exchangeticketfee` - Fee for exchanging a ticket (modifying an itinerary)\r\n* `Fare` - Amount of fare\r\n* `Foodbeverage` - Amount of food and beverages\r\n* `Insurance` - Insurance charges\r\n* `Longdistance` - Charges related to a long distance call.\r\n* `Miscellaneous` - Miscellaneous charges not elsewhere defined\r\n* `Phone` - Phone charges\r\n* `Prepayment` - Amount of prepayment\r\n* `Total` - Total amount of charges\r\n* `Usage` - Telephone usage-related charge\r\n* `Predcc` - Local amount before DCC (Dynamic Currency Conversion) was applied.\r\n* `Upgrade` - Amount for an upgrade.\r\n* `Clubfee` - Amount for club fee.\r\n* `Cargo` - Cargo Amount.\r\n* `Dutyfree` - Duty free amount\r\n* `Ticketdelivery` - Ticket delivery amount.\r\n* `Petcarrier` - Pet carrier.\r\n* `Tourorder` - Tour order amount.\r\n* `Minimuminterchangefee` - Minimum interchange fee applicable.\r\n* `Maximuminterchangefee` - Maximum applicable interchange fee.\r\n* `Cashbackinterchangefee` - Interchange fee applicable to cash back amount.\r\n"
    cardtransactioncategorytypevalues:
      type: object
      properties:
        Cardtransactioncategorytypevalues:
          type: string
          description: ''
          format: enumeration
      description: Specifies the category to which the card transaction belongs. (ISO20022)
    cardpaymenttransactionidentificationtypevalues:
      enum:
        - Issuercitidentification
        - Merchantcitidentification
      type: string
      description: ">\r\n* `Issuercitidentification` - Identification, given by the Issuer, of the transaction processed with the cardholder that legitimates this merchant initiated transaction. (ISO20022)\r\n* `Merchantcitidentification` - Identification, given by the merchant, of the transaction processed with the cardholder that legitimates this merchant initiated transaction. (ISO20022)\r\n"
    cardpaymenttransactionidentification:
      type: object
      properties:
        CardPaymentTransactionIdentification:
          $ref: '#/components/schemas/identifier'
        CardPaymentTransactionIdentificationType:
          $ref: '#/components/schemas/cardpaymenttransactionidentificationtypevalues'
      description: Identification of the transaction assigned by the initiator of the request. For instance refers to POITransactionIdentification if used inside an authorisation request or to SaleTransactionIdentification if the message is a payment request initiated by a sale system. (ISO20022)
    cardpaymenttransactionservicetypevalues:
      enum:
        - Cardsfundtransfer
        - Originalcredit
        - Cardpayment
        - Cashback
        - Cashadvance
        - Cashdeposit
        - Deferredpayment
        - Reservation
        - Loading
        - Refund
        - Quasicash
        - Balance
        - Cardactivation
        - Cardverification
        - Pinchange
        - Validitycheck
        - Aggregation
        - DCC
        - Gratuity
        - Instalment
        - Loyalty
        - Noshow
        - Purchasecorporate
        - Recurringpayment
        - Solicitedavailablefunds
        - Unsolicitedavailablefunds
        - Voiceauthorisation
        - Initialreservation
        - Updatereservation
        - Paymentreservation
        - Additionalpayment
        - Firstrecurring
        - Followingrecurring
        - Persontobusiness
        - Persontoperson
        - Acceptorinstalment
        - Issuerinstalment
        - Unloading
        - Cardsfundtransferpush
        - Cardsfundtransferpull
        - Cashwithdrawal
        - Pinunblock
        - Chosenwithdrawal
        - Preauthorisedwithdrawal
        - Profilewithdrawal
        - Standardwithdrawal
        - Transfercardbillpayment
        - Transferfromcash
        - Transferfromcheque
        - Transferfundsdisbursementgeneral
        - Transfergovernmentdisbursement
        - Transfermerchantdisbursement
        - Transferpayrollpensiondisbursement
        - Nonrefundable
        - Instant
        - Creditadjustement
        - Debitadjustement
        - Createcertificate
        - Renewcerificate
        - Revokecertificate
        - Addwhitelist
        - Removewhitelist
        - Cardinitiatingdirectdebit
        - Guaranteeofpayment
      type: string
      description: ">\r\n* `Cardsfundtransfer` - Transfer of funds to and/or from a card account.\r\n* `Originalcredit` - Original credit.\r\n* `Cardpayment` - Card payment.\r\n* `Cashback` - Card payment with cash-back.\r\n* `Cashadvance` - Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.\r\n* `Cashdeposit` - Cash deposit.\r\n* `Deferredpayment` - Deferred payment.\r\n* `Reservation` - Reservation (pre-authorisation).\r\n* `Loading` - Loading or reloading non-financial account.\r\n* `Refund` - Refund transaction.\r\n* `Quasicash` - Quasi-cash.\r\n* `Balance` - Balance enquiry.\r\n* `Cardactivation` - Card activation.\r\n* `Cardverification` - Card verification.\r\n* `Pinchange` - PIN (Personal Identification Number) change.\r\n* `Validitycheck` - Card validity check.\r\n* `Aggregation` - Aggregation of low payments.\r\n* `DCC` - Dynamic currency conversion (DCC).\r\n* `Gratuity` - Card payment with gratuity.\r\n* `Instalment` - Instalment payment.\r\n* `Loyalty` - Loyalty services.\r\n* `Noshow` - No show after reservation.\r\n* `Purchasecorporate` - Purchase and corporate data.\r\n* `Recurringpayment` - Recurring payment.\r\n* `Solicitedavailablefunds` - Solicited available funds.\r\n* `Unsolicitedavailablefunds` - Unsolicited available funds.\r\n* `Voiceauthorisation` - Voice authorisation.\r\n* `Initialreservation` - Initial reservation.\r\n* `Updatereservation` - Update reservation.\r\n* `Paymentreservation` - Payment after reservation.\r\n* `Additionalpayment` - Additional payment after reservation.\r\n* `Firstrecurring` - Initial recurring payment.\r\n* `Followingrecurring` - Repeat recurring payment.\r\n* `Persontobusiness` - Card payment transaction transfer from person to business.\r\n* `Persontoperson` - Card payment transaction transfer from person to person.\r\n* `Acceptorinstalment` - Instalment payment transaction performed by the acceptor or the acquirer.\r\n* `Issuerinstalment` - Instalment payment transaction performed by the card issuer.\r\n* `Unloading` - Unloading non-financial account.\r\n* `Cardsfundtransferpush` - Transfer of funds to a card or an account.\r\n* `Cardsfundtransferpull` - Transfer of funds from a card or an account.\r\n* `Cashwithdrawal` - Withdrawal of cash on an ATM.\r\n* `Pinunblock` - Unblock the cardholder PIN.\r\n* `Chosenwithdrawal` - Amount and notes values are chosen by the customer.\r\n* `Preauthorisedwithdrawal` - Withdrawal transaction was pre-authorised by another channel (amount could be absent).\r\n* `Profilewithdrawal` - Amount and Notes Values are pre-defined by the customer profile.\r\n* `Standardwithdrawal` - Customer pressed a button associated with a withdrawal of unique amount and notes mix.\r\n* `Transfercardbillpayment` - Transfer for payment of bills.\r\n* `Transferfromcash` - Transfer from cash deposit.\r\n* `Transferfromcheque` - Transfer from cheque deposit.\r\n* `Transferfundsdisbursementgeneral` - Transfer for general disbursement.\r\n* `Transfergovernmentdisbursement` - Transfer for government disbursement.\r\n* `Transfermerchantdisbursement` - Transfer for merchant disbursement.\r\n* `Transferpayrollpensiondisbursement` - Transfer for payroll pension disbursement.\r\n* `Nonrefundable` - Payment of goods or services which are not refundable, for instance low cost airline tickets.\r\n* `Instant` - Instant transaction.\r\n* `Creditadjustement` - Credit adjustment to a previous transaction.\r\n* `Debitadjustement` - Debit adjustment to a previous transaction.\r\n* `Createcertificate` - Creation of an X.509 certificate with the public key and the information of the owner of the asymmetric key provided by the requestor.\r\n* `Renewcerificate` - Renewal of an X.509 certificate, protected by the certificate to renew.\r\n* `Revokecertificate` - Revocation of an active X.509 certificate.\r\n* `Addwhitelist` - Add a POI in the white list of the terminal manager.\r\n* `Removewhitelist` - Remove a POI from the white list of the terminal manager.\r\n* `Cardinitiatingdirectdebit` - Direct Debit initiated by Card.\r\n* `Guaranteeofpayment` - Acceptor claims for guarantee of payment.\r\n"
    cardpaymenttransaction:
      type: object
      properties:
        Amount:
          $ref: '#/components/schemas/amount'
        MerchantLocation:
          $ref: '#/components/schemas/location'
        DebitCreditDirection:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        CardTransactionChannel:
          $ref: '#/components/schemas/transactionchanneltypevalues'
        PointOfInteraction:
          $ref: '#/components/schemas/pointofservice'
        CardTransactionDateTime:
          $ref: '#/components/schemas/datetime'
        CardTransactionEnvironmentType:
          $ref: '#/components/schemas/transactionenvironmenttypevalues'
        MerchantCountry:
          $ref: '#/components/schemas/country'
        CardNetwork:
          $ref: '#/components/schemas/cardnetwork'
        AmountQualifier:
          $ref: '#/components/schemas/amountqualifiertypevalues'
        CardPaymentStatus:
          $ref: '#/components/schemas/status'
        CardTransactionCategory:
          $ref: '#/components/schemas/cardtransactioncategorytypevalues'
        CardPaymentTransactionIdentification:
          $ref: '#/components/schemas/cardpaymenttransactionidentification'
        CardPaymentTransactionServiceType:
          $ref: '#/components/schemas/cardpaymenttransactionservicetypevalues'
      description: ''
    cardpaymenttransactioninvolvement:
      type: object
      properties:
        InvolvementType:
          $ref: '#/components/schemas/cardpaymentinvolvementtypevalues'
        PartyReference:
          $ref: '#/components/schemas/party'
        TransactionReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
      description: Refers to the merchant initiating settlement
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: 'Details of the transaction (e.g. purchased service/product, purpose)'
    truefalseindicatorvalues:
      enum:
        - '1'
        - '0'
      type: string
      description: ">\r\n* `1` - \r\n* `0` - \r\n"
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: Transaction authorisation deadline to complete the related payment. (ISO20022)
    cardholderaddressverificationresulttypevalues:
      enum:
        - Addressmatch
        - Addressnotmatch
        - Addresstechnical
        - Addressnottechnical
        - Addressmissing
        - Addressnotused
        - Postalmatch
        - Postalnotmatch
        - Postaltechnical
        - Postalnottechnical
        - Postalmissing
        - Postalnotused
      type: string
      description: ">\r\n* `Addressmatch` - Address numeric match.\r\n* `Addressnotmatch` - Address numerics do not match.\r\n* `Addresstechnical` - Address numeric not processed for technical reason.\r\n* `Addressnottechnical` - Address numeric not processed for non-technical reason.\r\n* `Addressmissing` - Address numeric missing in request.\r\n* `Addressnotused` - Address numeric not used by issuer.\r\n* `Postalmatch` - Postal code matches.\r\n* `Postalnotmatch` - Postal code does not match.\r\n* `Postaltechnical` - Postal code not processed for technical reason.\r\n* `Postalnottechnical` - Postal code not processed for non-technical reason.\r\n* `Postalmissing` - Postal code missing in request.\r\n* `Postalnotused` - Postal code not used by issuer.\r\n"
    cscresulttypevalues:
      enum:
        - Cscmatch
        - Cscnomatch
        - Csctechnical
        - Cscnottechnical
        - Cscmissing
        - Cscnotused
      type: string
      description: ">\r\n* `Cscmatch` - Card security code match.\r\n* `Cscnomatch` - No card security code match.\r\n* `Csctechnical` - Card security code not processed for technical reason.\r\n* `Cscnottechnical` - Card security code not processed for non-technical reason.\r\n* `Cscmissing` - Card security code missing in request.\r\n* `Cscnotused` - Card security code not used by issuer.\r\n"
    failurereasontypevalues:
      enum:
        - Customercancel
        - Malfunction
        - Partial
        - Toolateresponse
        - Unabletocomplete
        - Unabletosend
        - Timeout
        - Carddeclined
        - Onlinedeclined
        - Offlinedeclined
        - Suspectedfraud
        - Securityerror
        - Cardcaptured
        - Carderror
        - Customerdecline
        - Forgottencard
        - Fullfilmenterror
        - Outofcustomerservice
        - Unabletocapture
        - Security
        - Hardware
        - Compromised
        - Expired
        - Invalidkcv
        - Keyloaderror
        - Cardretained
        - Customertimeout
      type: string
      description: ">\r\n* `Customercancel` - Customer cancellation, for example removing the card before the end of the transaction.\r\n* `Malfunction` - Suspected malfunction.\r\n* `Partial` - Completed partially.\r\n* `Toolateresponse` - Response to the previous message was received too late.\r\n* `Unabletocomplete` - Unable to complete the transaction after the authorisation response.\r\n* `Unabletosend` - Unable to deliver the request message to the recipient party.\r\n* `Timeout` - Timeout while waiting for a response to a request message, or no response was received (for example connection release before receiving the response).\r\n* `Carddeclined` - Integrated circuit card declines the transaction before or after the authorisation.\r\n* `Onlinedeclined` - Online authorisation declined the transaction.\r\n* `Offlinedeclined` - Offline authorisation declined the transaction.\r\n* `Suspectedfraud` - Card payment transaction fails because the merchant suspect a fraud.\r\n* `Securityerror` - Security error has occurred in the authorisation response message sent by the acquirer.\r\n* `Cardcaptured` - ATM manager has requested to capture the card.\r\n* `Carderror` - Unable to complete transaction with the card.\r\n* `Customerdecline` - Customer has declined additional fees or a lower amount, transaction fails.\r\n* `Forgottencard` - Customer has left the card in the ATM or a motorised card reader.\r\n* `Fullfilmenterror` - Unable to fulfil, for instance dispensing the cash.\r\n* `Outofcustomerservice` - ATM manager has requested to the ATM to stop customer services.\r\n* `Unabletocapture` - Unable to capture the card as requested.\r\n* `Security` - General security error.\r\n* `Hardware` - Hardware error on the device.\r\n* `Compromised` - Key is compromised.\r\n* `Expired` - Key has expired.\r\n* `Invalidkcv` - Key check value is incorrect.\r\n* `Keyloaderror` - Error during the key download in the security device.\r\n* `Cardretained` - Card has been retained by the ATM or the terminal.\r\n* `Customertimeout` - Customer has not been performed in time an action.\r\n"
    cardpaymentauthorization:
      type: object
      properties:
        TransactionSuccess:
          $ref: '#/components/schemas/truefalseindicatorvalues'
        MerchantOverride:
          $ref: '#/components/schemas/truefalseindicatorvalues'
        ValidityDate:
          $ref: '#/components/schemas/date'
        Response:
          $ref: '#/components/schemas/text'
        AuthorizationCode:
          $ref: '#/components/schemas/value'
        CardholderAddressVerificationResult:
          $ref: '#/components/schemas/cardholderaddressverificationresulttypevalues'
        CSCResult:
          $ref: '#/components/schemas/cscresulttypevalues'
        ElectronicCommerceAuthenticationResult:
          $ref: '#/components/schemas/text'
        FailureReason:
          $ref: '#/components/schemas/failurereasontypevalues'
        AuthorizationEntity:
          $ref: '#/components/schemas/involvedparty'
      description: 'Details the reference, amount, timestamp of the transaction authorization)'
    Capture:
      type: object
      properties:
        CardTransactionRecordReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        CardTransactionNetworkReference:
          $ref: '#/components/schemas/cardnetwork'
        CardTransactionIssuingBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionMerchantAcquiringBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        CardTransactionCurrency:
          $ref: '#/components/schemas/currencycode'
        CardTransactionAmountType:
          $ref: '#/components/schemas/amounttypevalues'
        CardTransactionAmount:
          $ref: '#/components/schemas/amount'
        CardTransactionMerchantReference:
          $ref: '#/components/schemas/cardpaymenttransactioninvolvement'
        CardTransactionLocationReference:
          $ref: '#/components/schemas/location'
        CardTransactionProductandServiceReference:
          $ref: '#/components/schemas/bankingproduct'
        CardTransactionDateandTime:
          type: string
          description: Significant dates and times associated with the transaction
          format: ''
        CardTransactionFXConversionCharge:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionInterchargeFee:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionAuthorizationRecord:
          $ref: '#/components/schemas/cardpaymentauthorization'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    Routing:
      type: object
      properties:
        RoutingTaskResult:
          $ref: '#/components/schemas/test'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    Reconciliation:
      type: object
      properties:
        ReconciliationTaskResult:
          $ref: '#/components/schemas/test'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    cardclearingarrangement:
      type: object
      properties:
        CardClearingArrangement:
          type: string
          description: "An arrangement (obligation and right) defined for doing the clearing of a card based transaction or a batch of card based transactions.\n"
          format: class
      description: "Defines card clearing fees/terms in force - referenced by Network ||\r\n|"
    cardclearingtypevalues:
      enum:
        - Capture
        - Batch
        - Chargeback
      type: string
      description: "Defines the type of clearing process - e.g. capture, batch, chargeback between combinations of N,I&A ||\r\n|"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "The schedule of activities for card clearing ||\r\n|"
    CardClearingProcedure:
      type: object
      properties:
        NetworkReference:
          $ref: '#/components/schemas/cardnetwork'
        ParticipantAcquirerBankReference:
          $ref: '#/components/schemas/involvedparty'
        ParticipantAcquirerBankClearingandSettlementTerms:
          $ref: '#/components/schemas/cardclearingarrangement'
        ParticipantIssuerBankReference:
          $ref: '#/components/schemas/involvedparty'
        ParticipantIssuerBankClearingandSettlementTerms:
          $ref: '#/components/schemas/cardclearingarrangement'
        CardClearingProcessType:
          $ref: '#/components/schemas/cardclearingtypevalues'
        CardClearingProcessDateandTime:
          type: string
          description: The scheduled time for the process - likely initiation time
          format: ''
        CardClearingServiceSchedule:
          $ref: '#/components/schemas/schedule'
      description: 'Complete work tasks following a defined procedure in support of general office activities and product and service delivery within Card Clearing. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CardClearingProcedure:
      description: CardClearingProcedure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardClearingProcedure'
    Capture:
      description: Capture
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
    Addressing:
      description: Addressing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Addressing'
    FXConversion:
      description: FXConversion
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FXConversion'
    Fees:
      description: Fees
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fees'
    Matching:
      description: Matching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Matching'
    Reconciliation:
      description: Reconciliation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reconciliation'
    Routing:
      description: Routing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Routing'
  parameters:
    cardclearingid:
      name: cardclearingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    captureid:
      name: captureid
      in: path
      required: true
      style: simple
      schema:
        type: string
    addressingid:
      name: addressingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    fxconversionid:
      name: fxconversionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    feesid:
      name: feesid
      in: path
      required: true
      style: simple
      schema:
        type: string
    matchingid:
      name: matchingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    reconciliationid:
      name: reconciliationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    routingid:
      name: routingid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CardClearingProcedure:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardClearingProcedure'
      required: true
    Capture:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
      required: true
    Fees:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fees'
      required: true