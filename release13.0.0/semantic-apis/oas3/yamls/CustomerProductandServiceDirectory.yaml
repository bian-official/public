openapi: 3.0.1
info:
  title: Customer Product and Service Directory
  description: This Service Domain maintains the most important details of all the products and services that a customer has acquired from the bank.
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerProductandServiceDirectory/13.0.0
paths:
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Control':
    put:
      tags:
        - CR - CustomerProductAndServiceDirectoryEntry
      summary: Control Customer Product And Service Directory Entry
      description: Control Customer Product And Service Directory Entry
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerProductAndServiceDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProductAndServiceDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Execute':
    put:
      tags:
        - CR - CustomerProductAndServiceDirectoryEntry
      summary: Execute Customer Product And Service Directory Entry
      description: Execute Customer Product And Service Directory Entry
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerProductAndServiceDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProductAndServiceDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Notify':
    get:
      tags:
        - CR - CustomerProductAndServiceDirectoryEntry
      summary: Notify Customer Product And Service Directory Entry
      description: Notify Customer Product And Service Directory Entry
      operationId: Notify
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProductAndServiceDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /CustomerProductandServiceDirectory/Register:
    post:
      tags:
        - CR - CustomerProductAndServiceDirectoryEntry
      summary: Register Customer Product And Service Directory Entry
      description: Register Customer Product And Service Directory Entry
      operationId: Register
      requestBody:
        $ref: '#/components/requestBodies/CustomerProductAndServiceDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProductAndServiceDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Request':
    put:
      tags:
        - CR - CustomerProductAndServiceDirectoryEntry
      summary: Request Customer Product And Service Directory Entry
      description: Request Customer Product And Service Directory Entry
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerProductAndServiceDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProductAndServiceDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Update':
    put:
      tags:
        - CR - CustomerProductAndServiceDirectoryEntry
      summary: Update Customer Product And Service Directory Entry
      description: Update Customer Product And Service Directory Entry
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerProductAndServiceDirectoryEntry'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProductAndServiceDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Retrieve':
    get:
      tags:
        - CR - CustomerProductAndServiceDirectoryEntry
      summary: Retrieve Customer Product And Service Directory Entry
      description: Retrieve Customer Product And Service Directory Entry
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerProductAndServiceDirectoryEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Product/{productid}/Execute':
    put:
      tags:
        - BQ - Product
      summary: Execute In-force Product property
      description: Execute In-force Product property
      operationId: ExecuteProduct
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/productid'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Service/{serviceid}/Execute':
    put:
      tags:
        - BQ - Service
      summary: Execute In-force Service property
      description: Execute In-force Service property
      operationId: ExecuteService
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/serviceid'
      requestBody:
        $ref: '#/components/requestBodies/Service'
      responses:
        '200':
          $ref: '#/components/responses/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Product/{productid}/Notify':
    get:
      tags:
        - BQ - Product
      summary: Notify In-force Product property
      description: Notify In-force Product property
      operationId: NotifyProduct
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/productid'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Service/{serviceid}/Notify':
    get:
      tags:
        - BQ - Service
      summary: Notify In-force Service property
      description: Notify In-force Service property
      operationId: NotifyService
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/serviceid'
      responses:
        '200':
          $ref: '#/components/responses/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Product/Register':
    post:
      tags:
        - BQ - Product
      summary: Register In-force Product property
      description: Register In-force Product property
      operationId: RegisterProduct
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Service/Register':
    post:
      tags:
        - BQ - Service
      summary: Register In-force Service property
      description: Register In-force Service property
      operationId: RegisterService
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
      requestBody:
        $ref: '#/components/requestBodies/Service'
      responses:
        '200':
          $ref: '#/components/responses/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Product/{productid}/Request':
    put:
      tags:
        - BQ - Product
      summary: Request In-force Product property
      description: Request In-force Product property
      operationId: RequestProduct
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/productid'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Service/{serviceid}/Request':
    put:
      tags:
        - BQ - Service
      summary: Request In-force Service property
      description: Request In-force Service property
      operationId: RequestService
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/serviceid'
      requestBody:
        $ref: '#/components/requestBodies/Service'
      responses:
        '200':
          $ref: '#/components/responses/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Product/{productid}/Retrieve':
    get:
      tags:
        - BQ - Product
      summary: Retrieve In-force Product property
      description: Retrieve In-force Product property
      operationId: RetrieveProduct
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/productid'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Service/{serviceid}/Retrieve':
    get:
      tags:
        - BQ - Service
      summary: Retrieve In-force Service property
      description: Retrieve In-force Service property
      operationId: RetrieveService
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/serviceid'
      responses:
        '200':
          $ref: '#/components/responses/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Product/{productid}/Update':
    put:
      tags:
        - BQ - Product
      summary: Update In-force Product property
      description: Update In-force Product property
      operationId: UpdateProduct
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/productid'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProductandServiceDirectory/{customerproductandservicedirectoryid}/Service/{serviceid}/Update':
    put:
      tags:
        - BQ - Service
      summary: Update In-force Service property
      description: Update In-force Service property
      operationId: UpdateService
      parameters:
        - $ref: '#/components/parameters/customerproductandservicedirectoryid'
        - $ref: '#/components/parameters/serviceid'
      requestBody:
        $ref: '#/components/requestBodies/Service'
      responses:
        '200':
          $ref: '#/components/responses/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The configuration of Customer Products And Services Directory Entry ||\r\n|"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to Party who provides Service ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: An unique reference to an item or an occurrence of Customer Products And Services Directory Entry GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO20022 BM ()
    servicetypevalues:
      enum:
        - ITService
        - AdministrativeService
        - SystemService
        - FinancialService
        - InformationService
        - BusinessService
      type: string
      description: ">\r\n* `ITService` - \r\n* `AdministrativeService` - \r\n* `SystemService` - \r\n* `FinancialService` - \r\n* `InformationService` - \r\n* `BusinessService` - \r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: The status of Customer Products And Services Directory Entry Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This feature calculates and tracks interest earnings or charges on accounts, loans, or investments over time.\r\n* `WithdrawalFeature` - The withdraw feature typically refers to an option or functionality that allows users to retrieve or remove something from a system or platform.\r\n* `DepositFeature` - This refers to a functionality that allows users to add funds to an account or system, often by transferring money from another source.\r\n* `SweepFeature` - \r\n* `LienFeature` - \r\n* `PaymentFeature` - This refers to the functionality that facilitates or tracks the transfer of funds for a purchase or settlement of dues.\r\n* `RepaymentFeature` - This feature facilitates or manages the process of paying back borrowed funds, such as loans, credit card balances, or advances.\r\n* `LimitFeature` - This feature sets, monitors, or enforces restrictions on the maximum amount that can be accessed, spent, or transacted within a system.\r\n* `OverdraftFeature` - This functionality allows users to withdraw more money than what is available in their account balance, often up to a predefined limit.\r\n* `StatementFeature` - The statement feature refers to a functionality in banking, finance, or digital platforms that provides users with a detailed record of their transactions or activities over a specific period.\r\n* `CurrencyExchangeFeature` - This feature enables users to convert funds from one currency to another at prevailing exchange rates, often within financial or payment platforms.\r\n* `PriceFeature` - This feature involves displaying or managing the price of goods, services, or financial instruments within a platform.\r\n"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: A characteristic of service which refers 1) mainly to the function or condition of service. 2) to non-functional features like quality and security
    Service:
      type: object
      properties:
        ServiceInstanceReference:
          $ref: '#/components/schemas/identifier'
        ServiceIdentification:
          $ref: '#/components/schemas/identifier'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceLifecycleStatus:
          $ref: '#/components/schemas/status'
        ServiceFeature:
          $ref: '#/components/schemas/feature'
      description: The In-force Service property properties that represent a discrete aspect of the In-force Service property
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    productfeaturetypevalues:
      enum:
        - Bankingservice
        - Administrationservice
        - Accessservice
        - Pricefeature
      type: string
      description: ">\r\n* `Bankingservice` - A classification that distinguishes between instances of product features according to the core banking services, functionality and/or objectives of banking.\n\ne.g. deposit services, exchange services, etc.\n\nThe primary reason for the contract with the client are the banking services. These services can be classified as follows:\n1. Selling services\n2. Financial Instruments Exchange\n3. Financial Stock Management\n4. Financial Transfers\n5. Financial Risk Transfer\n6. Business Operating\n7. Advisory\n8. Reporting\n\n\r\n* `Administrationservice` - A classification that distinguishes between instances of product features according to administrative tasks related to the Banking Product or Service.\r\n* `Accessservice` - A classification that distinguishes between product features according to way of the banking services can be accessed.\n\nThe access to services becomes more and more important in the evolving markets. \nWe need to separate different parts:\n1. The physical access to the infrastructure that allows access to the bank (where)\n2. The authorization of different parties to use the services of the bank (who)\n3. The agreed procedure to have access to different services (how)\n4. The services that are available for the different parties (what)\n\r\n* `Pricefeature` - A classification that distinguishes between instances of product features according to the cost/profit that is related to Banking Products or Services.\n\nIn all commercial offerings, there is an agreed cost for both parties (e.g. the interest arrangements are in both directions). The pricing structure of products or packages is a service that gives the possibility to the client to adapt his costs to his individual situation.\nWe see different generic categories in the pricing structure of the different products.\n1. Compensations\n2. Prices\n3. Fees\n4. Discounts\r\n"
    productfeature:
      type: object
      properties:
        ProductFeatureType:
          $ref: '#/components/schemas/productfeaturetypevalues'
        ProductFeatureSpecification:
          $ref: '#/components/schemas/text'
      description: ''
    Product:
      type: object
      properties:
        ProductInstanceReference:
          $ref: '#/components/schemas/identifier'
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductName:
          $ref: '#/components/schemas/name'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductFeature:
          $ref: '#/components/schemas/productfeature'
      description: The In-force Service property properties that represent a discrete aspect of the In-force Service property
    directoryentrydatetypevalues:
      enum:
        - OpenDate
        - RefreshDate
      type: string
      description: ">\r\n* `OpenDate` - \r\n* `RefreshDate` - \r\n"
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: ''
    directoryentry:
      type: object
      properties:
        DirectoryEntryDateType:
          $ref: '#/components/schemas/directoryentrydatetypevalues'
        DirectoryEntryDate:
          $ref: '#/components/schemas/date'
        DirectoryEntryStatus:
          $ref: '#/components/schemas/status'
      description: ''
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: ''
    CustomerProductsandServicesOutcome:
      type: object
      properties:
        CustomerProductsandServicesEntry:
          $ref: '#/components/schemas/directoryentry'
        CustomerProductsandServicesWorkProduct:
          $ref: '#/components/schemas/workproduct'
      description: The In-force Service property properties that represent a discrete aspect of the In-force Service property
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "The timetable to capture and maintain Customer Products And Services Directory Entry ||\r\n|"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: "Reference to the log of (update) ativities/events of Customer Products And Services Directory Entry ||\r\n|"
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: " ||\r\n|"
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        ServiceIdentification:
          $ref: '#/components/schemas/identifier'
        ServiceLifecycleStatus:
          $ref: '#/components/schemas/status'
        ServiceFeature:
          $ref: '#/components/schemas/feature'
      description: ''
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - BrokerAgreement
        - SalesAgreement
        - PurchaseAgreement
        - MaintenanceAgreement
        - ProductAgreement
        - ProductSalesAgreement
        - ResourceAgreement
      type: string
      description: ">\r\n* `CustomerAgreement` - \r\n* `SupplierAgreement` - \r\n* `BrokerAgreement` - \r\n* `SalesAgreement` - \r\n* `PurchaseAgreement` - \r\n* `MaintenanceAgreement` - \r\n* `ProductAgreement` - \r\n* `ProductSalesAgreement` - \r\n* `ResourceAgreement` - \r\n"
    agreementstatustypevalues:
      enum:
        - Offered
        - Confirmed
        - Completed
        - Signed
        - Terminated
        - Rejected
      type: string
      description: ">\r\n* `Offered` - \r\n* `Confirmed` - \r\n* `Completed` - \r\n* `Signed` - \r\n* `Terminated` - \r\n* `Rejected` - \r\n"
    agreementstatus:
      type: object
      properties:
        AgreementStatus:
          $ref: '#/components/schemas/status'
        AgreementStatusType:
          $ref: '#/components/schemas/agreementstatustypevalues'
      description: 'A characteristic of agreement which refers to the LifecycleStatus of agreement (e.g., potential, offered, confirmed, completed, signed, terminated).'
    agreement:
      type: object
      properties:
        AgreementSignedDate:
          $ref: '#/components/schemas/date'
        AgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        AgreementValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AgreementVersion:
          $ref: '#/components/schemas/text'
        AgreementStatus:
          $ref: '#/components/schemas/agreementstatus'
        AgreementSubjectMatter:
          $ref: '#/components/schemas/text'
        AgreementIdentification:
          $ref: '#/components/schemas/identifier'
        AgreementDate:
          $ref: '#/components/schemas/datetime'
        AgreementDescription:
          $ref: '#/components/schemas/text'
      description: ''
    serviceagreement:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/text'
        ServiceReference:
          $ref: '#/components/schemas/service'
        AgreementReference:
          $ref: '#/components/schemas/agreement'
      description: " ||\r\n|"
    CustomerProductAndServiceDirectoryEntry:
      type: object
      properties:
        CustomerProductAndServiceDirectoryEntryDescription:
          $ref: '#/components/schemas/text'
        CustomerProductAndServiceDirectoryEntrySchedule:
          $ref: '#/components/schemas/schedule'
        CustomerProductAndServiceDirectoryEntryVersion:
          type: string
          description: The version of Customer Products And Services Directory Entry
          format: number
        CustomerProductAndServiceDirectoryEntryStatus:
          $ref: '#/components/schemas/status'
        CustomerProductAndServiceDirectoryEntryUsageLog:
          $ref: '#/components/schemas/log'
        CustomerProductAndServiceDirectoryEntryUpdateLog:
          $ref: '#/components/schemas/log'
        CustomerProductAndServiceDirectoryEntryServiceConfiguration:
          $ref: '#/components/schemas/text'
        CustomerProductAndServiceDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/identifier'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        ProductAgreementReference:
          $ref: '#/components/schemas/productagreement'
        ServicerReference:
          $ref: '#/components/schemas/involvedparty'
        ServiceAgreementReference:
          $ref: '#/components/schemas/serviceagreement'
      description: Capture and maintain reference information about some type of entitity within Customer Products and Services.
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerProductAndServiceDirectoryEntry:
      description: CustomerProductAndServiceDirectoryEntry
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerProductAndServiceDirectoryEntry'
    Product:
      description: Product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    Service:
      description: Service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
  parameters:
    customerproductandservicedirectoryid:
      name: customerproductandservicedirectoryid
      in: path
      required: true
      style: simple
      schema:
        type: string
    productid:
      name: productid
      in: path
      required: true
      style: simple
      schema:
        type: string
    serviceid:
      name: serviceid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerProductAndServiceDirectoryEntry:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerProductAndServiceDirectoryEntry'
      required: true
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
      required: true
    Service:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
      required: true