openapi: 3.0.1
info:
  title: Current Account
  description: 'This service domain orchestrates a consumer checking/demand deposit account. The typical range of services and fees covers payments and deposits, standing orders, sweeps, liens, check and debit card access.'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CurrentAccount/13.0.0
paths:
  /CurrentAccount/Initiate:
    post:
      tags:
        - CR - CurrentAccountFacility
      summary: InCR Initiate A new Current Account
      description: InCR Initiate A new Current Account
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CurrentAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/CurrentAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Update':
    put:
      tags:
        - CR - CurrentAccountFacility
      summary: UpCR Update details of a current account
      description: UpCR Update details of a current account
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/CurrentAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/CurrentAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Control':
    put:
      tags:
        - CR - CurrentAccountFacility
      summary: CoCR Control the processing of an current account
      description: CoCR Control the processing of an current account
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/CurrentAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/CurrentAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Retrieve':
    get:
      tags:
        - CR - CurrentAccountFacility
      summary: ReCR Retrieve information about a current account - either standard canned reports or selected instance attribute values
      description: ReCR Retrieve information about a current account - either standard canned reports or selected instance attribute values
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      responses:
        '200':
          $ref: '#/components/responses/CurrentAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Interest/{interestid}/Retrieve':
    get:
      tags:
        - BQ - Interest
      summary: ReBQ Retrieve details about interest applied to the account
      description: ReBQ Retrieve details about interest applied to the account
      operationId: RetrieveInterest
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/interestid'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/ServiceFee/Initiate':
    post:
      tags:
        - BQ - ServiceFee
      summary: InBQ Initiate service fees against an account
      description: InBQ Initiate service fees against an account
      operationId: InitiateServiceFee
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFee'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/ServiceFee/{servicefeeid}/Execute':
    put:
      tags:
        - BQ - ServiceFee
      summary: ExBQ Apply a service fee to the account
      description: ExBQ Apply a service fee to the account
      operationId: ExecuteServiceFee
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/servicefeeid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFee'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/ServiceFee/{servicefeeid}/Retrieve':
    get:
      tags:
        - BQ - ServiceFee
      summary: ReBQ Retrieve information about a service fee applied to the account
      description: ReBQ Retrieve information about a service fee applied to the account
      operationId: RetrieveServiceFee
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/servicefeeid'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Sweep/Initiate':
    post:
      tags:
        - BQ - Sweep
      summary: InBQ Set up an account sweep
      description: InBQ Set up an account sweep
      operationId: InitiateSweep
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/Sweep'
      responses:
        '200':
          $ref: '#/components/responses/Sweep'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Sweep/{sweepid}/Update':
    put:
      tags:
        - BQ - Sweep
      summary: UpBQ Update details of an existing account sweep
      description: UpBQ Update details of an existing account sweep
      operationId: UpdateSweep
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/sweepid'
      requestBody:
        $ref: '#/components/requestBodies/Sweep'
      responses:
        '200':
          $ref: '#/components/responses/Sweep'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Sweep/{sweepid}/Execute':
    put:
      tags:
        - BQ - Sweep
      summary: ExBQ Trigger an account sweep transaction
      description: ExBQ Trigger an account sweep transaction
      operationId: ExecuteSweep
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/sweepid'
      requestBody:
        $ref: '#/components/requestBodies/Sweep'
      responses:
        '200':
          $ref: '#/components/responses/Sweep'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Sweep/{sweepid}/Retrieve':
    get:
      tags:
        - BQ - Sweep
      summary: ReBQ Retrieve details about a sweep facility or specific sweep transaction
      description: ReBQ Retrieve details about a sweep facility or specific sweep transaction
      operationId: RetrieveSweep
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/sweepid'
      responses:
        '200':
          $ref: '#/components/responses/Sweep'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Withdrawal/Initiate':
    post:
      tags:
        - BQ - Withdrawal
      summary: InBQ Initialize withdrawal transaction
      description: InBQ Initialize withdrawal transaction
      operationId: InitiateWithdrawal
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/Withdrawal'
      responses:
        '200':
          $ref: '#/components/responses/Withdrawal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Withdrawal/{withdrawalid}/Update':
    put:
      tags:
        - BQ - Withdrawal
      summary: UpBQ Update or correct a withdrawal transaction
      description: UpBQ Update or correct a withdrawal transaction
      operationId: UpdateWithdrawal
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/withdrawalid'
      requestBody:
        $ref: '#/components/requestBodies/Withdrawal'
      responses:
        '200':
          $ref: '#/components/responses/Withdrawal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Withdrawal/{withdrawalid}/Execute':
    put:
      tags:
        - BQ - Withdrawal
      summary: ExBQ Execute a withdrawal transaction
      description: ExBQ Execute a withdrawal transaction
      operationId: ExecuteWithdrawal
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/withdrawalid'
      requestBody:
        $ref: '#/components/requestBodies/Withdrawal'
      responses:
        '200':
          $ref: '#/components/responses/Withdrawal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Withdrawal/{withdrawalid}/Retrieve':
    get:
      tags:
        - BQ - Withdrawal
      summary: ReBQ Retrieve details about a withdrawal transaction
      description: ReBQ Retrieve details about a withdrawal transaction
      operationId: RetrieveWithdrawal
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/withdrawalid'
      responses:
        '200':
          $ref: '#/components/responses/Withdrawal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Payment/Initiate':
    post:
      tags:
        - BQ - Payment
      summary: InBQ Initialize a payment transaction
      description: InBQ Initialize a payment transaction
      operationId: InitiatePayment
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/Payment'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Payment/{paymentid}/Update':
    put:
      tags:
        - BQ - Payment
      summary: UpBQ Update a payment transaction configuration or specific transaction
      description: UpBQ Update a payment transaction configuration or specific transaction
      operationId: UpdatePayment
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/paymentid'
      requestBody:
        $ref: '#/components/requestBodies/Payment'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Payment/{paymentid}/Exchange':
    put:
      tags:
        - BQ - Payment
      summary: EcBQ Verify/approve a scheduled repeating payment
      description: EcBQ Verify/approve a scheduled repeating payment
      operationId: ExchangePayment
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/paymentid'
      requestBody:
        $ref: '#/components/requestBodies/Payment'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Payment/{paymentid}/Execute':
    put:
      tags:
        - BQ - Payment
      summary: ExBQ Trigger a payment for a repeating payment set up
      description: ExBQ Trigger a payment for a repeating payment set up
      operationId: ExecutePayment
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/paymentid'
      requestBody:
        $ref: '#/components/requestBodies/Payment'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Payment/{paymentid}/Retrieve':
    get:
      tags:
        - BQ - Payment
      summary: ReBQ Retrieve details about a payment transaction or arrangement
      description: ReBQ Retrieve details about a payment transaction or arrangement
      operationId: RetrievePayment
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/paymentid'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/IssuedDevice/Initiate':
    post:
      tags:
        - BQ - IssuedDevice
      summary: Initiate Provision of Issued Device
      description: Initiate Provision of Issued Device
      operationId: InitiateIssuedDevice
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/IssuedDevice'
      responses:
        '200':
          $ref: '#/components/responses/IssuedDevice'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/IssuedDevice/{issueddeviceid}/Update':
    put:
      tags:
        - BQ - IssuedDevice
      summary: Update Details of Issued Device Allocated to This Account
      description: Update Details of Issued Device Allocated to This Account
      operationId: UpdateIssuedDevice
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/issueddeviceid'
      requestBody:
        $ref: '#/components/requestBodies/IssuedDevice'
      responses:
        '200':
          $ref: '#/components/responses/IssuedDevice'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/IssuedDevice/{issueddeviceid}/Retrieve':
    get:
      tags:
        - BQ - IssuedDevice
      summary: Retrieve Details about Issued Device
      description: Retrieve Details about Issued Device
      operationId: RetrieveIssuedDevice
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/issueddeviceid'
      responses:
        '200':
          $ref: '#/components/responses/IssuedDevice'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Interest/{interestid}/Execute':
    put:
      tags:
        - BQ - Interest
      summary: ExBQ Execute Apply Interest
      description: ExBQ Execute Apply Interest
      operationId: ExecuteInterest
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/interestid'
      requestBody:
        $ref: '#/components/requestBodies/Interest'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/ServiceFee/{servicefeeid}/Update':
    put:
      tags:
        - BQ - ServiceFee
      summary: Update details about an applied service fee
      description: Update details about an applied service fee
      operationId: UpdateServiceFee
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/servicefeeid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFee'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/BookingAuthorization/{bookingauthorizationid}/Execute':
    put:
      tags:
        - BQ - BookingAuthorization
      summary: Execute Authorization of Booking
      description: Execute Authorization of Booking
      operationId: ExecuteBookingAuthorization
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/bookingauthorizationid'
      requestBody:
        $ref: '#/components/requestBodies/BookingAuthorization'
      responses:
        '200':
          $ref: '#/components/responses/BookingAuthorization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/AmountBlock/Initiate':
    post:
      tags:
        - BQ - AmountBlock
      summary: Initiate an amount block
      description: Initiate an amount block
      operationId: InitiateAmountBlock
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/AmountBlock'
      responses:
        '200':
          $ref: '#/components/responses/AmountBlock'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/AmountBlock/{amountblockid}/Retrieve':
    get:
      tags:
        - BQ - AmountBlock
      summary: Retrieve details about an amount block
      description: Retrieve details about an amount block
      operationId: RetrieveAmountBlock
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/amountblockid'
      responses:
        '200':
          $ref: '#/components/responses/AmountBlock'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/AmountBlock/{amountblockid}/Update':
    put:
      tags:
        - BQ - AmountBlock
      summary: Update details of an amount block
      description: Update details of an amount block
      operationId: UpdateAmountBlock
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/amountblockid'
      requestBody:
        $ref: '#/components/requestBodies/AmountBlock'
      responses:
        '200':
          $ref: '#/components/responses/AmountBlock'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Deposit/{depositid}/Update':
    put:
      tags:
        - BQ - Deposit
      summary: UpBQ Update or correct a deposit transaction
      description: UpBQ Update or correct a deposit transaction
      operationId: UpdateDeposit
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/depositid'
      requestBody:
        $ref: '#/components/requestBodies/Deposit'
      responses:
        '200':
          $ref: '#/components/responses/Deposit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Deposit/Initiate':
    post:
      tags:
        - BQ - Deposit
      summary: InBQ Initialize deposit transaction
      description: InBQ Initialize deposit transaction
      operationId: InitiateDeposit
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
      requestBody:
        $ref: '#/components/requestBodies/Deposit'
      responses:
        '200':
          $ref: '#/components/responses/Deposit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Deposit/{depositid}/Execute':
    put:
      tags:
        - BQ - Deposit
      summary: ExBQ Execute a deposit transaction
      description: ExBQ Execute a deposit transaction
      operationId: ExecuteDeposit
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/depositid'
      requestBody:
        $ref: '#/components/requestBodies/Deposit'
      responses:
        '200':
          $ref: '#/components/responses/Deposit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CurrentAccount/{currentaccountid}/Deposit/{depositid}/Retrieve':
    get:
      tags:
        - BQ - Deposit
      summary: ReBQ Retrieve details about a deposit transaction
      description: ReBQ Retrieve details about a deposit transaction
      operationId: RetrieveDeposit
      parameters:
        - $ref: '#/components/parameters/currentaccountid'
        - $ref: '#/components/parameters/depositid'
      responses:
        '200':
          $ref: '#/components/responses/Deposit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: Specifies the reasons for the status.
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Key dates associated with the account ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: "The current calculated limit ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: Reference identifier linking the account to appropriate tax handling GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO20022 BM ()
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: Reference to the associated party Party|Party (https://www.iso20022.org/standardsrepository/type/Party)|Standard|ISO20022BM ()
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Reference to the account primary party/owner ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    accountstatustypevalues:
      enum:
        - Enabled
        - Disabled
        - Deleted
        - Proforma
        - Pending
      type: string
      description: ' OBAccountStatus1Code| ()|Standard|UK Open Banking ()'
    accountstatus:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/status'
        AccountStatusType:
          $ref: '#/components/schemas/accountstatustypevalues'
      description: "A characteristic of account which refers to the LifecycleStatus of account like opened, closed, blocked, etc.\n\nSpecifies the current state of an account. (ISO20022)"
    accountidentificationtypevalues:
      enum:
        - BBAN
        - IBAN
        - UPIC
        - AccountNumber
        - PAN
        - Paym
        - Wallet
        - SortCodeAndAccountNumber
      type: string
      description: ">\r\n* `BBAN` - Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniquely identify the account of a customer. (ISO20022)\n\n.\r\n* `IBAN` - International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 \"Banking and related financial services - International Bank Account Number (IBAN)\" version 1997-10-01, or later revisions. (ISO20022)\n\nAn identifier used internationally by financial institutions to uniquely identify the account of a customer at a financial institution, as described in the latest edition of the international standard ISO 13616. \"Banking and related financial services - International Bank Account Number (IBAN)\". (OBExternalAccountIdentification4Code)\r\n* `UPIC` - Universal Payment Identification Code (UPIC) - identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes. (ISO20022)\r\n* `AccountNumber` - String of characters (mainly numbers) used to identify an account.(ISO20022)\n\r\n* `PAN` - Primary Account Number - identifier scheme used to identify a card account. (OBExternalAccountIdentification4Code)\r\n* `Paym` - Paym Scheme to make payments via mobile (OBExternalAccountIdentification4Code)\r\n* `Wallet` - A primary and unique account identifier used to identify a wallet.\nAn ASPSP must document on their developer portal, the payment methods that supports this account identifier.(OBExternalAccountIdentification4Code)\r\n* `SortCodeAndAccountNumber` - Sort Code and Account Number - identifier scheme used in the UK by financial institutions to identify the account of a customer. The identifier is the concatenation of the 6 digit UK sort code and 8 digit account number. (UK Open Banking)\r\n"
    accountidentification:
      type: object
      properties:
        AccountIdentificationType:
          $ref: '#/components/schemas/accountidentificationtypevalues'
        AccountIdentification:
          $ref: '#/components/schemas/identifier'
      description: The associated account number in any suitable format (e.g. IBAN) AccountIdentification |AccountIdentification  (https://www.iso20022.org/standardsrepository/type/AccountIdentification)|Standard|ISO20022 BM ()
    accountdatetimetypevalues:
      enum:
        - OpeningDate
        - ClosingDate
        - BlockingDate
        - MaturityDate
        - LiveDate
        - RenewalDate
      type: string
      description: 'Type of key dates associated with the account (e.g. opening date, closing date) Account/OpeningDate|Account/OpeningDate (https://www.iso20022.org/standardsrepository/type/Account)|Standard|ISO20022 BM ()'
    accountdatetime:
      type: object
      properties:
        AccountDateType:
          $ref: '#/components/schemas/accountdatetimetypevalues'
        AccountDate:
          $ref: '#/components/schemas/datetime'
      description: 'A characteristic of account which refers to LifecycleDate of account (e.g., ClosingDate, OpeningDate, LiveDate, etc.) '
    accounttypevalues:
      enum:
        - DebitAccount
        - CreditAccount
        - VostroAcount
        - NostroAccount
        - PaymentAccount
        - SettlementAccount
        - SavingAccount
        - CurrentAccount
        - CashAccount
        - LoanAccount
        - IndividualAccount
        - JointAccount
        - LiquidationAccount
        - ProvisionAccount
        - PartnershipAccount
        - InvestmentAccount
      type: string
      description: ">\r\n* `DebitAccount` - \r\n* `CreditAccount` - \r\n* `VostroAcount` - In correspondent banking, an account held by one bank on behalf of another bank (the customer bank); the customer bank regards this account as its nostro account. (ECB)\r\n* `NostroAccount` - In correspondent banking, an account held by a customer bank on the books of another bank acting as a service provider. The other bank regards this account as a loro account. (ECB)\r\n* `PaymentAccount` - \r\n* `SettlementAccount` - A specific purpose account used to post debit and credit entries as a result of the transaction. (ISO20022)\n\nAccount which is used for settlement. (ISO20022)\r\n* `SavingAccount` - \r\n* `CurrentAccount` - \r\n* `CashAccount` - \r\n* `LoanAccount` - \r\n* `IndividualAccount` - \r\n* `JointAccount` - \r\n* `LiquidationAccount` - \r\n* `ProvisionAccount` - \r\n* `PartnershipAccount` - \r\n* `InvestmentAccount` - \r\n"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: ''
    balancetypevalues:
      enum:
        - OpeningBalance
        - ClosingBalance
        - CurrentBalance
        - AvailableBalance
        - LedgerBalance
        - ReserveBalance
        - FreeBalance
        - PrincipalBalance
        - ClosingAvailable
        - ClosingBooked
        - ForwardAvailable
        - Information
        - InterimAvailable
        - InterimBooked
        - OpeningAvailable
        - OpeningBooked
        - PreviouslyClosedBooked
        - Expected
      type: string
      description: ">\r\n* `OpeningBalance` - Book balance of the account at the beginning of the account servicer's business day. It always equals the closing book balance from the previous business day. Note: the available balance at the beginning of the account servicer's business day may be different from the closing book balance from the previous business day. (ISO20022)\r\n* `ClosingBalance` - Balance of the account at the end of the account servicer's business day. It is the sum of the opening balance at the beginning of the day and all entries booked to the account during the account servicer's business day. (ISO20022)\r\n* `CurrentBalance` - Balance of the account at a precise moment in time. (ISO20022)\r\n* `AvailableBalance` - Balance of money or securities that is at the disposal of the account owner on the date specified. (ISO20022)\r\n* `LedgerBalance` - Ledger balance refers to posted transactions (e.g. limit authorisation amount - posted transactions). (ISO20022)\r\n* `ReserveBalance` - \r\n* `FreeBalance` - \r\n* `PrincipalBalance` - \r\n* `ClosingAvailable` - Closing balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `ClosingBooked` - Balance of the account at the end of the pre-agreed account reporting period. It is the sum of the opening booked balance at the beginning of the period and all entries booked to the account during the pre-agreed account reporting period.\r\n* `ForwardAvailable` - Forward available balance of money that is at the disposal of the account owner on the date specified.\r\n* `Information` - Balance for informational purposes.\r\n* `InterimAvailable` - Available balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `InterimBooked` - Balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `OpeningAvailable` - Opening balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `OpeningBooked` - Book balance of the account at the beginning of the account reporting period. It always equals the closing book balance from the previous report.\r\n* `PreviouslyClosedBooked` - Balance of the account at the previously closed account reporting period. The opening booked balance for the new period has to be equal to this balance.\nUsage: the previously booked closing balance should equal (inclusive date) the booked closing balance of the date it references and equal the actual booked opening balance of the current date.\r\n* `Expected` - Balance, composed of booked entries and pending items known at the time of calculation, which projects the end of day balance if everything is booked on the account and no other entry is posted.\r\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    balancecounterpartytypevalues:
      enum:
        - Bilateral
        - Multilateral
      type: string
      description: ">\r\n* `Bilateral` - Balance calculated regarding one member in the system. (ISO20022)\r\n* `Multilateral` - Balance calculated regarding all members in the system. (ISO20022)\r\n"
    balancesubtypevalues:
      enum:
        - Adjustment
        - Basecurrency
        - Blocked
        - Blockedfunds
        - Daylightoverdraft
        - Eligibleassets
        - Firmcollateralization
        - Amountsthathavebeenusedtoserveasfirmcollateral
        - Securitiesforecast
        - Netfunding
        - Intermediate
        - Localcurrency
        - Limitrelated
        - Reservedliquidity
        - Securitiespending
        - Payinpayout
        - Progressiveaverage
        - Reserve
        - Selfcollateralization
        - Amountsthathavebeenusedtoserveasselfcollateral
        - Threshold
      type: string
      description: ">\r\n* `Adjustment` - Balance to be held in the settlement account in order to comply with the average reserve due, in the event that the bank's balance is equal to the reserve due during the remaining days of the maintenance period.\r\n* `Basecurrency` - Balance representing the amount in the domestic or base accounting currency.\r\n* `Blocked` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes. In some countries, a blocked balance is known as a 'reserve' balance.\r\n* `Blockedfunds` - Balance representing funds that cannot be touched by the account owner.\r\n* `Daylightoverdraft` - Balance representing the intra day overdraft granted by the Central Bank to financial institutions participating in a RTGS system. This balance may vary over time and shall be offset at the end of the day.\r\n* `Eligibleassets` - Balance representing the potential loan a Central Bank would make in cash if the collateral is pledged, eg, securities available and eligible as collateral with the Central Bank.\r\n* `Firmcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral.\r\n* `Amountsthathavebeenusedtoserveasfirmcollateral` - Balance representing the cash equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral and have been used as collateral.\r\n* `Securitiesforecast` - Balance representing the total of all balance types representing the forecast of transactions to settle, blocked items, custody transactions and corporate actions cash disbursements.\r\n* `Netfunding` - Balance representing the net amount to be funded resulting from the difference between the total of all transactions with a cash impact and the existing cash coverage.\r\n* `Intermediate` - Balance representing an intermediate amount such as the opening or closing balance incrementally carried forward from one page to the next in a multi-page statement or report.\r\n* `Localcurrency` - Balance representing the amount in the local market currency for which the asset is held.\r\n* `Limitrelated` - Balance of a specific limit value, eg, a bilateral balance is calculated in relation to a given bilateral limit.\r\n* `Reservedliquidity` - Balance representing the amount that a financial institution has set aside for a specific reason and which is therefore not available. In the context of CSDs, reservation of liquidity made to meet settlement obligations.\r\n* `Securitiespending` - Balance of securities pending delivery, such as orders to sell securities have been executed but settlement of the open transactions has not been confirmed.\r\n* `Payinpayout` - Balance representing the fictive amount of automated direct debits or payment based on standing arrangements between the CSD and the user. Usage: Pay-Ins and Pay-Outs can be different based on individual payment instructions or available funds.\r\n* `Progressiveaverage` - Average of the daily balances on the account used to fulfil the reserve requirements calculated from the beginning of the maintenance period.\r\n* `Reserve` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes.\r\n* `Selfcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of the net incoming balance of securities qualified to serve as collateral for which settlement instructions are held at.\r\n* `Amountsthathavebeenusedtoserveasselfcollateral` - Balance representing the cash-equivalent resulting from evaluation of incoming securities, qualified to serve as collateral and actually used as collateral, which have been settled during the settlement process.\r\n* `Threshold` - Balance representing the amount that will be destined for investment. Difference between available balance and threshold for investment limit.\r\n"
    accountbalance:
      type: object
      properties:
        BalanceAmount:
          $ref: '#/components/schemas/amount'
        BalanceType:
          $ref: '#/components/schemas/balancetypevalues'
        BalanceValueDate:
          $ref: '#/components/schemas/datetime'
        BalanceIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        BalanceCounterpartyType:
          $ref: '#/components/schemas/balancecounterpartytypevalues'
        BalanceCalculationDate:
          $ref: '#/components/schemas/datetime'
        BalanceSubType:
          $ref: '#/components/schemas/balancesubtypevalues'
      description: ' Balance|Balance (https://www.iso20022.org/standardsrepository/type/Balance)|Standard|ISO20022 BM ()'
    currencytypevalues:
      enum:
        - BaseCurrency
        - ReportingCurrency
        - SecondaryCurrency
        - TransferCurrency
      type: string
      description: ">\r\n* `BaseCurrency` - Base currency of the account. (ISO20022)\n\r\n* `ReportingCurrency` - Currency used to calculate and report the balance and related entries of an account. (ISO20022)\n\r\n* `SecondaryCurrency` - \r\n* `TransferCurrency` - Currency of the amount to be transferred which may be different from the currency of the debtor's account. (ISO20022)\r\n"
    accountcurrency:
      type: object
      properties:
        AccountCurrencyType:
          $ref: '#/components/schemas/currencytypevalues'
        AccountCurrency:
          $ref: '#/components/schemas/currencycode'
      description: The primary account currency CurrencyCode|CurrencyCode (https://www.iso20022.org/standardsrepository/type/CurrencyCode)|Standard|ISO20022 BM ()
    account:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/accountstatus'
        AccountIdentification:
          $ref: '#/components/schemas/accountidentification'
        AccountDate:
          $ref: '#/components/schemas/accountdatetime'
        AccountType:
          $ref: '#/components/schemas/accounttypevalues'
        AccountPurpose:
          $ref: '#/components/schemas/text'
        AccountBalance:
          $ref: '#/components/schemas/accountbalance'
        AccountCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountDescription:
          $ref: '#/components/schemas/text'
        AccountName:
          $ref: '#/components/schemas/name'
      description: Details of the linked account Account|Account  (https://www.iso20022.org/standardsrepository/type/Account)|Standard|ISO20022 BM ()
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: 'Rate of fee (percentage) to be applied '
    modalitytypevalues:
      enum:
        - AllocationModality
        - CalculationModality
        - DerivationModality
        - PaymentModality
        - ProcessingModality
        - ApplicationModality
        - DeliveryModality
      type: string
      description: ">\r\n* `AllocationModality` - \r\n* `CalculationModality` - \r\n* `DerivationModality` - \r\n* `PaymentModality` - \r\n* `ProcessingModality` - \r\n* `ApplicationModality` - \r\n* `DeliveryModality` - \r\n"
    servicemodality:
      type: object
      properties:
        ServiceModalityType:
          $ref: '#/components/schemas/modalitytypevalues'
      description: Description of the fee calculation method for this fee type
    feepaymentmethodtypevalues:
      enum:
        - Cash
        - Unit
      type: string
      description: ">\r\n* `Cash` - Payment is with cash.\r\n* `Unit` - Units are redeemed to cover payment.\r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feecalculationmethodtypevalues:
      enum:
        - Flat
        - Perunit
        - Percentage
        - Rateperbrackets
        - Ratewithminimumamount
        - Ratewithmaximumamount
        - Other
        - Grossamount
        - Netamount
        - Netassetvalueprice
      type: string
      description: ">\r\n* `Flat` - Charge/tax basis is a lump sum.\r\n* `Perunit` - Charges/tax basis is per unit of financial instrument.\r\n* `Percentage` - Charge/tax basis is a percentage.\r\n* `Rateperbrackets` - Charge/tax basis is a percentage which depends on the tax brackets.\r\n* `Ratewithminimumamount` - Rate with a minimum amount.\r\n* `Ratewithmaximumamount` - Rate with a maximum amount.\r\n* `Other` - Another type of taxation basis.\r\n* `Grossamount` - Charge/Commission/tax basis is based on the gross amount.\r\n* `Netamount` - Charge/commission/tax basis is based on the net amount.\r\n* `Netassetvalueprice` - Charge/tax basis is the price.\r\n"
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
        - ChequeRelatedFee
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n* `ChequeRelatedFee` - \r\n"
    feecalculationfrequencyvalues:
      enum:
        - Onclosing
        - Onopening
        - Chargingperiod
        - Daily
        - Peritem
        - Monthly
        - Onanniversary
        - Other
        - Perhundredpounds
        - Perhour
        - Peroccurrence
        - Persheet
        - Pertransaction
        - Pertransactionamount
        - Pertransactionpercentage
        - Quarterly
        - Sixmonthly
        - Statementmonthly
        - Weekly
        - Yearly
      type: string
      description: ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging period\r\n* `Daily` - This fee is triggered every day\r\n* `Peritem` - This fee is triggered by the processing of an item on the product\r\n* `Monthly` - This fee is triggered monthly\r\n* `Onanniversary` - This fee is triggered on the anniversary of opening the product\r\n* `Other` - Other Fee Frequency\r\n* `Perhundredpounds` - This fee is triggered for every hundred pounds withdrawn\r\n* `Perhour` - This fee is triggered every hour\r\n* `Peroccurrence` - This fee is triggered per occurrence of the transaction or service. This differs from PerItem, in that if a batch of items is processed at the same time, a PerOccurrence fee would incur a single charge, whereas a PerItem fee would be charged for each item within the batch.\r\n* `Persheet` - This fee is levied on every statement sheet\r\n* `Pertransaction` - The fee is charged for each transaction\r\n* `Pertransactionamount` - The amount stated is levied for each transaction processed\r\n* `Pertransactionpercentage` - The fee amount is the given percentage of the transaction processed and is levied for each transaction\r\n* `Quarterly` - This fee is triggered at the end of every quarter\r\n* `Sixmonthly` - This fee is triggered at the end of every 6 month period\r\n* `Statementmonthly` - This fee is triggered based on a monthly statement period\r\n* `Weekly` - The fee is triggered weekly\r\n* `Yearly` - This fee is triggered yearly\r\n"
    feeapplicationfrequencyvalues:
      enum:
        - Onclosing
        - Onopening
        - Chargingperiod
        - Daily
        - Peritem
        - Monthly
        - Onanniversary
        - Other
        - Perhundredpounds
        - Perhour
        - Peroccurrence
        - Persheet
        - Pertransaction
        - Pertransactionamount
        - Pertransactionpercentage
        - Quarterly
        - Sixmonthly
        - Statementmonthly
        - Weekly
        - Yearly
      type: string
      description: ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging period\r\n* `Daily` - This fee is triggered every day\r\n* `Peritem` - This fee is triggered by the processing of an item on the product\r\n* `Monthly` - This fee is triggered monthly\r\n* `Onanniversary` - This fee is triggered on the anniversary of opening the product\r\n* `Other` - Other Fee Frequency\r\n* `Perhundredpounds` - This fee is triggered for every hundred pounds withdrawn\r\n* `Perhour` - This fee is triggered every hour\r\n* `Peroccurrence` - This fee is triggered per occurrence of the transaction or service. This differs from PerItem, in that if a batch of items is processed at the same time, a PerOccurrence fee would incur a single charge, whereas a PerItem fee would be charged for each item within the batch.\r\n* `Persheet` - This fee is levied on every statement sheet\r\n* `Pertransaction` - The fee is charged for each transaction\r\n* `Pertransactionamount` - The amount stated is levied for each transaction processed\r\n* `Pertransactionpercentage` - The fee amount is the given percentage of the transaction processed and is levied for each transaction\r\n* `Quarterly` - This fee is triggered at the end of every quarter\r\n* `Sixmonthly` - This fee is triggered at the end of every 6 month period\r\n* `Statementmonthly` - This fee is triggered based on a monthly statement period\r\n* `Weekly` - The fee is triggered weekly\r\n* `Yearly` - This fee is triggered yearly\r\n"
    ServiceFee:
      type: object
      properties:
        FeeCreditAccount:
          $ref: '#/components/schemas/account'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeCalculationMethod:
          $ref: '#/components/schemas/servicemodality'
        FeePaymentMethodType:
          $ref: '#/components/schemas/feepaymentmethodtypevalues'
        ChargeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
        FeeCalculationMethodType:
          $ref: '#/components/schemas/feecalculationmethodtypevalues'
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        ChargeBearerReference:
          $ref: '#/components/schemas/involvedparty'
        FeePaymentMethod:
          $ref: '#/components/schemas/servicemodality'
        FeeApplicationDate:
          $ref: '#/components/schemas/datetime'
        FeeApplicationCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        AccruedCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeCalculationFrequency:
          $ref: '#/components/schemas/feecalculationfrequencyvalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeApplicationFrequency:
          $ref: '#/components/schemas/feeapplicationfrequencyvalues'
        FeeApplicationAmount:
          $ref: '#/components/schemas/amount'
        FeeDebitAccount:
          $ref: '#/components/schemas/account'
        AccrualFeeAmount:
          $ref: '#/components/schemas/amount'
      description: The product features/services available with a financical facility
    devicecustomizationtypevalues:
      enum:
        - CardDesign
      type: string
      description: ">\r\n* `CardDesign` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    branch:
      type: object
      properties:
        BranchIdentification:
          $ref: '#/components/schemas/identifier'
        BranchLegalEntityIdentification:
          $ref: '#/components/schemas/identifier'
        BranchAddress:
          $ref: '#/components/schemas/address'
        BranchName:
          $ref: '#/components/schemas/name'
      description: "Bank branch associated with the account for booking purposes ||\r\n|"
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementstatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementstatus:
      type: object
      properties:
        ArrangementStatus:
          $ref: '#/components/schemas/status'
        ArrangementStatusType:
          $ref: '#/components/schemas/arrangementstatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementstatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: 'A permission that is recorded for the device; like use in ATM, use for internet identification, etc.'
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: Reference to the device instance in Issued Device Administration
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This feature calculates and tracks interest earnings or charges on accounts, loans, or investments over time.\r\n* `WithdrawalFeature` - The withdraw feature typically refers to an option or functionality that allows users to retrieve or remove something from a system or platform.\r\n* `DepositFeature` - This refers to a functionality that allows users to add funds to an account or system, often by transferring money from another source.\r\n* `SweepFeature` - \r\n* `LienFeature` - \r\n* `PaymentFeature` - This refers to the functionality that facilitates or tracks the transfer of funds for a purchase or settlement of dues.\r\n* `RepaymentFeature` - This feature facilitates or manages the process of paying back borrowed funds, such as loans, credit card balances, or advances.\r\n* `LimitFeature` - This feature sets, monitors, or enforces restrictions on the maximum amount that can be accessed, spent, or transacted within a system.\r\n* `OverdraftFeature` - This functionality allows users to withdraw more money than what is available in their account balance, often up to a predefined limit.\r\n* `StatementFeature` - The statement feature refers to a functionality in banking, finance, or digital platforms that provides users with a detailed record of their transactions or activities over a specific period.\r\n* `CurrencyExchangeFeature` - This feature enables users to convert funds from one currency to another at prevailing exchange rates, often within financial or payment platforms.\r\n* `PriceFeature` - This feature involves displaying or managing the price of goods, services, or financial instruments within a platform.\r\n"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: Tracked property of the issued device (e.g. card number)
    issueddevicestatustypevalues:
      enum:
        - Issued
        - IssuedButNotActivated
        - Activated
        - Suspended
        - Retrieved
      type: string
      description: ">\r\n* `Issued` - \r\n* `IssuedButNotActivated` - \r\n* `Activated` - \r\n* `Suspended` - \r\n* `Retrieved` - \r\n"
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its actions in pursuit of long-term goals. (Business Dictionary)\n\r\n* `Regulation` - A rule used to carry out a law (FIBO)\n\nBusiness Dictionary: a rule (with or without the coercive power of law) employed in controlling, directing, or managing an activity, organization, or system. \n\nThe set of rules and legislation governing certain actions. \nhttps://financial-dictionary.thefreedictionary.com/Regulatory\r\n* `Law` - A binding rule that the courts will enforce.\nA system of rules and guidelines which are enforced through social institutions to govern behavior. (FIBO)\n\r\n* `Guideline` - A recommended practice (adapted from Business Dictionary)\nA general rule, principle, or piece of advice.\r\n* `Criterion` - A principle or standard by which something may be judged or decided.\n\nRead more: http://www.businessdictionary.com/definition/criterion.html\r\n* `Standard` - A rule considered by an authority or by general consent as a basis of comparison\r\n"
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: The processing and handling guidelines and rules
    IssuedDevice:
      type: object
      properties:
        AccountIdentifier:
          $ref: '#/components/schemas/accountidentification'
        AccountExternalAccountNumber:
          $ref: '#/components/schemas/identifier'
        DeviceValidtoDate:
          $ref: '#/components/schemas/datetime'
        DeviceValidfromDate:
          $ref: '#/components/schemas/datetime'
        DeviceCustomerCustomizationReference:
          $ref: '#/components/schemas/devicecustomizationtypevalues'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        DeviceCollectLocation:
          $ref: '#/components/schemas/branch'
        DevicePartyReference:
          $ref: '#/components/schemas/involvedparty'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceDeliveryMethod:
          $ref: '#/components/schemas/text'
        DeviceIssueDate:
          $ref: '#/components/schemas/datetime'
        DeviceAssociatedPermissions:
          $ref: '#/components/schemas/arrangement'
        IssuedDeviceAdministrationReference:
          $ref: '#/components/schemas/device'
        DevicePropertyType:
          $ref: '#/components/schemas/feature'
        DevicePropertySetting:
          $ref: '#/components/schemas/arrangement'
        DeviceOptionSetting:
          $ref: '#/components/schemas/arrangement'
        DeviceOptionDefinition:
          $ref: '#/components/schemas/feature'
        DeviceStatus:
          $ref: '#/components/schemas/issueddevicestatustypevalues'
        DeviceProcessingGuidelinesandRules:
          $ref: '#/components/schemas/ruleset'
      description: The product features/services available with a financical facility
    paymenttypevalues:
      enum:
        - Cashtransaction
        - Domesticpayment
        - Domestichighvaluepayment
        - Domesticprioritypayment
        - Crossborderpayment
        - Crossborderprioritypayment
        - Crossborderhighvaluepayment
        - Thirdcurrencypayment
        - Thirdcurrencyhighvaluepayment
        - Thirdcurrencyprioritypayment
        - Tradesettlementpayment
        - Foreignexchange
        - Equivalentamount
        - Loan
        - Loanrepayment
        - Securities
        - Lockbox
        - Dividend
        - Crossedcheque
        - Opencheque
        - Ordercheque
        - Circularcheque
        - Travellerscheques
        - Bankdraft
        - Cashletter
        - Documentarycredit
        - Billofexchange
        - Collection
        - Cashmanagementtransfer
        - Sweepaccount
        - Topaccount
        - Zerobalanceaccount
        - Standingfacilities
        - Swiftpayservicelevelcredit
        - Priorityservicelevelcredit
        - Standardservicelevelcredit
        - Liquiditytransfer
        - Advancepayment
        - Valuedateadjustment
        - Dvpgross
        - Dvpnet
        - Netting
        - Limitpayment
        - Backup
        - Expresspayment
        - Centralbankoperation
        - Clspayment
        - Eurodomesticpayment
        - Agriculturaltransfer
        - Alimonypayment
        - Balanceretail
        - Bonuspayment.
        - Brokeragefee
        - Capitalbuilding
        - Charitypayment
        - Childbenefit
        - Commercialcredit
        - Commission
        - Commoditytransfer
        - Costs
        - Copyright
        - Governmentpayment
        - Instalmenthirepurchaseagreement
        - Insurancepremium
        - Intracompanypayment
        - Interest
        - Licensefee
        - Metals
        - Pensionpayment
        - Purchasesaleofgoods
        - Refund
        - Rent
        - Royalties
        - Purchasesaleofservices
        - Salarypayment
        - Socialsecuritybenefit
        - Standingorder
        - Subscription
        - Treasurystatepayment
        - Unemploymentdisabilitybenefit
        - Valueaddedtaxpayment
        - Withholdingtax
        - Taxpayment
        - Miscellaneous
        - Overnightdeposit
        - Marginallending
        - Other
        - Upfront
        - Unwind
        - Principalexchange
      type: string
      description: ">\r\n* `Cashtransaction` - Transaction is a withdrawal/deposit of cash.\r\n* `Domesticpayment` - Payment has an origin and a destination in the same country, and is made in the currency of that country.\r\n* `Domestichighvaluepayment` - Transaction is a high value payment that has an origin and a destination in the same country and is made in the currency of that country.\r\n* `Domesticprioritypayment` - Transaction is a priority payment that has an origin and a destination in the same country and is made in the currency of that country.\r\n* `Crossborderpayment` - Payment has an origin in one country, a destination in another, and is made in the currency of either the origin or destination country.\r\n* `Crossborderprioritypayment` - Transaction is a priority payment that has an origin in one country and a destination in another and is made in the currency of either the origin or destination country.\r\n* `Crossborderhighvaluepayment` - Transaction is a high value payment that has an origin in one country and a destination in another country and is made in the currency of either the origin or destination country.\r\n* `Thirdcurrencypayment` - Transaction is a payment that is made in a third currency to the origin and destination countries. The origin and destination countries may be one and the same country.\r\n* `Thirdcurrencyhighvaluepayment` - Transaction is a high value payment that is made in a third currency to the origin and destination countries. The origin and destination countries may be one and the same country.\r\n* `Thirdcurrencyprioritypayment` - Payment is made in a third currency to the origin and destination countries. The origin and destination countries may be the same country.\r\n* `Tradesettlementpayment` - Transaction is the settlement of a trade, eg, a securities transaction.\r\n* `Foreignexchange` - Transaction isthe settlement of a foreign exchange deal.\r\n* `Equivalentamount` - Transaction is an equivalent amount relative to a currency conversion.\r\n* `Loan` - Transaction is the payment of a specific amount of money lent by a creditor/lender.\r\n* `Loanrepayment` - Transaction is an amount of money transferred in repayment of loan.\r\n* `Securities` - Transaction is a payment of securities.\r\n* `Lockbox` - Transaction is a payment(s) resulting from a lock box service.\r\n* `Dividend` - Transaction is a payment of dividends.\r\n* `Crossedcheque` - Transaction is a crossed cheque. A crossed check has two parallel lines across its face, indicating that the cheque must be paid into an account and not cashed over the counter.\r\n* `Opencheque` - Transaction is an uncrossed cheque that can be cashed at the bank of origin.\r\n* `Ordercheque` - Transaction is a cheque made payable to a named recipient 'or order' enabling the creditor to either deposit it in an account or endorse it to a third party, ie, transfer the rights to the cheque by signing it on the reverse.\r\n* `Circularcheque` - Transaction is an instruction from a bank to its correspondent bank to pay the creditor a stated sum of money on presentation of a means of identification.\r\n* `Travellerscheques` - Transaction is a payment resulting from travellers cheques.\r\n* `Bankdraft` - Transaction is a cheque drawn by a bank on itself or its agent. A person who owes money to another buys the draft from a bank for cash and hands it to the creditor who need have no fear that it might be dishonoured.\r\n* `Cashletter` - Transaction is a cash letter. A cash letter is a payment instrument in the form of a covering letter, whereby a financial institution, ie, the remitting bank, requests credit for one or more financial documents under usual reserve, ie, subject to final payment.\r\n* `Documentarycredit` - Transaction is a documentary credit from one banker to another, authorising the payment of a specified sum of money to the person named in the document, based on specified conditions.\r\n* `Billofexchange` - Transaction is a written order from a drawer to a drawee to pay a specified sum of money upon demand, or on a specified date, to the drawer or to a third party specified by the drawer. A bill of exchange is also called a draft.\r\n* `Collection` - Transaction is a collection. A collection is the act of sending a cheque, bill of exchange or another financial instrument to the prospective financial institution for payment.\r\n* `Cashmanagementtransfer` - Transaction is a general cash management instruction.\r\n* `Sweepaccount` - Transaction relates to a cash management instruction, requesting a sweep of the account of the debtor.\r\n* `Topaccount` - Transaction is a cash management instruction, requesting to top the account of the debtor above a certain floor amount. The floor amount, if not pre-agreed by the parties involved, may be specified.\r\n* `Zerobalanceaccount` - Transaction is a cash management instruction, requesting to zero balance the account of the debtor.\r\n* `Standingfacilities` - Payment is linked to overnight deposits and the marginal lending facility.\r\n* `Swiftpayservicelevelcredit` - Transaction is a credit transfer to be processed according to the SWIFTPay Service Level.\r\n* `Priorityservicelevelcredit` - Transaction is a credit transfer to be processed according to the Priority Service Level.\r\n* `Standardservicelevelcredit` - Transaction is a credit transfer to be processed according to the Standard Service Level.\r\n* `Liquiditytransfer` - Payment is made to transfer liquidity to/from the settlement account of a member, to/from the current account held at the central institution or any other institution.\r\n* `Advancepayment` - Transaction is a payment made in advance or as an advance.\r\n* `Valuedateadjustment` - Transaction reverses a previously incorrectly value dated entry.\r\n* `Dvpgross` - Gross cash payment offsetting the amount owed/due for a securities transaction settlement.\r\n* `Dvpnet` - Net payment offsetting the cash balance due/owed for a series of securities transactions settlement.\r\n* `Netting` - Transaction is a netting operation.\r\n* `Limitpayment` - Transaction is a payment that is processed when the pool of liquidity exceeds the minimum value reserved for an express payment in the RTGSPlus system.\r\n* `Backup` - Payment is made under the recovery procedure to move liquidity to/from the settlement account of a member according to the specifications of the system.\r\n* `Expresspayment` - Transaction is a payment that is processed whenever liquidity is available on the settlement account of a member of the RTGSPlus system.\r\n* `Centralbankoperation` - Payment is made to settle an operation made with the central bank.\r\n* `Clspayment` - Payment is linked to CLS activities.\r\n* `Eurodomesticpayment` - Transaction is a credit transfer in Euro with its country of origin and country of destination within the European Union. The origin and destination countries may be one and the same country.\r\n* `Agriculturaltransfer` - Transaction is related to the agricultural domain.\r\n* `Alimonypayment` - Transaction is a payment(s) made by one spouse to the other after a separation or divorce. An alimony payment may be applied to other family relationships.\r\n* `Balanceretail` - Transaction is a payment offsetting the net cash balance owed/due in a retail payment system.\r\n* `Bonuspayment.` - Net cash payment offsetting the balance due/owed in a retail payment system.\r\n* `Brokeragefee` - Transaction is charges levied by a broker.\r\n* `Capitalbuilding` - Transaction is payment into a personal pension scheme for retirement.\r\n* `Charitypayment` - Transaction is a payment for charity reasons.\r\n* `Childbenefit` - Transaction is a payment made to a parent/guardian to help maintain a child.\r\n* `Commercialcredit` - Transaction is settlement of a commercial credit.\r\n* `Commission` - Transaction is payment of a fee for executing a transaction.\r\n* `Commoditytransfer` - Transaction is a payment of products traded on a commodity exchange.\r\n* `Costs` - Transaction is apayment of costs.\r\n* `Copyright` - Transaction is a payment of copyright.\r\n* `Governmentpayment` - Transaction is apayment to or from a government department.\r\n* `Instalmenthirepurchaseagreement` - Transaction is a payment of an instalment or to the settlement of a hire-purchase agreement.\r\n* `Insurancepremium` - Transaction is a payment of an insurance premium.\r\n* `Intracompanypayment` - Transaction is an intra-company payment, ie, a payment between two companies belonging to the same group.\r\n* `Interest` - Transaction is a payment of interest.\r\n* `Licensefee` - Transaction is a payment of a license fee.\r\n* `Metals` - Transaction is a purchase or sale of metals.\r\n* `Pensionpayment` - Transaction is a payment of a pension allowance.\r\n* `Purchasesaleofgoods` - Transaction is a payment for the purchase and sale of goods.\r\n* `Refund` - Transaction is a repayment of funds.\r\n* `Rent` - Transaction is a payment of rent.\r\n* `Royalties` - Transaction is a payment of royalties.\r\n* `Purchasesaleofservices` - Transaction is a payment for the purchase and sale of services.\r\n* `Salarypayment` - Transaction is a payment of salaries.\r\n* `Socialsecuritybenefit` - Transaction is a social security benefit, a payment made by a government to support individuals.\r\n* `Standingorder` - Transaction is a standing order. A standing order is an instruction given by a party having explicit authority on the account to debit, ie, either debit account owner or originating party, to a first agent to process cash transfers at specified intervals during an implicit or explicit period of time. It is given once, and is valid for an open or closed period of time.\r\n* `Subscription` - Transaction is a payment of a subscription.\r\n* `Treasurystatepayment` - Payment is linked to the Treasury State.\r\n* `Unemploymentdisabilitybenefit` - Transaction is a payment made to an unemployed/disabled person.\r\n* `Valueaddedtaxpayment` - Transaction is apayment of value added tax.\r\n* `Withholdingtax` - Transaction is a payment of withholding tax.\r\n* `Taxpayment` - Transaction is a payment of taxes.\r\n* `Miscellaneous` - Transaction is for an unspecified reason. Miscellaneous is to be used only when no explicit code is available.\r\n* `Overnightdeposit` - Transaction is linked to an overnight deposit.\r\n* `Marginallending` - Transaction is linked to the marginal lending facility.\r\n* `Other` - Specifies that a proprietary code must be indicated.\r\n* `Upfront` - Transaction is an initial payment made by one of the counterparties  either to bring a transaction to fair value or for any other reason that may be the cause of an off-market transaction.\r\n* `Unwind` - Transaction is the final settlement payment made when a transaction is unwound prior to its end date or a payment that may result due to the full termination of derivative transaction(s).\r\n* `Principalexchange` - Transaction is an exchange of notional values for cross-currency swaps.\r\n"
    priorityvaluetypes:
      enum:
        - Urgent
        - High
        - Normal
        - Low
      type: string
      description: ">\r\n* `Urgent` - Priority level is urgent (highest priority possible).\r\n* `High` - Priority level is high.\r\n* `Normal` - Priority level is normal.\r\n* `Low` - Priority level is low.\r\n"
    clearingchanneltypevalues:
      enum:
        - Realtimegrosssettlementsystem
        - Realtimenetsettlementsystem
        - Masspaymentnetsystem
        - Booktransfer
      type: string
      description: ">\r\n* `Realtimegrosssettlementsystem` - Clearing channel is a real-time gross settlement system.\r\n* `Realtimenetsettlementsystem` - Clearing channel is a real-time net settlement system.\r\n* `Masspaymentnetsystem` - Clearing channel is a mass payment net settlement system.\r\n* `Booktransfer` - Payment through internal book transfer.\r\n"
    paymentlocalinstumenttypevalues:
      enum:
        - Directdebitconfirmedelectronicmandate
        - Directdebitpapermandatewithpaperauthorization
        - Directdebitunconfirmedelectronicmandate
        - Batchpaymentsaruba
        - Instantpaymentsaruba
        - Credittransfers
        - Nonpreauthoriseddirectdebitat
        - Preauthoriseddirectdebitat
        - Cashperpost
        - Returnedcredittransfers
        - Truncatedcredittransfers
        - Directdebits
        - Returneddirectdebits
        - Truncatedchecks
        - Revokedcredittransfers
        - Revokeddirectdebits
        - Revokedreturnedcredittransfers
        - Revokedreturneddirectdebits
        - Revokedtruncatedchecks
        - Revokedtruncatedcredittransfers
        - Cardclearing
        - Nonpreauthoriseddirectdebitde
        - Preauthoriseddirectdebitde
        - Imagebasedchequecollection
        - Paperlesschequecollection
        - Businesstobusinessdirectdebit
        - Businesstocustomerdirectdebit
        - Ancillarysystemtransferinitiation
        - Backuppayment
        - Mandatedpayment
        - Settlementbanktransferinitiation
        - Preauthoriseddirectdebitaccéléréacceleratedclearing2dayordinairenormalclearing4day
        - Preauthoriseddirectdebitordinairenormalclearing4day
        - Preauthoriseddirectdebitvérifiéverifiedclearing
        - Recoveredbillofexchangeorpromissorynote
        - Nonpreauthoriseddirectdebitriba
        - Preauthorisedrevocabledirectdebit
        - Preauthorisedrevocableurgentdirectdebit
        - Paymentsviainternetownedbycurrence
        - Instantcredittransfernottimecritical
        - Instantcredittransfertimecritical
        - Paymentsviainternetownedbycurrenceusinginstantcredittransfer
        - Paymentsviainternetownedbycurrenceusinginstantcredittransfernottimecritical
        - Paymentsviainternetownedbycurrenceusinginstantcredittransfertimecritical
        - Dutchdomesticbulkpayment
        - Dutchurgentpayment
        - Paymentviaacceptgiroownedbycurrence
        - Paymentsviastandaarddigitalenota
        - Incidentmanagementcorrection
        - Directdebitinitiatedbythegovernmentwithspecialconditions
        - Masspaymentbeneficiary
        - Masspaymentours
        - Masspaymentshared
        - Standingorder
        - Oneoffauthorisation
        - Oneoffauthorisationcharities
        - Oneoffauthorisationconstructionindustry
        - Oneoffauthorisationtuitionfees
        - Standingauthorisationcompanies
        - Standingauthorisationcompanieswithoutdebtorrevocationright
        - Standingauthorisationgeneral
        - Standingauthorisationlotteries
        - Convertedbankpayment
        - Businesspayment
        - Crossbordercustomercredittransfer
        - Overnight
        - Paymentwitheri
        - Sameday
        - Corenorefund
        - Directdebitfixedamount
        - Sepadirectdebitcore
        - Sepab2bdirectdebitami
        - Sepabusinesstobusinessdirectdebit
        - Sepacored1directdebitami
        - Sepacoredirectdebitami
        - Sepadirectdebit1daysettlement
        - Sepafadirectdebitami
        - Instantcredittransfer
        - Authenticateddirectdebit
        - Unauthenticateddirectdebit
        - Cashconcentrationintragroup
        - Banktransfer
        - Checksamedaysettlementwire
        - Customertransfer
        - Customertransferplus
        - Deposittosendersaccount
        - Fedfundsreturned
        - Fedfundssold
        - Nonvalueservicemessage
        - Drawdownresponsevaluetohonoradrawdownrequest
        - Banktobankdrawdownrequestorresponsenonvalue
        - Customerorcorporatedrawdownrequestorresponsenonvalue
        - Internationalach
        - Cashconcentrationordisbursementcorporatecounterparty
        - Corporatetradeexchange
        - Prearrangedpaymentordepositconsumercounterparty
        - Customerinitiatedentry
        - Representedcheckentry
        - Accountsreceivablecheck
        - Internetinitiatedentry
        - Pointofpurchase
        - Pointofsale
        - Telephoneinitiatedentry
      type: string
      description: ">\r\n* `Directdebitconfirmedelectronicmandate` - Transaction is related to a direct debit instruction authorized under a confirmed electronic mandate.\r\n* `Directdebitpapermandatewithpaperauthorization` - Transaction is related to a direct debit instruction authorized under a paper based mandate, supported by paper authorization signed by the debtor.\r\n* `Directdebitunconfirmedelectronicmandate` - Transaction is related to a direct debit instruction authorized under an unconfirmed electronic mandate requiring confirmation by the debtor.\r\n* `Batchpaymentsaruba` - Transaction is related to an Instant Credit Transfer under the rules of the Centrale Bank van Aruba, based on the EPC SCT Inst scheme, with a specific batch time-out delay.\r\n* `Instantpaymentsaruba` - Transaction is related to an Instant Credit Transfer under the rules of the Centrale Bank van Aruba, based on the EPC SCT Inst scheme.\r\n* `Credittransfers` - Transaction is related to credit transfers\r\n* `Nonpreauthoriseddirectdebitat` - Transaction is related to a direct debit that is not pre authorised (Einzugsermächtigung).\r\n* `Preauthoriseddirectdebitat` - Transaction is related to a direct debit that is pre authorised (Abbuchungsauftrag).\r\n* `Cashperpost` - Transaction is related to cash per post.\nTransaction to ultimate recipient having no bank account. Primary beneficiary is a postal service provider. Funds are paid out by cash. Additional necessary information for address and delivery options need to be attached.\r\n* `Returnedcredittransfers` - Transaction is related to returned credit transfers.\r\n* `Truncatedcredittransfers` - Transaction is related to truncated credit transfers.\nConversion of physical instrument to electonric form for transmission to the paying bank and where the original paper document does not continue in the clearing process..The original instrument rules are retained throughout the life of the instrument.\nTransaction triggered by specific marked and populated paper slip.\nReconciliation reference is secured by check digits supporting secure optical recognition. All other remittance information is truncated prior transmission.\r\n* `Directdebits` - Transaction is related to direct debits.\r\n* `Returneddirectdebits` - Transaction is related to returned direct debits.\r\n* `Truncatedchecks` - Transaction is related to truncated checks.\nConversion of physical instrument to electonric form for transmission to the paying bank and where the original paper document does not continue in the clearing process..The original instrument rules are retained throughout the life of the instrument.\r\n* `Revokedcredittransfers` - Transaction is related to revoked credit transfers\r\n* `Revokeddirectdebits` - Transaction is related to revoked direct debits.\r\n* `Revokedreturnedcredittransfers` - Transaction is related to revoked returned credit transfers\r\n* `Revokedreturneddirectdebits` - Transaction is related to revoked returned direct debits.\r\n* `Revokedtruncatedchecks` - Transaction is related to revoked truncated checks.\r\n* `Revokedtruncatedcredittransfers` - Transaction is related to revoked truncated credit transfers.\r\n* `Cardclearing` - Transaction is related to card clearing.\r\n* `Nonpreauthoriseddirectdebitde` - Transaction is related to a direct debit that is not pre authorised (Einzugsermächtigung).\r\n* `Preauthoriseddirectdebitde` - Transaction is related to a direct debit that is pre authorised (Abbuchungsauftrag).\r\n* `Imagebasedchequecollection` - Transaction is related to the German Image-based Cheque Collection Procedure “Imagegestützter Scheckeinzug - ISE”\r\n* `Paperlesschequecollection` - Transaction is related to the German Paperless Cheque Collection procedure “Belegloser Scheckeinzug - BSE”\r\n* `Businesstobusinessdirectdebit` - Transaction is related to a business-to-business direct debit (CSB58).\r\n* `Businesstocustomerdirectdebit` - Transaction is related to a business-to-customer direct debit (CSB19).\r\n* `Ancillarysystemtransferinitiation` - Indicates that the payment is sent by an authorized third party on behalf of the participant.\r\n* `Backuppayment` - Indicates that the payment was initiated manually using a GUI (Graphical User Interface).\r\n* `Mandatedpayment` - Indicates that the payment is sent by responsible Central Bank on behalf of the participant in case of contingency.\r\n* `Settlementbanktransferinitiation` - Indicates that the payment is submitted to move  liquidity to the technical account - dedicated to real-time settlement in an external system (for example ancillary system) . The payment is processed in a separate payment queue besides the normal processing.\r\n* `Preauthoriseddirectdebitaccéléréacceleratedclearing2dayordinairenormalclearing4day` - Transaction is related to an urgent direct debit that is pre authorised (Avis de Prélèvement accéléré).\r\n* `Preauthoriseddirectdebitordinairenormalclearing4day` - Transaction is related to a direct debit that is pre authorised (Avis de Prélèvement).\r\n* `Preauthoriseddirectdebitvérifiéverifiedclearing` - Transaction is related to an urgent direct debit that is pre authorised (Avis de Prélèvement vérifié).\r\n* `Recoveredbillofexchangeorpromissorynote` - LCR - Lettre de Change Relevé (Recovered Bill of Exchange) and BOR - Billet à Orde Relevé (Promissory Note)\r\n* `Nonpreauthoriseddirectdebitriba` - Transaction is related to a non-pre authorised collection (RIBA).\r\n* `Preauthorisedrevocabledirectdebit` - Transaction is related to a direct debit that is pre authorised and revocable (RID Ordinario).\r\n* `Preauthorisedrevocableurgentdirectdebit` - Transaction is related to an urgent direct debit that is pre authorised and revocable (RID Veloce).\r\n* `Paymentsviainternetownedbycurrence` - Transaction is related to payments via internet owned by Currence.\r\n* `Instantcredittransfernottimecritical` - The transaction is related to a regular  Credit Transfer and will be instantly processed under the Dutch AOS on top of the EPC SCT scheme.\r\n* `Instantcredittransfertimecritical` - The transaction is related to an Instant Credit Transfer under the rules of the Dutch AOS on top of the EPC SCT Inst scheme.\r\n* `Paymentsviainternetownedbycurrenceusinginstantcredittransfer` - Transaction is related to payments via internet owned by Currence which uses an Instant Credit Transfer.\r\n* `Paymentsviainternetownedbycurrenceusinginstantcredittransfernottimecritical` - Transaction is related to payments via internet owned by Currence which uses a regular  Credit Transfer and will be instantly processed under the Dutch AOS on top of the EPC SCT scheme.\r\n* `Paymentsviainternetownedbycurrenceusinginstantcredittransfertimecritical` - Transaction is related to payments via internet owned by Currence which uses an Instant Credit Transfer under the rules of the Dutch AOS on top of the EPC SCT Inst scheme.\r\n* `Dutchdomesticbulkpayment` - Transaction is related to a Domestic payment initiated by PAIN.001\r\n* `Dutchurgentpayment` - Transaction is related to a Domestic payment initiated by PAIN.001\r\n* `Paymentviaacceptgiroownedbycurrence` - Transaction is related to payments via Acceptgiro owned by Currence.\r\n* `Paymentsviastandaarddigitalenota` - Transaction is related to payments via a ‘Standaard Digitale Nota’ InvoiceAcceptgiro payment.\r\n* `Incidentmanagementcorrection` - Transaction is related to an Incident Management Correction procedure based on the DD infrastructure.\r\n* `Directdebitinitiatedbythegovernmentwithspecialconditions` - Transaction is related to direct debit scheme owned by the NVB.\r\n* `Masspaymentbeneficiary` - Transaction is related to mass payment beneficiary.\r\n* `Masspaymentours` - Transaction is related to mass payment ours.\r\n* `Masspaymentshared` - Transaction is related to mass payment shared.\r\n* `Standingorder` - Transaction is related to standing order.\r\n* `Oneoffauthorisation` - Transaction is related to one-off authorisation.\r\n* `Oneoffauthorisationcharities` - Transaction is related to one-off authorisation charities.\r\n* `Oneoffauthorisationconstructionindustry` - Transaction is related to one-off authorisation construction industry.\r\n* `Oneoffauthorisationtuitionfees` - Transaction is related to one-off authorisation tuition fees.\r\n* `Standingauthorisationcompanies` - Transaction is related to standing authorisation companies.\r\n* `Standingauthorisationcompanieswithoutdebtorrevocationright` - Transaction is related to standing authorisation companies without debtor revocation right.\r\n* `Standingauthorisationgeneral` - Transaction is related to standing authorisation general.\r\n* `Standingauthorisationlotteries` - Transaction is related to standing authorisation lotteries.\r\n* `Convertedbankpayment` - Transaction is related to converted (bank) payment.\nConversion of physical instrument to electonric form for transmission to the paying bank and where the original paper document does not continue in the clearing process.The instrument rules change upon conversion.\r\n* `Businesspayment` - Transaction is related to business payment\r\n* `Crossbordercustomercredittransfer` - Transaction is related to cross border customer credit transfer.\r\n* `Overnight` - Transaction is related to overnight clearing.\r\n* `Paymentwitheri` - Credit transfer contains Extended Remittance Information (ERI) as defined within the applicable scheme.\r\n* `Sameday` - Transaction is related to same day clearing.\r\n* `Corenorefund` - SEPA Core Direct Debit with ‘no refund’ option\r\n* `Directdebitfixedamount` - SEPA Fixed Amount Direct Debit\r\n* `Sepadirectdebitcore` - Transaction is related to SEPA direct debit -core.\r\n* `Sepab2bdirectdebitami` - SEPA B2B Direct Debit AMI based on a paper mandate\r\n* `Sepabusinesstobusinessdirectdebit` - Transaction is related to SEPA business to business direct debit.\r\n* `Sepacored1directdebitami` - Optional shorter time cycle (D-1) for SEPA Core Direct Debit AMI based on a paper mandate\r\n* `Sepacoredirectdebitami` - SEPA Core Direct Debit AMI based on a paper mandate\r\n* `Sepadirectdebit1daysettlement` - Optional shorter time cycle (D-1) for SEPA Core Direct Debit\r\n* `Sepafadirectdebitami` - SEPA Fixed Amount Direct Debit AMI based on a paper mandate\r\n* `Instantcredittransfer` - Transaction is related to an Instant Credit Transfer.\nUse case example: SEPA Instant Credit Transfer (SCT Inst)\r\n* `Authenticateddirectdebit` - Transaction is authenticated direct debit for domestic use.\r\n* `Unauthenticateddirectdebit` - Transaction is unauthenticated direct debit for domestic use.\r\n* `Cashconcentrationintragroup` - Transaction is related to an intra-group bank initiated cash management payment\r\n* `Banktransfer` - Transaction is related to a bank transfer.\r\n* `Checksamedaysettlementwire` - Transaction is related to check same day settlement wire.\r\n* `Customertransfer` - Transaction is related to customer transfer.\r\n* `Customertransferplus` - Transaction is related to a customer transfer, which may include information related to a cover payment or extended remittance information.\r\n* `Deposittosendersaccount` - Transaction is related to deposit to sender's account.\r\n* `Fedfundsreturned` - Transaction is related to Fed funds returned.\r\n* `Fedfundssold` - Transaction is related to Fed funds sold.\r\n* `Nonvalueservicemessage` - Transaction is related to non-value service message.\r\n* `Drawdownresponsevaluetohonoradrawdownrequest` - Transaction is related to drawdown response (value) to honor a drawdown request.\r\n* `Banktobankdrawdownrequestorresponsenonvalue` - Transaction is related to bank-to-bank drawdown request or response (non-value)\r\n* `Customerorcorporatedrawdownrequestorresponsenonvalue` - Transaction is related to customer or corporate drawdown request or response (non-value).\r\n* `Internationalach` - Transaction is related to international ACH.\r\n* `Cashconcentrationordisbursementcorporatecounterparty` - Transaction is related to cash concentration or disbursement corporate counterparty.\r\n* `Corporatetradeexchange` - Transaction is related to corporate trade exchange.\r\n* `Prearrangedpaymentordepositconsumercounterparty` - Transaction is related to prearranged payment or deposit consumer counterparty.\r\n* `Customerinitiatedentry` - A credit entry initiated by or on behalf of the holder of a consumer account\r\n* `Representedcheckentry` - Transaction is related to re-presented check entry.\r\n* `Accountsreceivablecheck` - Transaction is related to accounts receivable check.\r\n* `Internetinitiatedentry` - Transaction is related to internet initiated entry.\r\n* `Pointofpurchase` - Transaction is related to point-of-purchase.\r\n* `Pointofsale` - Transaction is related to point-of-sale.\r\n* `Telephoneinitiatedentry` - Transaction is related to telephone initiated entry.\r\n"
    paymentcategorypurposetypevalues:
      enum:
        - Bonuspayment
        - Cashmanagementtransfer
        - Cardbulkclearing
        - Creditcardpayment
        - Tradesettlementpayment
        - Debitcardpayment
        - Dividend
        - Deliveragainstpayment
        - Epayment
        - Feecollection
        - Governmentpayment
        - Hedging
        - Irrevocablecreditcardpayment
        - Irrevocabledebitcardpayment
        - Intracompanypayment
        - Interest
        - Loan
        - Commercial
        - Consumer
        - Otherpayment
        - Pensionpayment
        - Represented
        - Reimbursementreceivedcredittransfer
        - Receiveagainstpayment
        - Salarypayment
        - Securities
        - Socialsecuritybenefit
        - Supplierpayment
        - Taxpayment
        - Trade
        - Treasurypayment
        - Valueaddedtaxpayment
        - Withholding
      type: string
      description: ">\r\n* `Bonuspayment` - Transaction is the payment of a bonus.\r\n* `Cashmanagementtransfer` - Transaction is a general cash management instruction.\r\n* `Cardbulkclearing` - A Service that is settling money for a bulk of card transactions, while referring to a specific transaction file or other information like terminal ID, card acceptor ID or other transaction details.\r\n* `Creditcardpayment` - Transaction is related to a payment of credit card.\r\n* `Tradesettlementpayment` - Transaction is related to settlement of a trade, eg a foreign exchange deal or a securities transaction.\r\n* `Debitcardpayment` - Transaction is related to a payment of debit card.\r\n* `Dividend` - Transaction is the payment of dividends.\r\n* `Deliveragainstpayment` - Code used to pre-advise the account servicer of a forthcoming deliver against payment instruction.\r\n* `Epayment` - Transaction is related to ePayment.\r\n* `Feecollection` - A Service that is settling card transaction related fees between two parties.\r\n* `Governmentpayment` - Transaction is a payment to or from a government department.\r\n* `Hedging` - Transaction is related to the payment of a hedging operation.\r\n* `Irrevocablecreditcardpayment` - Transaction is reimbursement of credit card payment.\r\n* `Irrevocabledebitcardpayment` - Transaction is reimbursement of debit card payment.\r\n* `Intracompanypayment` - Transaction is an intra-company payment, ie, a payment between two companies belonging to the same group.\r\n* `Interest` - Transaction is the payment of interest.\r\n* `Loan` - Transaction is related to the transfer of a loan to a borrower.\r\n* `Commercial` - Mobile P2B Payment\r\n* `Consumer` - Mobile P2P Payment\r\n* `Otherpayment` - Other payment purpose.\r\n* `Pensionpayment` - Transaction is the payment of pension.\r\n* `Represented` - Collection used to re-present previously reversed or returned direct debit transactions.\r\n* `Reimbursementreceivedcredittransfer` - Transaction is related to a reimbursement for commercial reasons of a correctly received credit transfer.\r\n* `Receiveagainstpayment` - Code used to pre-advise the account servicer of a forthcoming receive against payment instruction.\r\n* `Salarypayment` - Transaction is the payment of salaries.\r\n* `Securities` - Transaction is the payment of securities.\r\n* `Socialsecuritybenefit` - Transaction is a social security benefit, ie payment made by a government to support individuals.\r\n* `Supplierpayment` - Transaction is related to a payment to a supplier.\r\n* `Taxpayment` - Transaction is the payment of taxes.\r\n* `Trade` - Transaction is related to the payment of a trade finance transaction.\r\n* `Treasurypayment` - Transaction is related to treasury operations.  E.g. financial contract settlement.\r\n* `Valueaddedtaxpayment` - Transaction is the payment of value added tax.\r\n* `Withholding` - Transaction is the payment of withholding tax.\r\n"
    paymentsequencetypevalues:
      enum:
        - First
        - Recurring
        - Final
        - Oneoff
        - Represented
      type: string
      description: ">\r\n* `First` - First collection of a series of direct debit instructions.\r\n* `Recurring` - Direct debit instruction where the debtor's authorisation is used for regular direct debit transactions initiated by the creditor.\r\n* `Final` - Final collection of a series of direct debit instructions.\r\n* `Oneoff` - Direct debit instruction where the debtor's authorisation is used to initiate one single direct debit transaction.\r\n* `Represented` - Collection used to re-present previously reversed or returned direct debit transactions.\r\n"
    paymentprocessingarrangementmodality:
      type: object
      properties:
        PaymentProcessingPriority:
          $ref: '#/components/schemas/priorityvaluetypes'
        PaymentProcessingArrangement:
          $ref: '#/components/schemas/arrangement'
        PaymentProcessingClearingChannel:
          $ref: '#/components/schemas/clearingchanneltypevalues'
        PaymentLocalInstument:
          $ref: '#/components/schemas/paymentlocalinstumenttypevalues'
        PaymentCategoryPurpose:
          $ref: '#/components/schemas/paymentcategorypurposetypevalues'
        PaymentSequence:
          $ref: '#/components/schemas/paymentsequencetypevalues'
      description: Definition of the processing option and impact (e.g. frequency and cumulative amount constraints)
    paymentservicetypevalues:
      enum:
        - CreditTransferService
        - StandingOrderService
        - DirectDebitService
        - CardPaymentService
        - WithdrawService
        - DepositService
        - OverdraftService
        - MoneyRemittanceService
        - StatementService
      type: string
      description: ">\r\n* `CreditTransferService` - A payment service allowing a payer to transfer fund to a beneficiary. (a proposed definition for BIAN BOM adapted from ECB)\r\n* `StandingOrderService` - A credit transfer service to make regular transfers on given dates to a named beneﬁciary. (a proposed definition for BIAN BOM adapted from ISO20022)\r\n* `DirectDebitService` - A payment service for debiting a payer's payment account, where a payment transaction is initiated by the payee on the basis of the payer's consent given to the payee, to the payee's payment service provider or to the payer's own payment service provider. (a proposed definition for BIAN BOM adapted from PSD)\r\n* `CardPaymentService` - A payment service to execute payment transactions through a payment card, including online payments. (a proposed definition for BIAN BOM adapted from PSD)\r\n* `WithdrawService` - A payment service to take fund out of an account. (a proposed definition for BIAN BOM)\r\n* `DepositService` - A payment service to place funds into an account for safekeeping. (a proposed definition for BIAN BOM)\r\n* `OverdraftService` - A payment service that allows fund transfer even if there is no provision on the account. (a proposed definition for BIAN BOM)\r\n* `MoneyRemittanceService` - A payment service where funds are received from a payer, without any payment accounts being created in the name of the payer or the payee, for the sole purpose of transferring a corresponding amount to a payee or to another payment service provider acting on behalf of the payee, and/or where such funds are received on behalf of and made available to the payee. (a proposed definition for BIAN BOM adapted from PSD)\r\n* `StatementService` - A reporting service on payment transactions registered on an account. (a proposed definition for BIAN BOM)\r\n"
    paymentdatetimetypevalues:
      enum:
        - RequestedExecutionDate
        - AcceptanceDate
        - CreationDate
        - ValueDate
        - DueDate
        - ExpiryDate
      type: string
      description: ">\r\n* `RequestedExecutionDate` - Date at which the initiating party requests the clearing agent to process the payment. ISO20022\nUsage: This is the date on which the debtor's account is to be debited. If payment by cheque, the date when the cheque must be generated by the bank. \r\n* `AcceptanceDate` - Date and time at which all processing conditions for execution of the payment are met and adequate financial cover is available at the account servicing agent. ISO20022\r\n* `CreationDate` - Date and time at which the payment execution was created by the instructing agent. ISO20022\r\n* `ValueDate` - Date on which a payment must be executed (ISO20022)\r\n* `DueDate` - Due date for the payment. (ISO20022)\r\n* `ExpiryDate` - \r\n"
    paymentdatetime:
      type: object
      properties:
        PaymentDate:
          $ref: '#/components/schemas/datetime'
        PaymentDateType:
          $ref: '#/components/schemas/paymentdatetimetypevalues'
      description: 'Key dates related to the payment. '
    paymentpurposevalues:
      enum:
        - Salarypayment
        - Treasurypayment
        - Advancepayment
        - Agriculturaltransfer
        - Alimonypayment
        - Childbenefit
        - Unemploymentdisabilitybenefit
        - Bonuspayment.
        - Cashmanagementtransfer
        - Capitalbuilding
        - Charitypayment
        - Collectionpayment
        - Commoditytransfer
        - Commercialpayment
        - Commission
        - Costs
        - Copyright
        - Dividend
        - Foreignexchange
        - Purchasesaleofgoods
        - Governmentpayment
        - Instalmenthirepurchaseagreement
        - Intracompanypayment
        - Insurancepremium
        - Interest
        - Licensefee
        - Loan
        - Loanrepayment
        - Netting
        - Payroll
        - Pensionpayment
        - Refund
        - Rent
        - Royalties
        - Purchasesaleofservices
        - Securities
        - Socialsecuritybenefit
        - Subscription
        - Taxpayment
        - Valueaddedtaxpayment
        - Consumerthirdpartyconsolidatedpayment
        - Debitcollectionpayment
        - Supplierpayment
        - Hedging
        - Multipleservicetypes
        - Nototherwisespecified
        - Cardpayment
        - Creditcardbill
        - Ferry
        - Air
        - Bus
        - Railway
        - Convalescentcarefacility
        - Dentalservices
        - Anesthesiaservices
        - Homehealthcare
        - Hospitalcare
        - Intermediatecarefacility
        - Longtermcarefacility
        - Medicalservices
        - Visioncare
        - Durablemedicaleequipment
        - Cabletvbill
        - Electricitybill
        - Gasbill
        - Telephonebill
        - Othertelecomrelatedbill
        - Waterbill
        - Study
        - Pricepayment
        - Installment
        - Recurringinstallmentpayment
        - Openingfee
        - Cancellationfee
        - Governmentinsurance
        - Insurancepremiumcar
        - Laborinsurance
        - Lifeinsurance
        - Propertyinsurance
        - Healthinsurance
        - Carloanprincipalrepayment
        - Housingloanrepayment
        - Companysocialloanpaymenttobank
        - Estatetax
        - Housingtax
        - Incometax
        - Netincometax
        - Businessexpenses
        - Trustfund
        - Networkcharge
        - Networkcommunication
        - Receiptpayment
        - Paymentterms
        - Other
        - Withholding
      type: string
      description: ">\r\n* `Salarypayment` - Transaction is the payment of salaries.\r\n* `Treasurypayment` - Transaction is related to treasury operations.\r\n* `Advancepayment` - Transaction is an advance payment.\r\n* `Agriculturaltransfer` - Transaction is related to the agricultural domain.\r\n* `Alimonypayment` - Transaction is the payment of alimony.\r\n* `Childbenefit` - Transaction is related to a payment made to assist parent/guardian to maintain child.\r\n* `Unemploymentdisabilitybenefit` - Transaction is related to a payment to a person who is unemployed/disabled.\r\n* `Bonuspayment.` - Transaction is related to payment of a bonus.\r\n* `Cashmanagementtransfer` - Transaction is a general cash management instruction.\r\n* `Capitalbuilding` - Transaction is related to capital building fringe fortune, ie capital building for retirement.\r\n* `Charitypayment` - Transaction is a payment for charity reasons.\r\n* `Collectionpayment` - Transaction is a collection of funds initiated via a credit transfer or direct debit.\r\n* `Commoditytransfer` - Transaction is payment of commodities.\r\n* `Commercialpayment` - Transaction is related to a payment of commercial credit or debit. (formerly CommercialCredit).\r\n* `Commission` - Transaction is payment of commission.\r\n* `Costs` - Transaction is related to payment of costs.\r\n* `Copyright` - Transaction is payment of copyright.\r\n* `Dividend` - Transaction is payment of dividends.\r\n* `Foreignexchange` - Transaction is related to a foreign exchange operation.\r\n* `Purchasesaleofgoods` - Transaction is related to purchase and sale of goods.\r\n* `Governmentpayment` - Transaction is a payment to or from a government department.\r\n* `Instalmenthirepurchaseagreement` - Transaction is payment for an installment/hire-purchase agreement.\r\n* `Intracompanypayment` - Transaction is an intra-company payment, ie, a payment between two companies belonging to the same group.\r\n* `Insurancepremium` - Transaction is payment of an insurance premium.\r\n* `Interest` - Transaction is payment of interest.\r\n* `Licensefee` - Transaction is payment of a license fee.\r\n* `Loan` - Transaction is related to transfer of loan to borrower.\r\n* `Loanrepayment` - Transaction is related to repayment of loan to lender.\r\n* `Netting` - Transaction is related to a netting operation.\r\n* `Payroll` - Transaction is related to the payment of payroll.\r\n* `Pensionpayment` - Transaction is the payment of pension.\r\n* `Refund` - Transaction is the payment of a refund.\r\n* `Rent` - Transaction is the payment of rent.\r\n* `Royalties` - Transaction is the payment of royalties.\r\n* `Purchasesaleofservices` - Transaction is related to purchase and sale of services.\r\n* `Securities` - Transaction is the payment of securities.\r\n* `Socialsecuritybenefit` - Transaction is a social security benefit, ie payment made by a government to support individuals.\r\n* `Subscription` - Transaction is related to a payment of information or entertainment services either in printed or electronic form.\r\n* `Taxpayment` - Transaction is the payment of taxes.\r\n* `Valueaddedtaxpayment` - Transaction is the payment of value added tax.\r\n* `Consumerthirdpartyconsolidatedpayment` - Transaction is a payment used by a third party who can collect funds to pay on behalf of consumers, ie credit counseling or bill payment companies.\r\n* `Debitcollectionpayment` - Collection of funds initiated via a debit transfer.\r\n* `Supplierpayment` - Transaction is related to a payment to a supplier.\r\n* `Hedging` - Transaction is related to a hedging operation.\r\n* `Multipleservicetypes` - Transaction is related to a payment for multiple service types.\r\n* `Nototherwisespecified` - Transaction is related to a payment for type of services not specified elsewhere.\r\n* `Cardpayment` - Transaction is related to a payment of credit card account.\r\n* `Creditcardbill` - Transaction is related to a payment of credit card bill.\r\n* `Ferry` - Transaction is a payment for ferry related business.\r\n* `Air` - Transaction is a payment for air transport related business.\r\n* `Bus` - Transaction is a payment for bus transport related business.\r\n* `Railway` - Transaction is a payment for railway transport related business.\r\n* `Convalescentcarefacility` - Transaction is a payment for convalescence care facility services.\r\n* `Dentalservices` - Transaction is a payment for dental services.\r\n* `Anesthesiaservices` - Transaction is a payment for anesthesia services.\r\n* `Homehealthcare` - Transaction is a payment for home health care services.\r\n* `Hospitalcare` - Transaction is a payment for hospital care services.\r\n* `Intermediatecarefacility` - Transaction is a payment for intermediate care facility services.\r\n* `Longtermcarefacility` - Transaction is a payment for long-term care facility services.\r\n* `Medicalservices` - Transaction is a payment for medical care services.\r\n* `Visioncare` - Transaction is a payment for vision care services.\r\n* `Durablemedicaleequipment` - Transaction is a payment is for use of durable medical equipment.\r\n* `Cabletvbill` - Transaction is related to a payment of cable TV bill.\r\n* `Electricitybill` - Transaction is related to a payment of electricity bill.\r\n* `Gasbill` - Transaction is related to a payment of gas bill.\r\n* `Telephonebill` - Transaction is related to a payment of telephone bill.\r\n* `Othertelecomrelatedbill` - Transaction is related to a payment of other telecom related bill.\r\n* `Waterbill` - Transaction is related to a payment of water bill.\r\n* `Study` - Transaction is related to a payment of study/tuition costs.\r\n* `Pricepayment` - Transaction is related to a payment of a price.\r\n* `Installment` - Transaction is related to a payment of an installment.\r\n* `Recurringinstallmentpayment` - Transaction is related to a payment of a recurring installment made at regular intervals.\r\n* `Openingfee` - Transaction is related to a payment of opening fee.\r\n* `Cancellationfee` - Transaction is related to a payment of cancellation fee.\r\n* `Governmentinsurance` - Transaction is related to a payment of government insurance.\r\n* `Insurancepremiumcar` - Transaction is a payment of car insurance premium.\r\n* `Laborinsurance` - Transaction is a payment of labor insurance.\r\n* `Lifeinsurance` - Transaction is a payment of life insurance.\r\n* `Propertyinsurance` - Transaction is a payment of property insurance.\r\n* `Healthinsurance` - Transaction is a payment of health insurance.\r\n* `Carloanprincipalrepayment` - Transaction is a payment of car loan principal payment.\r\n* `Housingloanrepayment` - Transaction is related to a payment of housing loan.\r\n* `Companysocialloanpaymenttobank` - Transaction is a payment by a company to a bank for financing social loans to employees.\r\n* `Estatetax` - Transaction is related to a payment of estate tax.\r\n* `Housingtax` - Transaction is related to a payment of housing tax.\r\n* `Incometax` - Transaction is related to a payment of income tax.\r\n* `Netincometax` - Transaction is related to a payment of net income tax.\r\n* `Businessexpenses` - Transaction is related to a payment of business expenses.\r\n* `Trustfund` - Transaction is related to a payment of a trust fund.\r\n* `Networkcharge` - Transaction is related to a payment of network charges.\r\n* `Networkcommunication` - Transaction is related to a payment of network communication.\r\n* `Receiptpayment` - Transaction is related to a payment of receipt.\r\n* `Paymentterms` - Transaction is related to payment terms specifications.\r\n* `Other` - Other payment purpose.\r\n* `Withholding` - Transaction is related to a payment of withholding tax.\r\n"
    paymentmethodtypevalues:
      enum:
        - Cheque
        - Credittransfer
        - Directdebit
        - Transferadvice
        - Direct
        - Classical
      type: string
      description: ">\r\n* `Cheque` - Written order to a bank to pay a certain amount of money from one person to another person.\r\n* `Credittransfer` - Transfer of an amount of money in the books of the account servicer.\r\n* `Directdebit` - Collection of an amount of money from the debtor's bank account by the creditor. The amount of money and dates of collections may vary.\r\n* `Transferadvice` - Transfer of an amount of money in the books of the account servicer. An advice should be sent back to the account owner.\r\n* `Direct` - Direct method.\r\n* `Classical` - Classical method.\r\n"
    paymenttimevalues:
      enum:
        - Paymentondelivery
        - Endofmonthofdelivery
        - Endofperiodafterdelivery
        - Endofperiodafterendofdeliverymonth
        - Paymentonreceiptofinvoice
        - Endofperiodafterendofreceiptmonth
        - Endofperiodafterreceipt
        - Endofmonthofreceipt
        - Endofperiodaftermatch
        - Endofperiodaftershipmentdate
        - Endofperiodafterpurchaseorderdate
        - Endofperiodafterbaselineestablishment
        - Endofperiodafterinvoicedate
      type: string
      description: ">\r\n* `Paymentondelivery` - Code for payment on delivery.\r\n* `Endofmonthofdelivery` - Code for payment at end of month of delivery.\r\n* `Endofperiodafterdelivery` - Code for payment at end of period after delivery.\r\n* `Endofperiodafterendofdeliverymonth` - Code for payment at end of period after end of month of delivery.\r\n* `Paymentonreceiptofinvoice` - Code for payment on receipt of invoice.\r\n* `Endofperiodafterendofreceiptmonth` - Code for payment at end of period after end of month of receipt of invoice.\r\n* `Endofperiodafterreceipt` - Code for payment at end of period after receipt of invoice.\r\n* `Endofmonthofreceipt` - Code for payment at end of month of receipt of invoice.\r\n* `Endofperiodaftermatch` - Code for payment at end of period after match or mismatch acceptance.\r\n* `Endofperiodaftershipmentdate` - Payment at end of period after shipment date.\r\n* `Endofperiodafterpurchaseorderdate` - Payment at end of period after purchase order date.\r\n* `Endofperiodafterbaselineestablishment` - Payment at end of period after baseline establishment date.\r\n* `Endofperiodafterinvoicedate` - Payment at end of period after invoice date.\r\n"
    remittancedeliverymethodtypevalues:
      enum:
        - Fax
        - Electronicdatainterchange
        - Uniformresourceidentifier
        - Email
        - Post
        - SMS
      type: string
      description: ">\r\n* `Fax` - Remittance advice information must be faxed.\r\n* `Electronicdatainterchange` - Remittance advice information must be sent through Electronic Data Interchange (EDI).\r\n* `Uniformresourceidentifier` - Remittance advice information needs to be sent to a Uniform Resource Identifier (URI). URI is a compact string of characters that uniquely identify an abstract or physical resource. URI's are the super-set of identifiers, such as URLs, email addresses, ftp sites, etc, and as such, provide the syntax for all of the identification schemes.\r\n* `Email` - Remittance advice information must be sent through e-mail.\r\n* `Post` - Remittance advice information must be sent through postal services.\r\n* `SMS` - Remittance advice information must be sent through by phone as a short message service (SMS).\r\n"
    contactpointtypevalues:
      enum:
        - ElectronicAddress
        - PostalAddress
        - PhoneNumber
        - Socialnetworkaddress
      type: string
      description: ">\r\n* `ElectronicAddress` - Address which is accessed by electronic means. ISO20022\r\n* `PostalAddress` - Information that locates and identifies a specific address. ISO20022\r\n* `PhoneNumber` - Collection of information that identifies a phone address. ISO20022\r\n* `Socialnetworkaddress` - A social network such as Facebook, Twitter, etc.\r\n"
    contactpoint:
      type: object
      properties:
        ContactPointType:
          $ref: '#/components/schemas/contactpointtypevalues'
      description: ''
    paymentarrangement:
      type: object
      properties:
        ServiceType:
          $ref: '#/components/schemas/paymentservicetypevalues'
        PaymentDate:
          $ref: '#/components/schemas/paymentdatetime'
        PaymentPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PaymentPurpose:
          $ref: '#/components/schemas/paymentpurposevalues'
        PaymentAmount:
          $ref: '#/components/schemas/amount'
        PaymentMethod:
          $ref: '#/components/schemas/paymentmethodtypevalues'
        PaymentType:
          $ref: '#/components/schemas/paymenttypevalues'
        PaymentTime:
          $ref: '#/components/schemas/paymenttimevalues'
        RemittanceDeliveryMethod:
          $ref: '#/components/schemas/remittancedeliverymethodtypevalues'
        RemittanceLocation:
          $ref: '#/components/schemas/contactpoint'
      description: Configuration setting for various payment transaction types
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: 'Processing schedule for repeating payments for standing orders (e.g. start date, end, period, number/cycles). Note this triggers an internal execution call as necessary'
    directdebitstatustypevalues:
      enum:
        - Active
        - Inactive
        - Created
        - PendingApproval
        - Cancelled
        - Expired
        - Rejected
        - Completed
        - Archived
        - Failed
        - Suspended
      type: string
      description: ">\r\n* `Active` - The mandate is active.\r\n* `Inactive` - \r\n* `Created` - \r\n* `PendingApproval` - \r\n* `Cancelled` - The mandate is cancelled.\r\n* `Expired` - The mandate has passed the end date.\r\n* `Rejected` - \r\n* `Completed` - \r\n* `Archived` - \r\n* `Failed` - \r\n* `Suspended` - The mandate is put on hold.\r\n"
    directdebittypevalues:
      enum:
        - FixedAmount
        - VariableAmount
        - UsagebasedAmont
        - Paper
        - Emandate
      type: string
      description: ">\r\n* `FixedAmount` - Direct debit amount is fixed.\r\n* `VariableAmount` - Direct debit amount is variable.\r\n* `UsagebasedAmont` - Direct debit amount is based on usage.\r\n* `Paper` - This is a physical form that the customer fills out, signs, and returns to the organization\r\n* `Emandate` - It can be completed and signed electronically, often through online forms or secure digital platforms.\r\n"
    directdebitmandate:
      type: object
      properties:
        DirectDebitMandateIdentification:
          $ref: '#/components/schemas/identifier'
        DirectDebitPurpose:
          $ref: '#/components/schemas/text'
        DirectDebitSourceAccount:
          $ref: '#/components/schemas/account'
        DirectDebitStatus:
          $ref: '#/components/schemas/directdebitstatustypevalues'
        DirectDebitType:
          $ref: '#/components/schemas/directdebittypevalues'
      description: Reference to the applicable mandate for direct debits
    frequencytypevalues:
      enum:
        - Annual
        - Monthly
        - Quarterly
        - Semiannual
        - Weekly
        - Daily
        - Adhoc
        - Intraday
        - Overnight
        - Tendays
        - Fortnightly
        - Triggeredbymovement
        - Never
        - Rate
        - Oncreditevent
        - Upfront
        - Onexpiry
        - Hourly
      type: string
      description: ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n* `Semiannual` - Event takes place every six months or two times a year.\r\n* `Weekly` - Event takes place once a week.\r\n* `Daily` - Event takes place every day.\r\n* `Adhoc` - Event takes place on request or as necessary.\r\n* `Intraday` - Event takes place several times a day.\r\n* `Overnight` - Event takes place overnight.\r\n* `Tendays` - Event takes place every ten business days.\r\n* `Fortnightly` - Event takes place every two weeks.\r\n* `Triggeredbymovement` - Event takes place at the end of the day if there was a movement on the account, otherwise nothing is sent that day.\r\n* `Never` - Event does never take place.\r\n* `Rate` - Event takes place based on a change of a rate.\r\n* `Oncreditevent` - Event occurs due to a credit event occurring for an issuer.\r\n* `Upfront` - Event that takes place at the initiation of a trade or agreement.\r\n* `Onexpiry` - Event occurs on expiry of a financial contract.\r\n* `Hourly` - Event takes place every hours.\r\n"
    directdebitfrequencyvalues:
      enum:
        - Annual
        - Monthly
        - Quarterly
        - Weekly
        - Daily
        - Adhoc
        - Fortnightly
        - Hourly
        - Half-Yearly
      type: string
      description: ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n* `Weekly` - Event takes place once a week.\r\n* `Daily` - Event takes place every day.\r\n* `Adhoc` - Event takes place on request or as necessary.\r\n* `Fortnightly` - Event takes place every two weeks.\r\n* `Hourly` - Event takes place every hours.\r\n* `Half-Yearly` - \r\n"
    yesnoindicator:
      type: object
      properties:
        Yesnoindicator:
          type: string
          description: "Indicates a \"Yes\" or \"No\" type of answer for an element. (ISO20022)\ntrue: Yes\nfalse: No"
          format: datatype
      description: Indicates wether a pre-notification must be sent by the creditor to the debtor before a direct debit occurs (ISO20022)
    directdebitmandatearrangement:
      type: object
      properties:
        FinalCollectionDate:
          $ref: '#/components/schemas/datetime'
        FirstCollectionDate:
          $ref: '#/components/schemas/datetime'
        CollectionAmount:
          $ref: '#/components/schemas/amount'
        MaximumAmount:
          $ref: '#/components/schemas/amount'
        PointIntime:
          $ref: '#/components/schemas/frequencytypevalues'
        ArrangementType:
          $ref: '#/components/schemas/arrangementtypevalues'
        PrenotificationDate:
          $ref: '#/components/schemas/datetime'
        MandateFrequency:
          $ref: '#/components/schemas/directdebitfrequencyvalues'
        PrenotificationIndicator:
          $ref: '#/components/schemas/yesnoindicator'
        PrenotificationThreshold:
          type: string
          description: Specifies the number of days before the direct debit for notifying the debtor (ISO20022)
          format: number
      description: Processing settings governing direct debits
    billpaymandate:
      type: object
      properties:
        BillPayMandateIdentification:
          type: string
          description: Identification of a bill pay mandate
          format: string
        BillPayServiceConfiguration:
          type: string
          description: Modaliteis of a bill pay mandate
          format: string
      description: Reference to the applicable mandate for bill pay transactions
    billpaymandatefacilityarrangement:
      type: object
      properties:
        BillPayMandateFacilityArrangement:
          type: string
          description: "An arrangement allowing an account to be used as payer account in a bill pay instruction \n\nthis is not the direct bill pay (in SEPA: debit mandate) but the permission to use the account for bill pay mandate/direct debit initiated payments"
          format: class
      description: Processing settings governing bill pay transactions
    paymenttransactionstatustypevalues:
      enum:
        - Acceptedtechnicalvalidation
        - Received
        - Partiallyaccepted
        - Rejected
        - Pending
        - Acceptedcustomerprofile
        - Acceptedsettlementinprocess
        - Acceptedsettlementcompleted
        - Accepted
        - Acceptedcancellationrequest
        - Rejectedcancellationrequest
        - Acceptedwithchange
        - Partiallyacceptedcancellationrequest
        - Pendingcancellationrequest
        - Acceptedcreditsettlementcompleted
        - Paymentcancelled
        - Nocancellationprocess
      type: string
      description: ">\r\n* `Acceptedtechnicalvalidation` - Authentication and syntactical and semantical validation are successful.\r\n* `Received` - Payment initiation has been received by the receiving agent.\r\n* `Partiallyaccepted` - A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status.\r\n* `Rejected` - Payment initiation or individual transaction included in the payment initiation has been rejected.\r\n* `Pending` - Payment initiation or individual transaction included in the payment initiation is pending.  Further checks and status update will be performed.\r\n* `Acceptedcustomerprofile` - Preceding check of technical validation was successful. Customer profile check was also successful.\r\n* `Acceptedsettlementinprocess` - All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.\r\n* `Acceptedsettlementcompleted` - Settlement on the debtor's account has been completed.\r\n* `Accepted` - Request is accepted.\r\n* `Acceptedcancellationrequest` - Cancellation is accepted.\r\n* `Rejectedcancellationrequest` - Cancellation request is rejected\r\n* `Acceptedwithchange` - Instruction is accepted but a change will be made, such as date or remittance not sent.\r\n* `Partiallyacceptedcancellationrequest` - Cancellation is partially accepted.\r\n* `Pendingcancellationrequest` - Cancellation request is pending.\r\n* `Acceptedcreditsettlementcompleted` - Settlement on the creditor's account has been completed.\r\n* `Paymentcancelled` - Payment is cancelled.\r\n* `Nocancellationprocess` - There is no cancellation process ongoing\r\n"
    paymenttransactionstatus:
      type: object
      properties:
        PaymentTransactionStatus:
          $ref: '#/components/schemas/status'
        PaymentTransactionStatusType:
          $ref: '#/components/schemas/paymenttransactionstatustypevalues'
      description: "Specifies the status of a payment transaction at a specified time.\nElements"
    paymenttransaction:
      type: object
      properties:
        PaymentTransactionType:
          $ref: '#/components/schemas/paymenttypevalues'
        PaymentTransactionAmount:
          $ref: '#/components/schemas/amount'
        PaymentTransactionIdentification:
          $ref: '#/components/schemas/identifier'
        PaymentTransactionUsedMechanism:
          $ref: '#/components/schemas/text'
        PaymentTransactionDatetime:
          $ref: '#/components/schemas/paymentdatetime'
        PaymentTransactionPurpose:
          $ref: '#/components/schemas/paymentpurposevalues'
        PaymentTransactionStatus:
          $ref: '#/components/schemas/paymenttransactionstatus'
        PaymentTransactionAppliedFeeAmount:
          $ref: '#/components/schemas/amount'
        PaymentTransactionCurrency:
          $ref: '#/components/schemas/currencytypevalues'
        PaymentCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
      description: The general payment transaction with all major attributes - some optional depending on type
    paymentinvolvementtypevalues:
      enum:
        - Payer/Debtor
        - PayeeBank/CreditorAgent
        - Payee/Creditor
        - PayerBank/DebtorAgent
        - Initiator
        - PSU
        - PSP
        - UltimateDebtor
        - UltimateCreditor
      type: string
      description: ">\r\n* `Payer/Debtor` - Party who holds a payment account and allows a payment order from that payment account, or, where there is no payment account, a party who gives a payment order.\r\n* `PayeeBank/CreditorAgent` - Financial institution servicing an account for the payee.\r\n* `Payee/Creditor` - Party who is the intended recipient of funds which have been the subject of a payment transaction.\r\n* `PayerBank/DebtorAgent` - Financial institution servicing an account for the payer.\r\n* `Initiator` - Party initiating the payment to an agent.\r\n* `PSU` - PSU means a natural or legal person making use of a payment service in the capacity of payer or payee; (PSD)\r\n* `PSP` - PSP means a payment service provider falling under any of the categories referred to in Article 1(1) of Directive 2007/64/EC and the legal and natural persons referred to in Article 26 of Directive 2007/64/EC, but excludes the bodies listed in Article 2 of Directive 2006/48/EC of the European Parliament and of the Council of 14 June 2006 relating to the taking up and pursuit of the business of credit institutions ( 1 ) benefiting from a waiver under Article 2(3) of Directive 2007/64/EC; (PSD)\r\n* `UltimateDebtor` - Ultimate party that owes an amount of money to the (ultimate) creditor.\r\n* `UltimateCreditor` - Ultimate party to which an amount of money is due.\r\n"
    Payment:
      type: object
      properties:
        PaymentType:
          $ref: '#/components/schemas/paymenttypevalues'
        PaymentDefinition:
          $ref: '#/components/schemas/text'
        PaymentProcessinngOptionDefinition:
          $ref: '#/components/schemas/paymentprocessingarrangementmodality'
        PaymentProcessingOptionSetting:
          $ref: '#/components/schemas/paymentprocessingarrangementmodality'
        PaymentConfiguration:
          $ref: '#/components/schemas/paymentarrangement'
        PaymentSchedule:
          $ref: '#/components/schemas/schedule'
        DirectDebitMandateReference:
          $ref: '#/components/schemas/directdebitmandate'
        DirectDebitMandateSettings:
          $ref: '#/components/schemas/directdebitmandatearrangement'
        BillPayMandateReference:
          $ref: '#/components/schemas/billpaymandate'
        BilPayMandateSettings:
          $ref: '#/components/schemas/billpaymandatefacilityarrangement'
        PaymentTransaction:
          $ref: '#/components/schemas/paymenttransaction'
        PaymentTransactionType:
          $ref: '#/components/schemas/paymenttypevalues'
        PaymentTransactionPayeeReference:
          $ref: '#/components/schemas/involvedparty'
        PaymentTransactionPayeeAccountReference:
          $ref: '#/components/schemas/account'
        PaymentTransactionPayeeBankReference:
          $ref: '#/components/schemas/involvedparty'
        PaymentTransactionAmount:
          $ref: '#/components/schemas/amount'
        PaymentTransactionFeeType:
          $ref: '#/components/schemas/feetypevalues'
        PaymentTransactionFeeCharge:
          $ref: '#/components/schemas/amount'
        PaymentTransactionDate:
          $ref: '#/components/schemas/datetime'
        PaymentTransactionPaymentMechanism:
          $ref: '#/components/schemas/text'
        PaymentTransactionPaymentPurpose:
          $ref: '#/components/schemas/paymentpurposevalues'
        PaymentTransactionBankBranchLocationReference:
          $ref: '#/components/schemas/location'
        PaymentTransactionStatus:
          $ref: '#/components/schemas/paymenttransactionstatus'
        PaymentTransactionDateType:
          $ref: '#/components/schemas/paymentdatetimetypevalues'
        PaymentInvolvedPartyReference:
          $ref: '#/components/schemas/party'
        PaymentInvolvementType:
          $ref: '#/components/schemas/paymentinvolvementtypevalues'
      description: The product features/services available with a financical facility
    AccountStatement:
      type: object
      description: The product features/services available with a financical facility
    entrydatetypevalues:
      enum:
        - EntryDate
        - ValueDate
      type: string
      description: ">\r\n* `EntryDate` - \r\n* `ValueDate` - \r\n"
    entrytypevalues:
      type: object
      properties:
        Entrytypevalues:
          type: string
          description: ''
          format: enumeration
      description: ''
    accountentry:
      type: object
      properties:
        AccountEntryAmount:
          $ref: '#/components/schemas/amount'
        AccountEntryCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountEntryPurpose:
          $ref: '#/components/schemas/text'
        AccountEntryDate:
          $ref: '#/components/schemas/datetime'
        AccountEntryStatus:
          $ref: '#/components/schemas/status'
        AccountEntryDateType:
          $ref: '#/components/schemas/entrydatetypevalues'
        AccountEntryType:
          $ref: '#/components/schemas/entrytypevalues'
      description: Reference to the entry in Position Keeping of the booking to be authorised
    BookingAuthorization:
      type: object
      properties:
        TransactionPriorityNumber:
          type: string
          description: Priority number of the payment transaction for use in determining the available balance
          format: number
        ValueDate:
          $ref: '#/components/schemas/datetime'
        AuthorizationResult:
          $ref: '#/components/schemas/text'
        PositionKeepingReference:
          $ref: '#/components/schemas/accountentry'
        BookingAmount:
          $ref: '#/components/schemas/amount'
        AuthorizationRejectionReason:
          $ref: '#/components/schemas/text'
        AccountReference:
          $ref: '#/components/schemas/account'
        BookingDate:
          $ref: '#/components/schemas/datetime'
      description: The product features/services available with a financical facility
    interesttypevalues:
      enum:
        - Fixed
        - Floatingratenote
        - Dualbasis
        - Index
        - Discounted
        - Zerocoupon
        - Exinterest
        - Cuminterest
      type: string
      description: ">\r\n* `Fixed` - Indicates that the type of interest is fixed.\r\n* `Floatingratenote` - Indicates that the type of interest is a floating rate note.\r\n* `Dualbasis` - Indicates that the type of interest is a dual basis.\r\n* `Index` - Indicates that the type of interest is index.\r\n* `Discounted` - Indicates that the type of interest is discounted.\r\n* `Zerocoupon` - Indicates that the type of interest is a zero coupon.\r\n* `Exinterest` - Indicates deal price excluding accrued interest.\r\n* `Cuminterest` - Indicates deal price including accrued interest.\r\n"
    taxtypevalues:
      enum:
        - Valueaddedtaxofzerorate
        - Provincial
        - Nationaltax
        - Statetax
        - Withholdingtax
        - Capitalgaintax
        - Interimprofittax
        - Stampduty
        - Wealthtax
        - Inheritancetax
        - Solidaritysurcharge
        - Taxcredit
        - Equalisation
        - Gifttax
        - Consumptiontax
        - Alternativeminimumtax
        - Localtax
        - Nationalfederaltax
        - Paymentlevytax
        - Stockexchangetax
        - Transactiontax
        - Transfertax
        - Valueaddedtax
        - Localbrokercommission
        - Executingbrokercommission
        - Eutaxretention
        - Aktiengewinn1
        - Aktiengewinn2
        - Zwischengewinn
        - Customstax
        - Other
        - Mietgewinn
        - Germanlocaltax3
        - Germanlocaltax4
        - Germanlocaltax2
        - Withholdingofforeigntax
        - Withholdingoflocaltax
        - Capitallosscredit
      type: string
      description: ">\r\n* `Valueaddedtaxofzerorate` - Tax for which a zero rate applies.\r\n* `Provincial` - Tax is a provincial tax.\r\n* `Nationaltax` - Tax is a national tax.\r\n* `Statetax` - Tax is a state tax.\r\n* `Withholdingtax` - Tax is on income deducted at source, which the paying agent is legally obliged to deduct from its payments of interest on deposits and other proceeds of a financial instrument.\r\n* `Capitalgaintax` - Tax is on a capital gain (realised and unrealised), that is, the profit that is gained from the sale of a financial instrument.\r\n* `Interimprofittax` - Tax is on the sum of all earnings/revenues accrued since the last dividend distribution.\r\n* `Stampduty` - Tax is on certain documents and transactions.\r\n* `Wealthtax` - Tax is a special tax imposed, applicable only when the value of assets or categories of assets owned by an entity are above a given ceiling defined by the tax authority. Wealth tax is not linked to income.\r\n* `Inheritancetax` - Tax that is payable at the time of death on any items (money or otherwise), where ownership changes either upon death or within a legally specified number of years before death.\r\n* `Solidaritysurcharge` - Tax that is levied by legal authorities for solidarity purposes.\r\n* `Taxcredit` - Direct reduction of an individual's tax liability.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive / performance fees at the end of the fiscal year.\r\n* `Gifttax` - Tax that is levied on assets given to individuals prior to the death of the donor. Gift tax is designed to ensure the integrity of the inheritance tax, preventing the pre-death transfer of wealth.\r\n* `Consumptiontax` - Tax that is levied on goods and services purchased by customers, and is added to the retail price.\r\n* `Alternativeminimumtax` - Tax is an alternative minimum tax.\r\n* `Localtax` - Tax that is charged by a local settlement system or local jurisdiction.\r\n* `Nationalfederaltax` - Tax is a country, national, or federal tax that is usually charged by the custodian.\r\n* `Paymentlevytax` - Tax levied on a payment.\r\n* `Stockexchangetax` - Tax collected by a stock exchange.\r\n* `Transactiontax` - Tax levied on a transaction.\r\n* `Transfertax` - Tax levied on a transfer.\r\n* `Valueaddedtax` - Tax is a value added tax.\r\n* `Localbrokercommission` - Local broker's commission amount.\r\n* `Executingbrokercommission` - Executing broker's commission amount.\r\n* `Eutaxretention` - Tax withheld at source in the framework of the European Directive on taxation of savings in the form of interest payments.\r\n* `Aktiengewinn1` - Share-related profit. This is a tax specific to the German market. The share-related-profit gives the fund the opportunity to pass on to the institutional investor redeeming fund units certain tax-free income from equity. The calculation method is based on the old Investment Tax Act (Investmentsteuergesetz).\r\n* `Aktiengewinn2` - Share-related profit. This is a tax specific to the German market. The share-related-profit gives the fund the opportunity to pass on to the institutional investor redeeming fund units certain tax-free income from equity. The calculation method is based on the new Investment Tax Act (Investmentsteuergesetz).\r\n* `Zwischengewinn` - Zwischengewinn.\r\n* `Customstax` - Tax is customs and excise.\r\n* `Other` - Another type of tax.\r\n* `Mietgewinn` - Earnings from renting.\r\n* `Germanlocaltax3` - Local tax (Zinstopf) offset interest per unit against tax exempt amount (variation to offset interest per unit in relation to tax exempt amount).\r\n* `Germanlocaltax4` - Local tax (Ertrag Besitzanteilig) yield liable for interest down payment tax.\r\n* `Germanlocaltax2` - Local tax (ZAS pflichtige Zinsen) - interest liable for interest down payment tax (proportion of gross interest per unit/interim profits that is not covered by the credit in the interest pool).\r\n* `Withholdingofforeigntax` - Rate at which the income will be withheld by the jurisdiction in which the income was originally paid, for which relief at source and/or reclaim may be possible.\r\n* `Withholdingoflocaltax` - Rate at which the income will be withheld by the jurisdiction in which the account owner is located, for which relief at source and/or reclaim may be possible.\r\n* `Capitallosscredit` - Tax recovery is due to capital loss.\r\n"
    ratetypevalues:
      enum:
        - Fixed
        - Forfeit
        - Variable
        - Open
        - Unknown
        - Nilpayment
        - Additionaltax
        - Charges
        - Cashinlieuofsecurities
        - Gross
        - Cashincentive
        - Net
        - Sollication
        - Stampduty
        - Stockexchangetax
        - Withholdingtax
        - Transfertax
        - Transactiontax
        - Taxdeferred
        - Taxfeeamount
        - Withholdingofforeigntax
        - Withholdingoflocaltax
        - Imputed
        - Precompte
        - Onetiertax
        - Localtax
        - Scheduled
        - Unscheduled
        - Anyandall
      type: string
      description: ">\r\n* `Fixed` - Rate is fixed.\r\n* `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.\r\n* `Variable` - Rate is variable.\r\n* `Open` - Rate has not been established.\r\n* `Unknown` - Rate is unknown by the sender or has not been established.\r\n* `Nilpayment` - Rate will not be paid.\r\n* `Additionaltax` - Rate used for additional tax that cannot be categorised.\r\n* `Charges` - Rate used to calculate the amount of the charges/fees that cannot be categorised.\r\n* `Cashinlieuofsecurities` - Rate used to calculate the cash disbursement in lieu of a fractional quantity of, for example, equity.\r\n* `Gross` - Cash dividend per equity before deductions or allowances have been made.\r\n* `Cashincentive` - Rate of the cash premium made available if the securities holder consents or participates to an event, for example, consent fees.\r\n* `Net` - Relates to the netting of settlement instructions.\r\n* `Sollication` - Cash rate made available in an offer in order to encourage participation in the offer.\r\n* `Stampduty` - Financial instrument has not been stamped and/or duly signed.\r\n* `Stockexchangetax` - Rate of stock exchange tax.\r\n* `Withholdingtax` - Relates to a tax refund from the authorities on the associated corporate action event.\r\n* `Transfertax` - Transaction has been generated due to transformation following a corporate action.\r\n* `Transactiontax` - Rate used to calculate the amount of transaction tax.\r\n* `Taxdeferred` - Rate relating to the underlying security for which tax is deferred.\r\n* `Taxfeeamount` - Rate relating to the underlying security which is not taxable.\r\n* `Withholdingofforeigntax` - Rate at which the income will be withheld by the jurisdiction in which the income was originally paid, for which relief at source and/or reclaim may be possible.\r\n* `Withholdingoflocaltax` - Rate at which the income will be withheld by the jurisdiction in which the account owner is located, for which relief at source and/or reclaim may be possible.\r\n* `Imputed` - Imputed tax.\r\n* `Precompte` - Rate is a precompte.\r\n* `Onetiertax` - Rate is a one tier tax.\r\n* `Localtax` - Interest liable for interest down payment tax (proportion of gross interest per unit/interim profits that is not covered by the credit in the interest pool).\r\n* `Scheduled` - Rate of the scheduled payment.\r\n* `Unscheduled` - Rate of the unscheduled payment.\r\n* `Anyandall` - Any and all rate is sought.\r\n"
    condition:
      type: object
      properties:
        ConditionIdentification:
          $ref: '#/components/schemas/identifier'
        ConditionName:
          $ref: '#/components/schemas/name'
        ConditionValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        ConditionDateAndTime:
          $ref: '#/components/schemas/datetime'
        ConditionStatus:
          $ref: '#/components/schemas/status'
      description: Specifies taxation conditions.
    taxidentificationtypevalues:
      enum:
        - TaxIdentificationNumber
        - GlobalIntermediaryIdentificationNumber
      type: string
      description: ">\r\n* `TaxIdentificationNumber` - \r\n* `GlobalIntermediaryIdentificationNumber` - \r\n"
    taxidentification:
      type: object
      properties:
        TaxIdentification:
          $ref: '#/components/schemas/identifier'
        TaxIdentificationType:
          $ref: '#/components/schemas/taxidentificationtypevalues'
      description: ''
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goaltypevalues:
      enum:
        - Short-TermGoal
        - Long-TermGoal
        - BusinessGoal
        - PerformanceGoal
        - FinancialGoal
        - OutcomeGoal
        - SMARTGoal
      type: string
      description: ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
    goaldatetimetypevalues:
      enum:
        - SettingDate
        - PlanningDate
        - StartDate
        - ReviewDate
        - CompletionDate
      type: string
      description: ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
    goaldatetime:
      type: object
      properties:
        GoalDateAndTime:
          $ref: '#/components/schemas/datetime'
        GoalDateAndTimeType:
          $ref: '#/components/schemas/goaldatetimetypevalues'
      description: 'The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date.'
    goalstatustypevalues:
      enum:
        - Setting
        - Planning
        - Execution
        - MonitoringAndEvaluation
        - CompletionOrAchievement
        - MaintenanceOrSustainment
        - ClosureOrRenewal
      type: string
      description: ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
    goalstatus:
      type: object
      properties:
        GoalStatus:
          $ref: '#/components/schemas/status'
        GoalStatusType:
          $ref: '#/components/schemas/goalstatustypevalues'
      description: 'The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal'
    goal:
      type: object
      properties:
        GoalType:
          $ref: '#/components/schemas/goaltypevalues'
        GoalDefinition:
          $ref: '#/components/schemas/text'
        GoalName:
          $ref: '#/components/schemas/name'
        GoalDateAndTime:
          $ref: '#/components/schemas/goaldatetime'
        GoalStatus:
          $ref: '#/components/schemas/goalstatus'
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
        - DevelopmentPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n* `DevelopmentPlan` - \r\n"
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: Specifies the adjustments subject to a tax.
    interestratetypevalues:
      enum:
        - Fixed
        - Forfeit
        - Variable
        - Scheduled
        - Unscheduled
        - Discount
        - Fixedrateunderlyingexposureforlife
        - Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating
        - Fixedwithfutureperiodicresets
        - Floatinglinkedtoindex
        - Floatingrateunderlyingexposureforlife
        - Floatingrateunderlyingexposurewithcap
        - Floatingrateunderlyingexposurewithfloor
        - Floatingrateunderlyingexposurewithfloorandcap
        - Modular
        - Obligorswapped
        - Other
        - Swicthoptionality
      type: string
      description: ">\r\n* `Fixed` - Rate is fixed.\r\n* `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.\r\n* `Variable` - Rate is variable.\r\n* `Scheduled` - Rate of the scheduled payment.\r\n* `Unscheduled` - Rate of the unscheduled payment.\r\n* `Discount` - Interest rate type is Discount.\r\n* `Fixedrateunderlyingexposureforlife` - Interest rate type is Fixed rate underlying exposure (for life).\r\n* `Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating` - Interest rate type is Fixed rate underlying exposure with compulsory future switch to floating.\r\n* `Fixedwithfutureperiodicresets` - Interest rate type is Fixed with future periodic resets.\r\n* `Floatinglinkedtoindex` - Interest rate type is Floating rate underlying exposure linked to one index that will revert to another index in the future.\r\n* `Floatingrateunderlyingexposureforlife` - Interest rate type is Floating rate underlying exposure (for life).\r\n* `Floatingrateunderlyingexposurewithcap` - Interest rate type is Floating rate underlying exposure with cap.\r\n* `Floatingrateunderlyingexposurewithfloor` - Interest rate type is Floating rate underlying exposure with floor.\r\n* `Floatingrateunderlyingexposurewithfloorandcap` - Interest rate type is Floating rate underlying exposure with both floor and cap.\r\n* `Modular` - Interest rate type is Modular.\r\n* `Obligorswapped` - Interest rate type is Obligor Swapped.\r\n* `Other` - Any other type of interest rate that can be applied.\r\n* `Swicthoptionality` - Interest rate type is Switch Optionality.\r\n"
    rateplantypevalues:
      enum:
        - StandardRatePlan
        - AdjustmentRatePlan
        - FinalRatePlan
      type: string
      description: ">\r\n* `StandardRatePlan` - \r\n* `AdjustmentRatePlan` - \r\n* `FinalRatePlan` - \r\n"
    rateplan:
      type: object
      properties:
        RatePlanName:
          type: string
          description: ''
          format: string
        RatePlanType:
          $ref: '#/components/schemas/rateplantypevalues'
        RatePlan:
          type: string
          description: ''
          format: string
      description: An arranged InterestRatePlan
    interestarrangement:
      type: object
      properties:
        InterestType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestRate:
          $ref: '#/components/schemas/rate'
        InterestDefinition:
          $ref: '#/components/schemas/text'
        InterestRateType:
          $ref: '#/components/schemas/interestratetypevalues'
        InterestPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        InterestRatePlan:
          $ref: '#/components/schemas/rateplan'
        InterestSchedule:
          $ref: '#/components/schemas/schedule'
      description: Interest for which a tax is specified.
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: Product on which a tax is applied.
    truefalseindicatorvalues:
      enum:
        - '1'
        - '0'
      type: string
      description: ">\r\n* `1` - \r\n* `0` - \r\n"
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: ''
    taxarrangement:
      type: object
      properties:
        TaxType:
          $ref: '#/components/schemas/taxtypevalues'
        TaxAmount:
          $ref: '#/components/schemas/amount'
        TaxRate:
          $ref: '#/components/schemas/rate'
        TaxRateType:
          $ref: '#/components/schemas/ratetypevalues'
        PlaceOfTaxation:
          $ref: '#/components/schemas/location'
        TaxableParty:
          $ref: '#/components/schemas/involvedparty'
        TaxAccount:
          $ref: '#/components/schemas/account'
        TaxationCondition:
          $ref: '#/components/schemas/condition'
        TaxCurrency:
          $ref: '#/components/schemas/currencycode'
        TaxDueDate:
          $ref: '#/components/schemas/datetime'
        TaxCalculationDate:
          $ref: '#/components/schemas/datetime'
        TaxPayer:
          $ref: '#/components/schemas/involvedparty'
        TaxRecipient:
          $ref: '#/components/schemas/involvedparty'
        TaxIdentification:
          $ref: '#/components/schemas/taxidentification'
        TaxationPlace:
          $ref: '#/components/schemas/location'
        TaxCharge:
          $ref: '#/components/schemas/feearrangement'
        TaxInterest:
          $ref: '#/components/schemas/interestarrangement'
        TaxMethod:
          $ref: '#/components/schemas/text'
        TaxProduct:
          $ref: '#/components/schemas/bankingproduct'
        TaxExemption:
          $ref: '#/components/schemas/truefalseindicatorvalues'
        TaxExemptionReason:
          $ref: '#/components/schemas/text'
        TaxDateAndTime:
          $ref: '#/components/schemas/datetime'
        TaxCertification:
          $ref: '#/components/schemas/document'
        TaxPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: Specifies the tax on interest
    interestcalculationmethodtypevalues:
      enum:
        - Simple
        - Compounding
      type: string
      description: ">\r\n* `Simple` - Calculation method by which interest is calculated on the original principal only. Accumulated interest from prior periods is not used in calculations for the following periods. (ISO20022)\n\r\n* `Compounding` - Calculation method by which interest is calculated each period on the original principal and all interest accumulated during past periods. (ISO20022)\r\n"
    interesttransactiontypevalues:
      enum:
        - InterestAllocationTransaction
        - InterestPaymentTransaction
        - InterestAdjustmentTransaction
      type: string
      description: ">\r\n* `InterestAllocationTransaction` - \r\n* `InterestPaymentTransaction` - \r\n* `InterestAdjustmentTransaction` - \r\n"
    interesttransaction:
      type: object
      properties:
        InterestTransactionAmount:
          $ref: '#/components/schemas/amount'
        InterestTransactionDescription:
          $ref: '#/components/schemas/text'
        InterestTransactionType:
          $ref: '#/components/schemas/interesttransactiontypevalues'
        AppliedInterestRate:
          $ref: '#/components/schemas/rate'
        AppliedInteretType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
      description: A record of applied interest
    frequency:
      type: object
      properties:
        FrequencyCode:
          $ref: '#/components/schemas/frequencytypevalues'
        FrequencyName:
          $ref: '#/components/schemas/name'
        FrequencyDefinition:
          $ref: '#/components/schemas/text'
      description: Specifies the frequency of an interest payment.
    Interest:
      type: object
      properties:
        InterestPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        InterestAmount:
          $ref: '#/components/schemas/amount'
        InterestType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestDate:
          $ref: '#/components/schemas/datetime'
        InterestAccrualDate:
          $ref: '#/components/schemas/datetime'
        InterestTax:
          $ref: '#/components/schemas/taxarrangement'
        InterestCalculationDate:
          $ref: '#/components/schemas/datetime'
        InterestCalculationMethod:
          $ref: '#/components/schemas/interestcalculationmethodtypevalues'
        InterestAccrualAmount:
          $ref: '#/components/schemas/amount'
        InterestAccrualType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        InterestTransaction:
          $ref: '#/components/schemas/interesttransaction'
        InterestFee:
          $ref: '#/components/schemas/feearrangement'
        InterestRate:
          $ref: '#/components/schemas/rate'
        InterestRateType:
          $ref: '#/components/schemas/interestratetypevalues'
        InterestPaymentFrequency:
          $ref: '#/components/schemas/frequency'
        InterestCalculationFrequency:
          $ref: '#/components/schemas/frequency'
        InterestRateApplicationSchedule:
          $ref: '#/components/schemas/schedule'
      description: The product features/services available with a financical facility
    mandatestatustypevalues:
      enum:
        - Accepted
        - Rejected
      type: string
      description: ">\r\n* `Accepted` - \r\n* `Rejected` - \r\n"
    mandatestatus:
      type: object
      properties:
        MandateStatus:
          $ref: '#/components/schemas/status'
        MandateStatusType:
          $ref: '#/components/schemas/mandatestatustypevalues'
      description: Specifies whether a mandate is accepted or rejected. (ISO20022)
    mandatetypevalues:
      enum:
        - Consent
        - PowerOfAttorney
        - DirectDebitMandate
        - ServicingMandate
      type: string
      description: ">\r\n* `Consent` - Permission or Agreement obtained from someone or something having authority or power\n\nPermission for something to happen or agreement to do something.\r\n* `PowerOfAttorney` - A written authorization that transfers specific rights from a party to another party.\n\nDocument that transfers specific rights from a party to another party. ISO20022\r\n* `DirectDebitMandate` - An agreement between a debtor and a creditor allowing the creditor to instruct the bank to debit the debtors account\n\nAuthorization in favour of the creditor given by the debtor to debit its own account. (ISO20022)\r\n* `ServicingMandate` - An agreement between the customer and a service provider to authorise the service provider to access Products and Services on behalf of the customer. \r\n"
    mandate:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/mandatestatus'
        TrackingDays:
          type: string
          description: Specifies the number of days the mandate must be tracked. (ISO20022)
          format: number
        Identification:
          $ref: '#/components/schemas/identifier'
        Type:
          $ref: '#/components/schemas/mandatetypevalues'
        Duration:
          $ref: '#/components/schemas/datetimeperiod'
        TrackingIndicator:
          $ref: '#/components/schemas/yesnoindicator'
      description: 'Permission to define a sweep arrangement to the target account.  '
    sweeparrangement:
      type: object
      properties:
        SweepType:
          $ref: '#/components/schemas/text'
        SweepModalitites:
          $ref: '#/components/schemas/servicemodality'
        SweepCounterAccountReference:
          $ref: '#/components/schemas/account'
        SweepSchedule:
          $ref: '#/components/schemas/schedule'
        SweepMandate:
          $ref: '#/components/schemas/mandate'
        SweepDirection:
          $ref: '#/components/schemas/text'
      description: The set-up of the sweep facility
    financialfacility:
      type: object
      properties:
        FinancialFacility:
          type: string
          description: "A production or operational capacity to perform a business function for delivering a banking product or service\n\nA functional classification of banking product that provides ongoing capacity to deliver financial services (e.g. loan service, payment service)\n\n\n"
          format: class
      description: The facility that the sweep is made to/from
    sweeptransaction:
      type: object
      properties:
        SweepTransaction:
          type: string
          description: An transaction which is the result of fulfilling a sweep arrangement
          format: class
      description: The transaction record for an applied sweep
    Sweep:
      type: object
      properties:
        SweepType:
          $ref: '#/components/schemas/text'
        SweepDefinition:
          $ref: '#/components/schemas/text'
        SweepApplicationSchedule:
          $ref: '#/components/schemas/schedule'
        SweepConfiguration:
          $ref: '#/components/schemas/sweeparrangement'
        TargetAccount:
          $ref: '#/components/schemas/financialfacility'
        SweepMandate:
          $ref: '#/components/schemas/mandate'
        SweepProcessingSchedule:
          $ref: '#/components/schemas/schedule'
        SweepApplicationRecord:
          $ref: '#/components/schemas/sweeptransaction'
        SweepTargetAccount:
          $ref: '#/components/schemas/financialfacility'
        SweepAmount:
          $ref: '#/components/schemas/amount'
        SweepExecutionDate:
          $ref: '#/components/schemas/datetime'
      description: The product features/services available with a financical facility
    instructiondatetimetypevalues:
      enum:
        - DueDate
        - ExecutionDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n* `FulfillmentDate` - \r\n"
    instructiondatetime:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/datetime'
        InstructionDateType:
          $ref: '#/components/schemas/instructiondatetimetypevalues'
      description: ''
    instructionstatustypevalues:
      enum:
        - Pendingprocessing
        - Acknowledgedaccepted
        - Rejected
        - Accepted
        - Completed
        - Notreceived
        - Cancelled
        - Beingcancelled
        - Receivedbyissuerorregistrar
        - Pending
        - Standinginstruction
        - Queued
        - Cancelledbysubcustodian
        - Forwarded
      type: string
      description: ">\r\n* `Pendingprocessing` - Processing of the instruction is pending.\r\n* `Acknowledgedaccepted` - Instruction has been acknowledged and accepted and is validated for further processing.\r\n* `Rejected` - Instruction has been rejected.\r\n* `Accepted` - Instruction has been accepted and is validated for further processing.\r\n* `Completed` - Processing has been completed.\r\n* `Notreceived` - No instruction has been received (to be used in a reminder).\r\n* `Cancelled` - Instruction has been cancelled.\r\n* `Beingcancelled` - Cancel request is being processed.\r\n* `Receivedbyissuerorregistrar` - Instruction has been received by Issuer.\r\n* `Pending` - Instruction is pending.\r\n* `Standinginstruction` - Standing instruction is applied.\r\n* `Queued` - Instruction is queued.\r\n* `Cancelledbysubcustodian` - Instruction has been cancelled by the agent, for example, due to an event deadline extension.\r\n* `Forwarded` - Accepted and sent along the chain.\r\n"
    instructionstatus:
      type: object
      properties:
        InstructionStatusType:
          $ref: '#/components/schemas/instructionstatustypevalues'
        InstructionStatus:
          $ref: '#/components/schemas/status'
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instructionidentificationtypevalues:
      enum:
        - OrderNumber
        - InstructionNumber
      type: string
      description: ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
    instructionidentification:
      type: object
      properties:
        InstructionIdentification:
          $ref: '#/components/schemas/identifier'
        InstructionIdentificationType:
          $ref: '#/components/schemas/instructionidentificationtypevalues'
      description: "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
    instructiontypevalues:
      enum:
        - PaymentInstruction
        - DeliveryOrder
        - InformationRequest
        - ExchangeInstruction
        - AllocationInstruction
        - MaintenanceInstruction
      type: string
      description: ">\r\n* `PaymentInstruction` - \r\n* `DeliveryOrder` - \r\n* `InformationRequest` - \r\n* `ExchangeInstruction` - \r\n* `AllocationInstruction` - \r\n* `MaintenanceInstruction` - \r\n"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    instruction:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/instructiondatetime'
        InstructionStatus:
          $ref: '#/components/schemas/instructionstatus'
        InstructionIdentifier:
          $ref: '#/components/schemas/instructionidentification'
        InstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        InstructionResult:
          $ref: '#/components/schemas/text'
        InstructionDescription:
          $ref: '#/components/schemas/text'
        InstructionLog:
          $ref: '#/components/schemas/log'
        InstructionPurpose:
          $ref: '#/components/schemas/text'
      description: Processing instructions for this amount block as far as these deviate from the standard amount block processing
    AmountBlock:
      type: object
      properties:
        AmountBlockReference:
          $ref: '#/components/schemas/identifier'
        AmountBlockType:
          $ref: '#/components/schemas/text'
        AmountBlockPriorityNumber:
          type: string
          description: Number that indicates the priority of the amount block whne used fo authorisattion of transactions
          format: number
        AmountBlockProcessingInstructions:
          $ref: '#/components/schemas/instruction'
        AmountBlockReason:
          $ref: '#/components/schemas/text'
        AmountBlockOriginatorReference:
          $ref: '#/components/schemas/involvedparty'
        AmountBlockAmount:
          $ref: '#/components/schemas/amount'
        AmountBlockStartDate:
          $ref: '#/components/schemas/datetime'
        AmountBlockExpiryDate:
          $ref: '#/components/schemas/datetime'
        AmountBlockStatus:
          $ref: '#/components/schemas/status'
      description: The product features/services available with a financical facility
    deposittypevalues:
      enum:
        - CashDeposit
        - SecurityDeposit
        - PawnDeposit
        - Call/NoticeDeposit
        - FixedTermDeposit
        - DemandDeposit
        - TimeDeposit
        - CardDeposit
      type: string
      description: ">\r\n* `CashDeposit` - Amount of money representing a value paid by a debtor to an agent bank. (ISO20022)\r\n* `SecurityDeposit` - \r\n* `PawnDeposit` - \r\n* `Call/NoticeDeposit` - \r\n* `FixedTermDeposit` - \r\n* `DemandDeposit` - A demand deposit account is essentially a checking account in which you can withdraw funds at any time. (Investopedia)\nhttps://www.investopedia.com/terms/d/demanddeposit.asp#:~:text=our%20editorial%20policies-,What%20Is%20a%20Demand%20Deposit%3F,are%20common%20types%20of%20DDAs.\r\n* `TimeDeposit` - Time deposits are those with a fixed time and usually pay a fixed interest rate (Investopedia)\r\n* `CardDeposit` - \r\n"
    deposittransaction:
      type: object
      properties:
        DepositAmount:
          $ref: '#/components/schemas/amount'
      description: Details of the deposit transaction
    date:
      type: object
      properties:
        DateContent:
          $ref: '#/components/schemas/text'
      description: The date and time the deposit was initiated
    Deposit:
      type: object
      properties:
        DepositType:
          $ref: '#/components/schemas/deposittypevalues'
        DepositTransaction:
          $ref: '#/components/schemas/deposittransaction'
        DepositTransactionSourceReference:
          type: string
          description: Identifies the source of the deposit
          format: object
        DepositTransactionDepositType:
          $ref: '#/components/schemas/deposittypevalues'
        DepositTransactionDescription:
          $ref: '#/components/schemas/text'
        DepositTransactionAmount:
          $ref: '#/components/schemas/amount'
        DepositTransactionDate:
          $ref: '#/components/schemas/date'
      description: The product features/services available with a financical facility
    withdrawaltypevalues:
      enum:
        - CashWithdrawal
        - SecurityWithdrawal
      type: string
      description: ">\r\n* `CashWithdrawal` - \r\n* `SecurityWithdrawal` - \r\n"
    Withdrawal:
      type: object
      properties:
        WithdrawalType:
          $ref: '#/components/schemas/withdrawaltypevalues'
        WithdrawalTransaction:
          $ref: '#/components/schemas/paymenttransaction'
        WithdrawalTransactionSourceReference:
          type: string
          description: Identifies the target for the withdrawal
          format: object
        WithdrawalTransactionWithdrawalType:
          $ref: '#/components/schemas/withdrawaltypevalues'
        WithdrawalTransactionDescription:
          $ref: '#/components/schemas/text'
        WihdrawalTransactionAmount:
          $ref: '#/components/schemas/amount'
        WithdrawalTransactionDate:
          $ref: '#/components/schemas/date'
      description: The product features/services available with a financical facility
    currentaccountagreement:
      type: object
      properties:
        CurrentAccountAgreement:
          type: string
          description: "An agreement between bank and customer/client which regulates arrangements, terms and conditions for daily banking transactions as offered as services in the current account product. \n"
          format: class
      description: "Reference to the current account product instance ||\r\n|"
    currentaccountproducttypevalues:
      enum:
        - BusinessCurrentAccount
        - PersonalCurrentAccount
      type: string
      description: "The type of current account (e.g. checking, student, small business) ||\r\n|"
    servicearrangementmodality:
      type: object
      properties:
        ServiceArrangementModalityType:
          $ref: '#/components/schemas/modalitytypevalues'
      description: ''
    partyobligationorentitlement:
      type: object
      properties:
        ObligationOrEntitlementSubject:
          $ref: '#/components/schemas/subject'
        ObligationOrEntitlementType:
          $ref: '#/components/schemas/arrangementtypevalues'
        ObligationOrEntitlementModality:
          $ref: '#/components/schemas/servicearrangementmodality'
        ObligationOrEntitlementDefinition:
          $ref: '#/components/schemas/text'
      description: "Description of the role, obligations or entitlements of the associated party ||\r\n|"
    accountrestrictionstatustypevalues:
      enum:
        - Active
        - Inactive
      type: string
      description: ">\r\n* `Active` - Status of the restriction is active.\r\n* `Inactive` - Status of the restriction is inactive.\r\n"
    accountrestrictionstatus:
      type: object
      properties:
        AccountRestrictionStatus:
          $ref: '#/components/schemas/status'
        AccountRestrictionStatusType:
          $ref: '#/components/schemas/accountrestrictionstatustypevalues'
      description: Status of the restriction.
    accountrestriction:
      type: object
      properties:
        AccountRestrictionIdentifier:
          $ref: '#/components/schemas/identifier'
        AccountRestrictionType:
          $ref: '#/components/schemas/text'
        AccountRestrictionDescription:
          $ref: '#/components/schemas/text'
        AccountRestrictionValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AccountRestrictionStatus:
          $ref: '#/components/schemas/accountrestrictionstatus'
        AccountRestrictionRegulator:
          $ref: '#/components/schemas/involvedparty'
      description: "The setting for the restriction option AccountRestriction_x000D_\n|AccountRestriction (https://www.iso20022.org/standardsrepository/type/AccountRestriction)|Standard|ISO20022 BM  ()"
    accountinvolvementtypevalues:
      enum:
        - PartyIsOwnerOfAccount
        - PartyIsServicerOfAccount
        - PartyIsPayeeOnAccount
        - PartyIsPrimaryOwnerOfAccount
        - PartyIsCo-OwnerOfAccount
        - PartyIsJointOwnerOfAccount
      type: string
      description: 'The type of association (e.g. guarantor, co-signer) AccountPartyRole |AccountPartyRole  (https://www.iso20022.org/standardsrepository/type/AccountPartyRole)|Standard|ISO20022 BM ()'
    accountinvolvement:
      type: object
      properties:
        AccountInvolvementType:
          $ref: '#/components/schemas/accountinvolvementtypevalues'
        AccountReference:
          $ref: '#/components/schemas/account'
        PartyReference:
          $ref: '#/components/schemas/party'
      description: "Definition of the associations to the account Account Party Role_x000D_\n|Account Party Role (https://www.iso20022.org/standardsrepository/type/AccountPartyRole)|Standard|ISO20022 BM ()"
    account_accountrelationshiptypevalues:
      enum:
        - AccountIsParentAccountForAccount
        - AccountIsSubAccountForAccount
        - AccountIsLinkedToAccount
      type: string
      description: "The type and purpose for the link ||\r\n|"
    limittypevalues:
      enum:
        - Multilateral
        - Bilateral
        - Netbilateral
        - Indirectbilateral
        - Global
        - Mandatorybilateral
        - Discretionarybilateral
        - Directdebit
        - Singlecustomerdirectdebit
        - Singlefinancialinstitutiondirectdebit
        - Totaldailycustomerdirectdebit
        - Totaldailyfinancialinstitutiondirectdebit
        - Autocollateralisation
        - Unsecuredcredit
        - Externalguarantee
      type: string
      description: The type of limit  LimitTypeCode|LimitTypeCode (https://www.iso20022.org/standardsrepository/type/LimitTypeCode)|Standard|ISO20022 BM ()
    limitstatustypevalues:
      enum:
        - Enabled
        - Disabled
        - Deleted
        - Requested
      type: string
      description: ">\r\n* `Enabled` - Limit is currently in effect.\r\n* `Disabled` - Limit is not currently in effect.\r\n* `Deleted` - Limit has been deleted or suspended.\r\n* `Requested` - Limit has been asked for and is not yet enabled.\r\n"
    limitstatus:
      type: object
      properties:
        LimitStatus:
          $ref: '#/components/schemas/status'
        LimitStatusType:
          $ref: '#/components/schemas/limitstatustypevalues'
      description: Current status of the limit.
    limitarrangement:
      type: object
      properties:
        LimitType:
          $ref: '#/components/schemas/limittypevalues'
        LimitCurrency:
          $ref: '#/components/schemas/currencycode'
        LimitValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LimitAmount:
          $ref: '#/components/schemas/amount'
        LimitStatus:
          $ref: '#/components/schemas/limitstatus'
        LimitRate:
          $ref: '#/components/schemas/rate'
        LimitFrequency:
          $ref: '#/components/schemas/frequency'
        LimitIdentification:
          $ref: '#/components/schemas/identifier'
        LimitStartDatetime:
          $ref: '#/components/schemas/datetime'
        LimitCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        LimitAmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: The associated limit settings and rules Limit|Limit (https://www.iso20022.org/standardsrepository/type/Limit)|Standard|ISO20022 (https://www.iso20022.org/)
    CurrentAccountFacility:
      type: object
      properties:
        ProductInstanceReference:
          $ref: '#/components/schemas/currentaccountagreement'
        CurrentAccountNumber:
          $ref: '#/components/schemas/accountidentification'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        BankBranchLocationReference:
          $ref: '#/components/schemas/branch'
        AccountType:
          $ref: '#/components/schemas/currentaccountproducttypevalues'
        AccountCurrency:
          $ref: '#/components/schemas/accountcurrency'
        TaxReference:
          $ref: '#/components/schemas/identifier'
        EntitlementOptionDefinition:
          $ref: '#/components/schemas/partyobligationorentitlement'
        EntitlementOptionSetting:
          $ref: '#/components/schemas/partyobligationorentitlement'
        RestrictionOptionDefinition:
          $ref: '#/components/schemas/accountrestriction'
        RestrictionOptionSetting:
          $ref: '#/components/schemas/accountrestriction'
        Associations:
          $ref: '#/components/schemas/accountinvolvement'
        AssociationType:
          $ref: '#/components/schemas/accountinvolvementtypevalues'
        AssociationObligationorEntitlement:
          $ref: '#/components/schemas/partyobligationorentitlement'
        AssociationReference:
          $ref: '#/components/schemas/party'
        LinkedAccounts:
          $ref: '#/components/schemas/account'
        LinkType:
          $ref: '#/components/schemas/account_accountrelationshiptypevalues'
        AccountDetails:
          $ref: '#/components/schemas/account'
        LimitType:
          $ref: '#/components/schemas/limittypevalues'
        LimitSettings:
          $ref: '#/components/schemas/limitarrangement'
        LimitValue:
          $ref: '#/components/schemas/value'
        AccountDateType:
          $ref: '#/components/schemas/accountdatetimetypevalues'
        AccountDate:
          $ref: '#/components/schemas/datetime'
        AccountBalance:
          $ref: '#/components/schemas/accountbalance'
        AccountStatus:
          $ref: '#/components/schemas/accountstatustypevalues'
      description: 'Fulfill any scheduled and ad-hoc obligations under a service arrangement, most typically for a financial product or facility within Current Account. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CurrentAccountFacility:
      description: CurrentAccountFacility
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentAccountFacility'
    Interest:
      description: Interest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interest'
    ServiceFee:
      description: ServiceFee
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceFee'
    Sweep:
      description: Sweep
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sweep'
    Withdrawal:
      description: Withdrawal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Withdrawal'
    Payment:
      description: Payment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
    IssuedDevice:
      description: IssuedDevice
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssuedDevice'
    BookingAuthorization:
      description: BookingAuthorization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookingAuthorization'
    AmountBlock:
      description: AmountBlock
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AmountBlock'
    Deposit:
      description: Deposit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Deposit'
  parameters:
    currentaccountid:
      name: currentaccountid
      in: path
      required: true
      style: simple
      schema:
        type: string
    interestid:
      name: interestid
      in: path
      required: true
      style: simple
      schema:
        type: string
    servicefeeid:
      name: servicefeeid
      in: path
      required: true
      style: simple
      schema:
        type: string
    sweepid:
      name: sweepid
      in: path
      required: true
      style: simple
      schema:
        type: string
    withdrawalid:
      name: withdrawalid
      in: path
      required: true
      style: simple
      schema:
        type: string
    paymentid:
      name: paymentid
      in: path
      required: true
      style: simple
      schema:
        type: string
    issueddeviceid:
      name: issueddeviceid
      in: path
      required: true
      style: simple
      schema:
        type: string
    bookingauthorizationid:
      name: bookingauthorizationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    amountblockid:
      name: amountblockid
      in: path
      required: true
      style: simple
      schema:
        type: string
    depositid:
      name: depositid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CurrentAccountFacility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentAccountFacility'
      required: true
    ServiceFee:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceFee'
      required: true
    Sweep:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sweep'
      required: true
    Withdrawal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Withdrawal'
      required: true
    Payment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
      required: true
    IssuedDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssuedDevice'
      required: true
    Interest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interest'
      required: true
    BookingAuthorization:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookingAuthorization'
      required: true
    AmountBlock:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AmountBlock'
      required: true
    Deposit:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Deposit'
      required: true