openapi: 3.0.1
info:
  title: Direct Debit
  description: Fulfils a direct debit agreement.  Handles the creditor side of direct debits.
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/DirectDebit/13.0.0
paths:
  '/DirectDebit/{directdebitid}/Control':
    put:
      tags:
        - CR - DirectDebitFacility
      summary: CoCR Control the processing of Direct Debit Facility
      description: CoCR Control the processing of Direct Debit Facility
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebitFacility'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebitFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/Exchange':
    put:
      tags:
        - CR - DirectDebitFacility
      summary: 'EcCR Accept, verify, etc. aspects of Direct Debit Facility processing'
      description: 'EcCR Accept, verify, etc. aspects of Direct Debit Facility processing'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebitFacility'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebitFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/Execute':
    put:
      tags:
        - CR - DirectDebitFacility
      summary: ExCR Execute an available automated action for Direct Debit Facility
      description: ExCR Execute an available automated action for Direct Debit Facility
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebitFacility'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebitFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /DirectDebit/Initiate:
    post:
      tags:
        - CR - DirectDebitFacility
      summary: InCR Instantiate a new Direct Debit Facility
      description: InCR Instantiate a new Direct Debit Facility
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/DirectDebitFacility'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebitFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/Retrieve':
    get:
      tags:
        - CR - DirectDebitFacility
      summary: ReCR Retrieve details about any aspect of Direct Debit Facility
      description: ReCR Retrieve details about any aspect of Direct Debit Facility
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      responses:
        '200':
          $ref: '#/components/responses/RetrieveDirectDebitFacilityResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/Request':
    put:
      tags:
        - CR - DirectDebitFacility
      summary: RqCR Request manual intervention or a decision with respect to Direct Debit Facility
      description: RqCR Request manual intervention or a decision with respect to Direct Debit Facility
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebitFacility'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebitFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/Update':
    put:
      tags:
        - CR - DirectDebitFacility
      summary: UpCR Update details relating to Direct Debit Facility
      description: UpCR Update details relating to Direct Debit Facility
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebitFacility'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebitFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/PaymentTracking/{paymenttrackingid}/Control':
    put:
      tags:
        - BQ - PaymentTracking
      summary: CoBQ Control the processing of Payment Tracking
      description: CoBQ Control the processing of Payment Tracking
      operationId: ControlPaymentTracking
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/paymenttrackingid'
      requestBody:
        $ref: '#/components/requestBodies/PaymentTracking'
      responses:
        '200':
          $ref: '#/components/responses/PaymentTracking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/FundsAvailableCheck/{fundsavailablecheckid}/Execute':
    put:
      tags:
        - BQ - FundsAvailableCheck
      summary: 'EcBQ Accept, verify, etc. aspects of Funds Available Check processing'
      description: 'EcBQ Accept, verify, etc. aspects of Funds Available Check processing'
      operationId: ExecuteFundsAvailableCheck
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/fundsavailablecheckid'
      requestBody:
        $ref: '#/components/requestBodies/FundsAvailableCheck'
      responses:
        '200':
          $ref: '#/components/responses/FundsAvailableCheck'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/PaymentInitiation/{paymentinitiationid}/Execute':
    put:
      tags:
        - BQ - PaymentInitiation
      summary: 'EcBQ Accept, verify, etc. aspects of Payment Initiation processing'
      description: 'EcBQ Accept, verify, etc. aspects of Payment Initiation processing'
      operationId: ExecutePaymentInitiation
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/paymentinitiationid'
      requestBody:
        $ref: '#/components/requestBodies/PaymentInitiation'
      responses:
        '200':
          $ref: '#/components/responses/PaymentInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/VerifyMandate/{verifymandateid}/Execute':
    put:
      tags:
        - BQ - VerifyMandate
      summary: 'EcBQ Accept, verify, etc. aspects of Verify Mandate processing'
      description: 'EcBQ Accept, verify, etc. aspects of Verify Mandate processing'
      operationId: ExecuteVerifyMandate
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/verifymandateid'
      requestBody:
        $ref: '#/components/requestBodies/VerifyMandate'
      responses:
        '200':
          $ref: '#/components/responses/VerifyMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/PaymentTracking/{paymenttrackingid}/Execute':
    put:
      tags:
        - BQ - PaymentTracking
      summary: ExBQ Execute an available automated action for Payment Tracking
      description: ExBQ Execute an available automated action for Payment Tracking
      operationId: ExecutePaymentTracking
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/paymenttrackingid'
      requestBody:
        $ref: '#/components/requestBodies/PaymentTracking'
      responses:
        '200':
          $ref: '#/components/responses/PaymentTracking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/PaymentTracking/Initiate':
    post:
      tags:
        - BQ - PaymentTracking
      summary: InBQ Instantiate a new Payment Tracking
      description: InBQ Instantiate a new Payment Tracking
      operationId: InitiatePaymentTracking
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/PaymentTracking'
      responses:
        '200':
          $ref: '#/components/responses/PaymentTracking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/Reporting/Initiate':
    post:
      tags:
        - BQ - Reporting
      summary: InBQ Instantiate a new Reporting
      description: InBQ Instantiate a new Reporting
      operationId: InitiateReporting
      parameters:
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/Reporting'
      responses:
        '200':
          $ref: '#/components/responses/Reporting'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/FundsAvailableCheck/{fundsavailablecheckid}/Retrieve':
    get:
      tags:
        - BQ - FundsAvailableCheck
      summary: ReBQ Retrieve details about any aspect of Funds Available Check
      description: ReBQ Retrieve details about any aspect of Funds Available Check
      operationId: RetrieveFundsAvailableCheck
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/fundsavailablecheckid'
      responses:
        '200':
          $ref: '#/components/responses/FundsAvailableCheck'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/PaymentInitiation/{paymentinitiationid}/Retrieve':
    get:
      tags:
        - BQ - PaymentInitiation
      summary: ReBQ Retrieve details about any aspect of Payment Initiation
      description: ReBQ Retrieve details about any aspect of Payment Initiation
      operationId: RetrievePaymentInitiation
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/paymentinitiationid'
      responses:
        '200':
          $ref: '#/components/responses/PaymentInitiation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/PaymentTracking/{paymenttrackingid}/Retrieve':
    get:
      tags:
        - BQ - PaymentTracking
      summary: ReBQ Retrieve details about any aspect of Payment Tracking
      description: ReBQ Retrieve details about any aspect of Payment Tracking
      operationId: RetrievePaymentTracking
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/paymenttrackingid'
      responses:
        '200':
          $ref: '#/components/responses/PaymentTracking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/Reporting/{reportingid}/Retrieve':
    get:
      tags:
        - BQ - Reporting
      summary: ReBQ Retrieve details about any aspect of Reporting
      description: ReBQ Retrieve details about any aspect of Reporting
      operationId: RetrieveReporting
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/reportingid'
      responses:
        '200':
          $ref: '#/components/responses/Reporting'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/VerifyMandate/{verifymandateid}/Retrieve':
    get:
      tags:
        - BQ - VerifyMandate
      summary: ReBQ Retrieve details about any aspect of Verify Mandate
      description: ReBQ Retrieve details about any aspect of Verify Mandate
      operationId: RetrieveVerifyMandate
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/verifymandateid'
      responses:
        '200':
          $ref: '#/components/responses/VerifyMandate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/FundsAvailableCheck/{fundsavailablecheckid}/Request':
    put:
      tags:
        - BQ - FundsAvailableCheck
      summary: RqBQ Request manual intervention or a decision with respect to Funds Available Check
      description: RqBQ Request manual intervention or a decision with respect to Funds Available Check
      operationId: RequestFundsAvailableCheck
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/fundsavailablecheckid'
      requestBody:
        $ref: '#/components/requestBodies/FundsAvailableCheck'
      responses:
        '200':
          $ref: '#/components/responses/FundsAvailableCheck'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/DirectDebit/{directdebitid}/BatchDebit/{batchdebitid}/Execute':
    put:
      tags:
        - BQ - BatchDebit
      summary: Execute Batch Debit
      description: Execute Batch Debit
      operationId: ExecuteBatchDebit
      parameters:
        - $ref: '#/components/parameters/directdebitid'
        - $ref: '#/components/parameters/batchdebitid'
      requestBody:
        $ref: '#/components/requestBodies/BatchDebit'
      responses:
        '200':
          $ref: '#/components/responses/BatchDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The particular date and time point in the progression of time
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Entity that assigns and manages the identification.
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: The identifier of Condition
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: The status of Direct Debit Arrangement Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()
    condition:
      type: object
      properties:
        ConditionIdentification:
          $ref: '#/components/schemas/identifier'
        ConditionName:
          $ref: '#/components/schemas/name'
        ConditionValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        ConditionDateAndTime:
          $ref: '#/components/schemas/datetime'
        ConditionStatus:
          $ref: '#/components/schemas/status'
      description: The required status/situation prior to the implementation of the feature
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "Timetable to fulfill Direct Debit Arrangement ||\r\n|"
    businessservicetypevalues:
      type: object
      properties:
        Businessservicetypevalues:
          type: string
          description: ''
          format: enumeration
      description: ''
    businessservice:
      type: object
      properties:
        BusinessServiceType:
          $ref: '#/components/schemas/businessservicetypevalues'
      description: The Payment Tracking specific Business Service
    PaymentTracking:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitFacilityReference:
          $ref: '#/components/schemas/identifier'
        PaymentTrackingReference:
          $ref: '#/components/schemas/identifier'
        PaymentTrackingType:
          $ref: '#/components/schemas/text'
      description: 'Business Information for the set-up and execution of different types of payment from the facility, including regular payments, standing orders, direct debits and bill pay instructions.'
    PaymentInitiation:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitFacilityReference:
          $ref: '#/components/schemas/identifier'
        PaymentInitiationReference:
          $ref: '#/components/schemas/identifier'
        PaymentInitiationType:
          $ref: '#/components/schemas/text'
      description: 'Business Information for the set-up and execution of different types of payment from the facility, including regular payments, standing orders, direct debits and bill pay instructions.'
    VerifyMandate:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitFacilityReference:
          $ref: '#/components/schemas/identifier'
        VerifyMandateReference:
          $ref: '#/components/schemas/identifier'
        VerifyMandateType:
          $ref: '#/components/schemas/text'
      description: 'Business Information for the set-up and execution of different types of payment from the facility, including regular payments, standing orders, direct debits and bill pay instructions.'
    FundsAvailableCheck:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitFacilityReference:
          $ref: '#/components/schemas/identifier'
        FundsAvailableCheckReference:
          $ref: '#/components/schemas/identifier'
        FundsAvailableCheckType:
          $ref: '#/components/schemas/text'
      description: 'Business Information for the set-up and execution of different types of payment from the facility, including regular payments, standing orders, direct debits and bill pay instructions.'
    Reporting:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitFacilityReference:
          $ref: '#/components/schemas/identifier'
        ReportingReference:
          $ref: '#/components/schemas/identifier'
        ReportingType:
          $ref: '#/components/schemas/text'
      description: 'Business Information for the set-up and execution of different types of payment from the facility, including regular payments, standing orders, direct debits and bill pay instructions.'
    BatchDebit:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitFacilityReference:
          $ref: '#/components/schemas/identifier'
        BatchDebitReference:
          $ref: '#/components/schemas/identifier'
        BatchDebitType:
          $ref: '#/components/schemas/text'
      description: 'Business Information for the set-up and execution of different types of payment from the facility, including regular payments, standing orders, direct debits and bill pay instructions.'
    financialfacility:
      type: object
      properties:
        FinancialFacility:
          type: string
          description: "A production or operational capacity to perform a business function for delivering a banking product or service\n\nA functional classification of banking product that provides ongoing capacity to deliver financial services (e.g. loan service, payment service)\n\n\n"
          format: class
      description: ''
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: ''
    DirectDebitOutcome:
      type: object
      properties:
        DirectDebitFinancialFacility:
          $ref: '#/components/schemas/financialfacility'
        DirectDebitWorkProduct:
          $ref: '#/components/schemas/workproduct'
      description: 'Business Information for the set-up and execution of different types of payment from the facility, including regular payments, standing orders, direct debits and bill pay instructions.'
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: The curreny which is arranged in Direct Debit Arrangement CurrencyCode|CurrencyCode (https://www.iso20022.org/standardsrepository/type/CurrencyCode)|Standard|ISO20022 BM ()
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: Fixed amount that the debtor has agreed will be collected from their account. (ISO20022)
    frequencytypevalues:
      enum:
        - Annual
        - Monthly
        - Quarterly
        - Semiannual
        - Weekly
        - Daily
        - Adhoc
        - Intraday
        - Overnight
        - Tendays
        - Fortnightly
        - Triggeredbymovement
        - Never
        - Rate
        - Oncreditevent
        - Upfront
        - Onexpiry
        - Hourly
      type: string
      description: ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n* `Semiannual` - Event takes place every six months or two times a year.\r\n* `Weekly` - Event takes place once a week.\r\n* `Daily` - Event takes place every day.\r\n* `Adhoc` - Event takes place on request or as necessary.\r\n* `Intraday` - Event takes place several times a day.\r\n* `Overnight` - Event takes place overnight.\r\n* `Tendays` - Event takes place every ten business days.\r\n* `Fortnightly` - Event takes place every two weeks.\r\n* `Triggeredbymovement` - Event takes place at the end of the day if there was a movement on the account, otherwise nothing is sent that day.\r\n* `Never` - Event does never take place.\r\n* `Rate` - Event takes place based on a change of a rate.\r\n* `Oncreditevent` - Event occurs due to a credit event occurring for an issuer.\r\n* `Upfront` - Event that takes place at the initiation of a trade or agreement.\r\n* `Onexpiry` - Event occurs on expiry of a financial contract.\r\n* `Hourly` - Event takes place every hours.\r\n"
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    directdebitfrequencyvalues:
      enum:
        - Annual
        - Monthly
        - Quarterly
        - Weekly
        - Daily
        - Adhoc
        - Fortnightly
        - Hourly
        - Half-Yearly
      type: string
      description: ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n* `Weekly` - Event takes place once a week.\r\n* `Daily` - Event takes place every day.\r\n* `Adhoc` - Event takes place on request or as necessary.\r\n* `Fortnightly` - Event takes place every two weeks.\r\n* `Hourly` - Event takes place every hours.\r\n* `Half-Yearly` - \r\n"
    yesnoindicator:
      type: object
      properties:
        Yesnoindicator:
          type: string
          description: "Indicates a \"Yes\" or \"No\" type of answer for an element. (ISO20022)\ntrue: Yes\nfalse: No"
          format: datatype
      description: Indicates wether a pre-notification must be sent by the creditor to the debtor before a direct debit occurs (ISO20022)
    directdebitmandatearrangement:
      type: object
      properties:
        FinalCollectionDate:
          $ref: '#/components/schemas/datetime'
        FirstCollectionDate:
          $ref: '#/components/schemas/datetime'
        CollectionAmount:
          $ref: '#/components/schemas/amount'
        MaximumAmount:
          $ref: '#/components/schemas/amount'
        PointIntime:
          $ref: '#/components/schemas/frequencytypevalues'
        ArrangementType:
          $ref: '#/components/schemas/arrangementtypevalues'
        PrenotificationDate:
          $ref: '#/components/schemas/datetime'
        MandateFrequency:
          $ref: '#/components/schemas/directdebitfrequencyvalues'
        PrenotificationIndicator:
          $ref: '#/components/schemas/yesnoindicator'
        PrenotificationThreshold:
          type: string
          description: Specifies the number of days before the direct debit for notifying the debtor (ISO20022)
          format: number
      description: Reference to Direct Debit Arrangement DirectDebitMandate|DirectDebitMandate (https://www.iso20022.org/standardsrepository/type/DirectDebitMandate)|Standard|ISO20022 BM ()
    featuretypevalues:
      enum:
        - FeeFeature
        - InterestFeature
        - WithdrawalFeature
        - DepositFeature
        - SweepFeature
        - LienFeature
        - PaymentFeature
        - RepaymentFeature
        - LimitFeature
        - OverdraftFeature
        - StatementFeature
        - CurrencyExchangeFeature
        - PriceFeature
      type: string
      description: ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This feature calculates and tracks interest earnings or charges on accounts, loans, or investments over time.\r\n* `WithdrawalFeature` - The withdraw feature typically refers to an option or functionality that allows users to retrieve or remove something from a system or platform.\r\n* `DepositFeature` - This refers to a functionality that allows users to add funds to an account or system, often by transferring money from another source.\r\n* `SweepFeature` - \r\n* `LienFeature` - \r\n* `PaymentFeature` - This refers to the functionality that facilitates or tracks the transfer of funds for a purchase or settlement of dues.\r\n* `RepaymentFeature` - This feature facilitates or manages the process of paying back borrowed funds, such as loans, credit card balances, or advances.\r\n* `LimitFeature` - This feature sets, monitors, or enforces restrictions on the maximum amount that can be accessed, spent, or transacted within a system.\r\n* `OverdraftFeature` - This functionality allows users to withdraw more money than what is available in their account balance, often up to a predefined limit.\r\n* `StatementFeature` - The statement feature refers to a functionality in banking, finance, or digital platforms that provides users with a detailed record of their transactions or activities over a specific period.\r\n* `CurrencyExchangeFeature` - This feature enables users to convert funds from one currency to another at prevailing exchange rates, often within financial or payment platforms.\r\n* `PriceFeature` - This feature involves displaying or managing the price of goods, services, or financial instruments within a platform.\r\n"
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/featuretypevalues'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: "A selected optional business service as subject matter of Direct Debit Arrangement ||\r\n|"
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: "A Classification that distinguishes between the regularity domains of Direct Debit Arrangement ||\r\n|"
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: Reference to the regulation which is defined in Direct Debit Arrangement GovernanceRules|GovernanceRules (https://www.iso20022.org/standardsrepository/type/GovernanceRules)|Standard|ISO20022 BM ()
    jurisdiction:
      type: object
      properties:
        Jurisdiction:
          type: string
          description: Jurisdiction that will be assigned in case of legal dispute.
          format: class
      description: Reference to the jurisdiction that is assigned to Direct Debit Arrangement in case of legal dispute. Jurisdiction|Jurisdiction (https://www.iso20022.org/standardsrepository/type/Jurisdiction)|Standard|ISO20022 BM ()
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: 'The financial accounting unit into which the financial events, with regard to the origination and fulfillment of the agreement in the context of Direct Debit Arrangement, are entered. Location/Address|Location/Address (https://www.iso20022.org/standardsrepository/type/Location)|Standard|ISO20022 BM ()'
    accounttypevalues:
      enum:
        - DebitAccount
        - CreditAccount
        - VostroAcount
        - NostroAccount
        - PaymentAccount
        - SettlementAccount
        - SavingAccount
        - CurrentAccount
        - CashAccount
        - LoanAccount
        - IndividualAccount
        - JointAccount
        - LiquidationAccount
        - ProvisionAccount
        - PartnershipAccount
        - InvestmentAccount
      type: string
      description: The type of account which is linked to Direct Debit Arrangement OBExternalAccountSubType1Code| ()|Standard|UK Open Banking ()
    accountstatustypevalues:
      enum:
        - Enabled
        - Disabled
        - Deleted
        - Proforma
        - Pending
      type: string
      description: ">\r\n* `Enabled` - Account can be used for its intended purpose.\r\n* `Disabled` - Account cannot be used for its intended purpose, either temporarily or permanently.\r\n* `Deleted` - Account cannot be used any longer.\r\n* `Proforma` - Account is temporary and can be partially used for its intended purpose. The account will be fully available for use when the account servicer has received all relevant documents.\r\n* `Pending` - Account change is pending approval.\r\n"
    accountstatus:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/status'
        AccountStatusType:
          $ref: '#/components/schemas/accountstatustypevalues'
      description: "A characteristic of account which refers to the LifecycleStatus of account like opened, closed, blocked, etc.\n\nSpecifies the current state of an account. (ISO20022)"
    accountidentificationtypevalues:
      enum:
        - BBAN
        - IBAN
        - UPIC
        - AccountNumber
        - PAN
        - Paym
        - Wallet
        - SortCodeAndAccountNumber
      type: string
      description: ">\r\n* `BBAN` - Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniquely identify the account of a customer. (ISO20022)\n\n.\r\n* `IBAN` - International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 \"Banking and related financial services - International Bank Account Number (IBAN)\" version 1997-10-01, or later revisions. (ISO20022)\n\nAn identifier used internationally by financial institutions to uniquely identify the account of a customer at a financial institution, as described in the latest edition of the international standard ISO 13616. \"Banking and related financial services - International Bank Account Number (IBAN)\". (OBExternalAccountIdentification4Code)\r\n* `UPIC` - Universal Payment Identification Code (UPIC) - identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes. (ISO20022)\r\n* `AccountNumber` - String of characters (mainly numbers) used to identify an account.(ISO20022)\n\r\n* `PAN` - Primary Account Number - identifier scheme used to identify a card account. (OBExternalAccountIdentification4Code)\r\n* `Paym` - Paym Scheme to make payments via mobile (OBExternalAccountIdentification4Code)\r\n* `Wallet` - A primary and unique account identifier used to identify a wallet.\nAn ASPSP must document on their developer portal, the payment methods that supports this account identifier.(OBExternalAccountIdentification4Code)\r\n* `SortCodeAndAccountNumber` - Sort Code and Account Number - identifier scheme used in the UK by financial institutions to identify the account of a customer. The identifier is the concatenation of the 6 digit UK sort code and 8 digit account number. (UK Open Banking)\r\n"
    accountidentification:
      type: object
      properties:
        AccountIdentificationType:
          $ref: '#/components/schemas/accountidentificationtypevalues'
        AccountIdentification:
          $ref: '#/components/schemas/identifier'
      description: The identifier of account like Account Number.
    accountdatetimetypevalues:
      enum:
        - OpeningDate
        - ClosingDate
        - BlockingDate
        - MaturityDate
        - LiveDate
        - RenewalDate
      type: string
      description: ">\r\n* `OpeningDate` - Date on which the account and related basic services are effectively operational for the account owner. (ISO20022)\r\n* `ClosingDate` - Date on which the account and related services cease effectively to be operational for the account owner. (ISO20022)\r\n* `BlockingDate` - \r\n* `MaturityDate` - Maturity date for the account.\r\n* `LiveDate` - \r\n* `RenewalDate` - \r\n"
    accountdatetime:
      type: object
      properties:
        AccountDateType:
          $ref: '#/components/schemas/accountdatetimetypevalues'
        AccountDate:
          $ref: '#/components/schemas/datetime'
      description: 'A characteristic of account which refers to LifecycleDate of account (e.g., ClosingDate, OpeningDate, LiveDate, etc.) '
    balancetypevalues:
      enum:
        - OpeningBalance
        - ClosingBalance
        - CurrentBalance
        - AvailableBalance
        - LedgerBalance
        - ReserveBalance
        - FreeBalance
        - PrincipalBalance
        - ClosingAvailable
        - ClosingBooked
        - ForwardAvailable
        - Information
        - InterimAvailable
        - InterimBooked
        - OpeningAvailable
        - OpeningBooked
        - PreviouslyClosedBooked
        - Expected
      type: string
      description: ">\r\n* `OpeningBalance` - Book balance of the account at the beginning of the account servicer's business day. It always equals the closing book balance from the previous business day. Note: the available balance at the beginning of the account servicer's business day may be different from the closing book balance from the previous business day. (ISO20022)\r\n* `ClosingBalance` - Balance of the account at the end of the account servicer's business day. It is the sum of the opening balance at the beginning of the day and all entries booked to the account during the account servicer's business day. (ISO20022)\r\n* `CurrentBalance` - Balance of the account at a precise moment in time. (ISO20022)\r\n* `AvailableBalance` - Balance of money or securities that is at the disposal of the account owner on the date specified. (ISO20022)\r\n* `LedgerBalance` - Ledger balance refers to posted transactions (e.g. limit authorisation amount - posted transactions). (ISO20022)\r\n* `ReserveBalance` - \r\n* `FreeBalance` - \r\n* `PrincipalBalance` - \r\n* `ClosingAvailable` - Closing balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `ClosingBooked` - Balance of the account at the end of the pre-agreed account reporting period. It is the sum of the opening booked balance at the beginning of the period and all entries booked to the account during the pre-agreed account reporting period.\r\n* `ForwardAvailable` - Forward available balance of money that is at the disposal of the account owner on the date specified.\r\n* `Information` - Balance for informational purposes.\r\n* `InterimAvailable` - Available balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `InterimBooked` - Balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n* `OpeningAvailable` - Opening balance of amount of money that is at the disposal of the account owner on the date specified.\r\n* `OpeningBooked` - Book balance of the account at the beginning of the account reporting period. It always equals the closing book balance from the previous report.\r\n* `PreviouslyClosedBooked` - Balance of the account at the previously closed account reporting period. The opening booked balance for the new period has to be equal to this balance.\nUsage: the previously booked closing balance should equal (inclusive date) the booked closing balance of the date it references and equal the actual booked opening balance of the current date.\r\n* `Expected` - Balance, composed of booked entries and pending items known at the time of calculation, which projects the end of day balance if everything is booked on the account and no other entry is posted.\r\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    balancecounterpartytypevalues:
      enum:
        - Bilateral
        - Multilateral
      type: string
      description: ">\r\n* `Bilateral` - Balance calculated regarding one member in the system. (ISO20022)\r\n* `Multilateral` - Balance calculated regarding all members in the system. (ISO20022)\r\n"
    balancesubtypevalues:
      enum:
        - Adjustment
        - Basecurrency
        - Blocked
        - Blockedfunds
        - Daylightoverdraft
        - Eligibleassets
        - Firmcollateralization
        - Amountsthathavebeenusedtoserveasfirmcollateral
        - Securitiesforecast
        - Netfunding
        - Intermediate
        - Localcurrency
        - Limitrelated
        - Reservedliquidity
        - Securitiespending
        - Payinpayout
        - Progressiveaverage
        - Reserve
        - Selfcollateralization
        - Amountsthathavebeenusedtoserveasselfcollateral
        - Threshold
      type: string
      description: ">\r\n* `Adjustment` - Balance to be held in the settlement account in order to comply with the average reserve due, in the event that the bank's balance is equal to the reserve due during the remaining days of the maintenance period.\r\n* `Basecurrency` - Balance representing the amount in the domestic or base accounting currency.\r\n* `Blocked` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes. In some countries, a blocked balance is known as a 'reserve' balance.\r\n* `Blockedfunds` - Balance representing funds that cannot be touched by the account owner.\r\n* `Daylightoverdraft` - Balance representing the intra day overdraft granted by the Central Bank to financial institutions participating in a RTGS system. This balance may vary over time and shall be offset at the end of the day.\r\n* `Eligibleassets` - Balance representing the potential loan a Central Bank would make in cash if the collateral is pledged, eg, securities available and eligible as collateral with the Central Bank.\r\n* `Firmcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral.\r\n* `Amountsthathavebeenusedtoserveasfirmcollateral` - Balance representing the cash equivalent resulting from evaluation of existing holdings at CSD that are qualified to serve as collateral and have been used as collateral.\r\n* `Securitiesforecast` - Balance representing the total of all balance types representing the forecast of transactions to settle, blocked items, custody transactions and corporate actions cash disbursements.\r\n* `Netfunding` - Balance representing the net amount to be funded resulting from the difference between the total of all transactions with a cash impact and the existing cash coverage.\r\n* `Intermediate` - Balance representing an intermediate amount such as the opening or closing balance incrementally carried forward from one page to the next in a multi-page statement or report.\r\n* `Localcurrency` - Balance representing the amount in the local market currency for which the asset is held.\r\n* `Limitrelated` - Balance of a specific limit value, eg, a bilateral balance is calculated in relation to a given bilateral limit.\r\n* `Reservedliquidity` - Balance representing the amount that a financial institution has set aside for a specific reason and which is therefore not available. In the context of CSDs, reservation of liquidity made to meet settlement obligations.\r\n* `Securitiespending` - Balance of securities pending delivery, such as orders to sell securities have been executed but settlement of the open transactions has not been confirmed.\r\n* `Payinpayout` - Balance representing the fictive amount of automated direct debits or payment based on standing arrangements between the CSD and the user. Usage: Pay-Ins and Pay-Outs can be different based on individual payment instructions or available funds.\r\n* `Progressiveaverage` - Average of the daily balances on the account used to fulfil the reserve requirements calculated from the beginning of the maintenance period.\r\n* `Reserve` - Balance representing the regulatory reserve that a financial institution must have with the account servicing institution, eg, the minimum credit balance a financial institution is to keep with its Central Bank for mandatory reserve purposes.\r\n* `Selfcollateralization` - Balance representing the forecast of the cash-equivalent resulting from evaluation of the net incoming balance of securities qualified to serve as collateral for which settlement instructions are held at.\r\n* `Amountsthathavebeenusedtoserveasselfcollateral` - Balance representing the cash-equivalent resulting from evaluation of incoming securities, qualified to serve as collateral and actually used as collateral, which have been settled during the settlement process.\r\n* `Threshold` - Balance representing the amount that will be destined for investment. Difference between available balance and threshold for investment limit.\r\n"
    accountbalance:
      type: object
      properties:
        BalanceAmount:
          $ref: '#/components/schemas/amount'
        BalanceType:
          $ref: '#/components/schemas/balancetypevalues'
        BalanceValueDate:
          $ref: '#/components/schemas/datetime'
        BalanceIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        BalanceCounterpartyType:
          $ref: '#/components/schemas/balancecounterpartytypevalues'
        BalanceCalculationDate:
          $ref: '#/components/schemas/datetime'
        BalanceSubType:
          $ref: '#/components/schemas/balancesubtypevalues'
      description: "The state of the obligations managed on the account, the result of all entries on the account.\n\nNumerical representation of the net increases and decreases in an account at a specific point in time. (ISO20022)\n\nBanking: Amount available in an account for withdrawal or use.\nRead more: http://www.businessdictionary.com/definition/balance.html\n\nBookkeeping: Difference between the debit and credit sides of an account.\nRead more: http://www.businessdictionary.com/definition/balance.html"
    currencytypevalues:
      enum:
        - BaseCurrency
        - ReportingCurrency
        - SecondaryCurrency
        - TransferCurrency
      type: string
      description: ">\r\n* `BaseCurrency` - Base currency of the account. (ISO20022)\n\r\n* `ReportingCurrency` - Currency used to calculate and report the balance and related entries of an account. (ISO20022)\n\r\n* `SecondaryCurrency` - \r\n* `TransferCurrency` - Currency of the amount to be transferred which may be different from the currency of the debtor's account. (ISO20022)\r\n"
    accountcurrency:
      type: object
      properties:
        AccountCurrencyType:
          $ref: '#/components/schemas/currencytypevalues'
        AccountCurrency:
          $ref: '#/components/schemas/currencycode'
      description: ''
    account:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/accountstatus'
        AccountIdentification:
          $ref: '#/components/schemas/accountidentification'
        AccountDate:
          $ref: '#/components/schemas/accountdatetime'
        AccountType:
          $ref: '#/components/schemas/accounttypevalues'
        AccountPurpose:
          $ref: '#/components/schemas/text'
        AccountBalance:
          $ref: '#/components/schemas/accountbalance'
        AccountCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountDescription:
          $ref: '#/components/schemas/text'
        AccountName:
          $ref: '#/components/schemas/name'
      description: Reference to the account which is linked to Direct Debit Arrangement Account|Account  (https://www.iso20022.org/standardsrepository/type/Account)|Standard|ISO20022 BM ()
    DirectDebitFacility:
      type: object
      properties:
        DirectDebitFacilityParameterType:
          $ref: '#/components/schemas/directdebitmandatearrangement'
        DirectDebitFacilitySelectedOption:
          $ref: '#/components/schemas/feature'
        DirectDebitFacilityType:
          $ref: '#/components/schemas/directdebitmandatearrangement'
        DirectDebitFacilityReference:
          $ref: '#/components/schemas/directdebitmandatearrangement'
        DirectDebitFacilitySchedule:
          $ref: '#/components/schemas/schedule'
        DirectDebitFacilityStatus:
          $ref: '#/components/schemas/status'
        DirectDebitFacilityCurrency:
          $ref: '#/components/schemas/currencycode'
        DirectDebitFacilityRegulationReference:
          $ref: '#/components/schemas/ruleset'
        DirectDebitFacilityRegulationType:
          $ref: '#/components/schemas/rulesettypevalues'
        DirectDebitFacilityJurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        DirectDebitFacilityBookingLocation:
          $ref: '#/components/schemas/address'
        DirectDebitFacilityAccountType:
          $ref: '#/components/schemas/accounttypevalues'
        DirectDebitFacilityAccountReference:
          $ref: '#/components/schemas/account'
      description: "Fulfill any scheduled and ad-hoc obligations under a service arrangement, most typically for a financial product or facility  within Direct Debit. \nExample: Perform the scheduled (e.g. statements, standing orders) and ad-hoc/requested (e.g. balance inquiries, fund transfers) fulfillment tasks for a customer current account facility."
    RetrieveDirectDebitFacilityResponse:
      type: object
      properties:
        DirectDebitFacility:
          type: object
          properties:
            DirectDebitFacilityParameterType:
              $ref: '#/components/schemas/directdebitmandatearrangement'
            DirectDebitFacilitySelectedOption:
              $ref: '#/components/schemas/feature'
            DirectDebitFacilityType:
              $ref: '#/components/schemas/directdebitmandatearrangement'
            DirectDebitFacilityReference:
              $ref: '#/components/schemas/directdebitmandatearrangement'
            DirectDebitFacilitySchedule:
              $ref: '#/components/schemas/schedule'
            DirectDebitFacilityStatus:
              $ref: '#/components/schemas/status'
            DirectDebitFacilityCurrency:
              $ref: '#/components/schemas/currencycode'
            DirectDebitFacilityRegulationReference:
              $ref: '#/components/schemas/ruleset'
            DirectDebitFacilityRegulationType:
              $ref: '#/components/schemas/rulesettypevalues'
            DirectDebitFacilityJurisdiction:
              $ref: '#/components/schemas/jurisdiction'
            DirectDebitFacilityBookingLocation:
              $ref: '#/components/schemas/address'
            DirectDebitFacilityAccountType:
              $ref: '#/components/schemas/accounttypevalues'
            DirectDebitFacilityAccountReference:
              $ref: '#/components/schemas/account'
      description: 'Output: ReCR Retrieve details about any aspect of Direct Debit Facility'
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    DirectDebitFacility:
      description: DirectDebitFacility
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DirectDebitFacility'
    RetrieveDirectDebitFacilityResponse:
      description: RetrieveDirectDebitFacilityResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RetrieveDirectDebitFacilityResponse'
    PaymentTracking:
      description: PaymentTracking
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentTracking'
    FundsAvailableCheck:
      description: FundsAvailableCheck
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FundsAvailableCheck'
    PaymentInitiation:
      description: PaymentInitiation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentInitiation'
    VerifyMandate:
      description: VerifyMandate
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerifyMandate'
    Reporting:
      description: Reporting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reporting'
    BatchDebit:
      description: BatchDebit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BatchDebit'
  parameters:
    directdebitid:
      name: directdebitid
      in: path
      required: true
      style: simple
      schema:
        type: string
    paymenttrackingid:
      name: paymenttrackingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    fundsavailablecheckid:
      name: fundsavailablecheckid
      in: path
      required: true
      style: simple
      schema:
        type: string
    paymentinitiationid:
      name: paymentinitiationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    verifymandateid:
      name: verifymandateid
      in: path
      required: true
      style: simple
      schema:
        type: string
    reportingid:
      name: reportingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    batchdebitid:
      name: batchdebitid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    DirectDebitFacility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DirectDebitFacility'
      required: true
    PaymentTracking:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentTracking'
      required: true
    FundsAvailableCheck:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FundsAvailableCheck'
      required: true
    PaymentInitiation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentInitiation'
      required: true
    VerifyMandate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerifyMandate'
      required: true
    Reporting:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reporting'
      required: true
    BatchDebit:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BatchDebit'
      required: true