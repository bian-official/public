openapi: 3.0.1
info:
  title: Card Terminal Operation
  description: 'This service domain handle POS operations including processing, capture and tracking of the transactions originating at the Point of Sale devices.'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CardTerminalOperation/13.0.0
paths:
  /CardTerminalOperation/Initiate:
    post:
      tags:
        - CR - CardPOSNetworkOperatingSession
      summary: InCR Initiate a card POS network operation session
      description: InCR Initiate a card POS network operation session
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CardPOSNetworkOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CardPOSNetworkOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Update':
    put:
      tags:
        - CR - CardPOSNetworkOperatingSession
      summary: UpCR Update details of a card POS session
      description: UpCR Update details of a card POS session
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
      requestBody:
        $ref: '#/components/requestBodies/CardPOSNetworkOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CardPOSNetworkOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Control':
    put:
      tags:
        - CR - CardPOSNetworkOperatingSession
      summary: CoCR Control the processing of a card POS session (e.g. suspend)
      description: CoCR Control the processing of a card POS session (e.g. suspend)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
      requestBody:
        $ref: '#/components/requestBodies/CardPOSNetworkOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CardPOSNetworkOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Retrieve':
    get:
      tags:
        - CR - CardPOSNetworkOperatingSession
      summary: ReCR Retrieve details about the card POS session
      description: ReCR Retrieve details about the card POS session
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
      responses:
        '200':
          $ref: '#/components/responses/CardPOSNetworkOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Capture/Initiate':
    post:
      tags:
        - BQ - Capture
      summary: InBQ Initiate transaction capture at the POS
      description: InBQ Initiate transaction capture at the POS
      operationId: InitiateCapture
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
      requestBody:
        $ref: '#/components/requestBodies/Capture'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Capture/{captureid}/Update':
    put:
      tags:
        - BQ - Capture
      summary: UpBQ Update details of the card capture transaction
      description: UpBQ Update details of the card capture transaction
      operationId: UpdateCapture
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/captureid'
      requestBody:
        $ref: '#/components/requestBodies/Capture'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Capture/{captureid}/Request':
    put:
      tags:
        - BQ - Capture
      summary: RqBQ Request manual intervention with a capture transaction
      description: RqBQ Request manual intervention with a capture transaction
      operationId: RequestCapture
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/captureid'
      requestBody:
        $ref: '#/components/requestBodies/Capture'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Capture/{captureid}/Retrieve':
    get:
      tags:
        - BQ - Capture
      summary: ReBQ Retrieve details about a card capture transaction
      description: ReBQ Retrieve details about a card capture transaction
      operationId: RetrieveCapture
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/captureid'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Authorization/Initiate':
    post:
      tags:
        - BQ - Authorization
      summary: InBQ Initiate authorization for a card transaction
      description: InBQ Initiate authorization for a card transaction
      operationId: InitiateAuthorization
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
      requestBody:
        $ref: '#/components/requestBodies/Authorization'
      responses:
        '200':
          $ref: '#/components/responses/Authorization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Authorization/{authorizationid}/Request':
    put:
      tags:
        - BQ - Authorization
      summary: RqBQ Request manual intervention for a card authorization (e.g. engage specialist)
      description: RqBQ Request manual intervention for a card authorization (e.g. engage specialist)
      operationId: RequestAuthorization
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/authorizationid'
      requestBody:
        $ref: '#/components/requestBodies/Authorization'
      responses:
        '200':
          $ref: '#/components/responses/Authorization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Authorization/{authorizationid}/Retrieve':
    get:
      tags:
        - BQ - Authorization
      summary: ReBQ Retrieve details about a card authorization transaction
      description: ReBQ Retrieve details about a card authorization transaction
      operationId: RetrieveAuthorization
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/authorizationid'
      responses:
        '200':
          $ref: '#/components/responses/Authorization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Batch/Initiate':
    post:
      tags:
        - BQ - Batch
      summary: InBQ Initiate a batch transaction POS capture
      description: InBQ Initiate a batch transaction POS capture
      operationId: InitiateBatch
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
      requestBody:
        $ref: '#/components/requestBodies/Batch'
      responses:
        '200':
          $ref: '#/components/responses/Batch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Batch/{batchid}/Update':
    put:
      tags:
        - BQ - Batch
      summary: UpBQ Update details of a transaction batch
      description: UpBQ Update details of a transaction batch
      operationId: UpdateBatch
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/batchid'
      requestBody:
        $ref: '#/components/requestBodies/Batch'
      responses:
        '200':
          $ref: '#/components/responses/Batch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Batch/{batchid}/Request':
    put:
      tags:
        - BQ - Batch
      summary: RqBQ Request manual intervention for a batch (e.g. adjust scheduling)
      description: RqBQ Request manual intervention for a batch (e.g. adjust scheduling)
      operationId: RequestBatch
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/batchid'
      requestBody:
        $ref: '#/components/requestBodies/Batch'
      responses:
        '200':
          $ref: '#/components/responses/Batch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardTerminalOperation/{cardterminaloperationid}/Batch/{batchid}/Retrieve':
    get:
      tags:
        - BQ - Batch
      summary: ReBQ Retrieve details about a card capture batch
      description: ReBQ Retrieve details about a card capture batch
      operationId: RetrieveBatch
      parameters:
        - $ref: '#/components/parameters/cardterminaloperationid'
        - $ref: '#/components/parameters/batchid'
      responses:
        '200':
          $ref: '#/components/responses/Batch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: The account number associated with the card transaction
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The particular date and time point in the progression of time
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: The identity of the account holder submitting the transaction
    issueddevicestatustypevalues:
      enum:
        - Issued
        - IssuedButNotActivated
        - Activated
        - Suspended
        - Retrieved
      type: string
      description: ">\r\n* `Issued` - \r\n* `IssuedButNotActivated` - \r\n* `Activated` - \r\n* `Suspended` - \r\n* `Retrieved` - \r\n"
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: "The life cycle stage of a device\n\ne.g. active, defect"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: Geographical location of the device.
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: Reference to the device that is issued
    branch:
      type: object
      properties:
        BranchIdentification:
          $ref: '#/components/schemas/identifier'
        BranchLegalEntityIdentification:
          $ref: '#/components/schemas/identifier'
        BranchAddress:
          $ref: '#/components/schemas/address'
        BranchName:
          $ref: '#/components/schemas/name'
      description: The name of the branch where the party will collect the device
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: The product or service to which the Issued Device will be attached
    devicecustomizationtypevalues:
      enum:
        - CardDesign
      type: string
      description: ">\r\n* `CardDesign` - \r\n"
    issueddevice:
      type: object
      properties:
        IssuedDeviceStatus:
          $ref: '#/components/schemas/issueddevicestatustypevalues'
        IssuedDevicePartyReference:
          $ref: '#/components/schemas/party'
        IssuedDeviceConfiguration:
          $ref: '#/components/schemas/text'
        IssuedDeviceReference:
          $ref: '#/components/schemas/device'
        IssuedDeviceValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        IssuedDeviceDeliveryMethod:
          $ref: '#/components/schemas/text'
        DeviceIssueDate:
          $ref: '#/components/schemas/datetime'
        IssuedDeviceCollectLocation:
          $ref: '#/components/schemas/branch'
        IssuedDeviceProductReference:
          $ref: '#/components/schemas/bankingproduct'
        IssedDeviceCustomizationType:
          $ref: '#/components/schemas/devicecustomizationtypevalues'
      description: Reference to the issued device submitted to authorize the transaction (e.g. card number)
    cardnetwork:
      type: object
      properties:
        CardNetwork:
          type: string
          description: "Network for handling the card based transaction (e.g. Visa, MC, AMEX, Diners, etc.)\n\nA card network are networks of issuing and acquiring banks through which payment cards of some certain brand are processed. two types of card networks can be pointed out, namely, credit card associations (Visa, MasterCard, Discover, Amex, etc.) and PINless debit card networks (NYCE, PULSE, Maestro, Interlink, Cirrus, etc.).\n\nCard networks are financial services companies that enables, processes and settles payments between card issuing banks and merchant banks worldwide. Examples are Visa, MasterCard, Discover, RuPay etc.\n\nA card network is a system of connecting merchants and card issuers.  A middle person that collects funds from card issuer and pays it to the merchant.  Visa and MasterCard are examples of card networks."
          format: class
      description: Reference to the network the card transaction is handled by as recorded with the transaction
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: ">\r\n* `FinancialTransaction` - \r\n* `BusinessTransaction` - \r\n* `BankingTransaction` - \r\n* `AccountingTransaction` - \r\n* `BookingTransaction` - \r\n* `AllocationTransaction` - \r\n* `DeliveryTransaction` - \r\n* `ProductionTransaction` - \r\n"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: The currency that the transaction is made in
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: The amount corresponding to the type
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
        - ChequeRelatedFee
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n* `ChequeRelatedFee` - \r\n"
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: 'Rate used to calculate the amount of the adjustment, allowance, charge or fee. (ISO20022)'
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goaltypevalues:
      enum:
        - Short-TermGoal
        - Long-TermGoal
        - BusinessGoal
        - PerformanceGoal
        - FinancialGoal
        - OutcomeGoal
        - SMARTGoal
      type: string
      description: ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
    goaldatetimetypevalues:
      enum:
        - SettingDate
        - PlanningDate
        - StartDate
        - ReviewDate
        - CompletionDate
      type: string
      description: ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
    goaldatetime:
      type: object
      properties:
        GoalDateAndTime:
          $ref: '#/components/schemas/datetime'
        GoalDateAndTimeType:
          $ref: '#/components/schemas/goaldatetimetypevalues'
      description: 'The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date.'
    goalstatustypevalues:
      enum:
        - Setting
        - Planning
        - Execution
        - MonitoringAndEvaluation
        - CompletionOrAchievement
        - MaintenanceOrSustainment
        - ClosureOrRenewal
      type: string
      description: ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
    goalstatus:
      type: object
      properties:
        GoalStatus:
          $ref: '#/components/schemas/status'
        GoalStatusType:
          $ref: '#/components/schemas/goalstatustypevalues'
      description: 'The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal'
    goal:
      type: object
      properties:
        GoalType:
          $ref: '#/components/schemas/goaltypevalues'
        GoalDefinition:
          $ref: '#/components/schemas/text'
        GoalName:
          $ref: '#/components/schemas/name'
        GoalDateAndTime:
          $ref: '#/components/schemas/goaldatetime'
        GoalStatus:
          $ref: '#/components/schemas/goalstatus'
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
        - DevelopmentPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n* `DevelopmentPlan` - \r\n"
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: The applied currency conversion charge
    authorization:
      type: object
      properties:
        Authorization:
          type: string
          description: "An evaluation whether a party or system is allowed to do something.\n\nThe consent given by a participant (or a third party acting on behalf of that participant) in order to transfer funds or securities. (ECB)\n\nAuthorization is a mechanism by which a computer system determines whether to allow or deny specific action to a user. Authorization is often controlled by rather complex rules and algorithms, usually specified as part of an access control model. Authorization often follows (and required) authentication, however, authentication and authorization are two separate mechanisms. In rare cases, \"authorization\" is understood as a process of allowing access, granting permissions or giving approval. Such as \"authorization\" of a request to join a group. (ISO/IEC 24760-1:2019 - IT Security and Privacy)"
          format: class
      description: 'Details the reference, amount, timestamp of the transaction authorization'
    Capture:
      type: object
      properties:
        CardTransactionProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        CardHolderReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionIssuedDeviceReference:
          $ref: '#/components/schemas/issueddevice'
        CardTransactionNetworkReference:
          $ref: '#/components/schemas/cardnetwork'
        CardTransactionIssuingBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionMerchantAcquiringBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        CardTransactionCurrency:
          $ref: '#/components/schemas/currencycode'
        CardTransactionAmountType:
          $ref: '#/components/schemas/amounttypevalues'
        CardTransactionAmount:
          $ref: '#/components/schemas/amount'
        CardTransactionMerchantReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionLocationReference:
          $ref: '#/components/schemas/location'
        CardTransactionProductandServiceReference:
          $ref: '#/components/schemas/bankingproduct'
        CardTransactionDateandTime:
          $ref: '#/components/schemas/datetime'
        CardTransactionFXConversionCharge:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionInterchargeFee:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionAuthorizationRecord:
          $ref: '#/components/schemas/authorization'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    transactionbatch:
      type: object
      properties:
        BatchTransactionDateTime:
          type: string
          description: ''
          format: string
      description: Reference to the batch of transactions
    Batch:
      type: object
      properties:
        CardTransactionBatchReference:
          $ref: '#/components/schemas/transactionbatch'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    Authorization:
      type: object
      properties:
        AuthorizationTransactionDateandTime:
          $ref: '#/components/schemas/datetime'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "Defines the service availability through the session ||\r\n|"
    CardPOSNetworkOperatingSession:
      type: object
      properties:
        CardPOSTerminalOperatingSchedule:
          $ref: '#/components/schemas/schedule'
      description: 'Operate equipment and/or a largely automated facility within Card Terminal Operation. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CardPOSNetworkOperatingSession:
      description: CardPOSNetworkOperatingSession
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardPOSNetworkOperatingSession'
    Capture:
      description: Capture
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
    Authorization:
      description: Authorization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authorization'
    Batch:
      description: Batch
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Batch'
  parameters:
    cardterminaloperationid:
      name: cardterminaloperationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    captureid:
      name: captureid
      in: path
      required: true
      style: simple
      schema:
        type: string
    authorizationid:
      name: authorizationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    batchid:
      name: batchid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CardPOSNetworkOperatingSession:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardPOSNetworkOperatingSession'
      required: true
    Capture:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
      required: true
    Authorization:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authorization'
      required: true
    Batch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Batch'
      required: true