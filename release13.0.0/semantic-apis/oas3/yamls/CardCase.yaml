openapi: 3.0.1
info:
  title: Card Case
  description: 'This service domain handles the processing of a customer card case, typically a disputed charge'
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CardCase/13.0.0
paths:
  /CardCase/Initiate:
    post:
      tags:
        - CR - CardCaseProcedure
      summary: InCR Initiate a card case procedure
      description: InCR Initiate a card case procedure
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CardCaseProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardCaseProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Update':
    put:
      tags:
        - CR - CardCaseProcedure
      summary: UpCR Update details about a card case
      description: UpCR Update details about a card case
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
      requestBody:
        $ref: '#/components/requestBodies/CardCaseProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardCaseProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Control':
    put:
      tags:
        - CR - CardCaseProcedure
      summary: CoCR Control the processing of a card case (e.g. suspend)
      description: CoCR Control the processing of a card case (e.g. suspend)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
      requestBody:
        $ref: '#/components/requestBodies/CardCaseProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardCaseProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Exchange':
    put:
      tags:
        - CR - CardCaseProcedure
      summary: 'EcCR Accept, verify, reject etc. some aspect of a card case'
      description: 'EcCR Accept, verify, reject etc. some aspect of a card case'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
      requestBody:
        $ref: '#/components/requestBodies/CardCaseProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardCaseProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Execute':
    put:
      tags:
        - CR - CardCaseProcedure
      summary: ExCR Execute an automated task against a card case (e.g. upload data)
      description: ExCR Execute an automated task against a card case (e.g. upload data)
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
      requestBody:
        $ref: '#/components/requestBodies/CardCaseProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardCaseProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Request':
    put:
      tags:
        - CR - CardCaseProcedure
      summary: RqCR Request manual intervention in a case (e.g. engage a specialist)
      description: RqCR Request manual intervention in a case (e.g. engage a specialist)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
      requestBody:
        $ref: '#/components/requestBodies/CardCaseProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CardCaseProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Retrieve':
    get:
      tags:
        - CR - CardCaseProcedure
      summary: ReCR Retrieve details about a card case
      description: ReCR Retrieve details about a card case
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
      responses:
        '200':
          $ref: '#/components/responses/CardCaseProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Consolidation/{consolidationid}/Update':
    put:
      tags:
        - BQ - Consolidation
      summary: UpBQ Update details of the consolidation in a card case
      description: UpBQ Update details of the consolidation in a card case
      operationId: UpdateConsolidation
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/consolidationid'
      requestBody:
        $ref: '#/components/requestBodies/Consolidation'
      responses:
        '200':
          $ref: '#/components/responses/Consolidation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Consolidation/{consolidationid}/Retrieve':
    get:
      tags:
        - BQ - Consolidation
      summary: ReBQ Retrieve details about the consolidation analysis of a card case
      description: ReBQ Retrieve details about the consolidation analysis of a card case
      operationId: RetrieveConsolidation
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/consolidationid'
      responses:
        '200':
          $ref: '#/components/responses/Consolidation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Chargeback/{chargebackid}/Update':
    put:
      tags:
        - BQ - Chargeback
      summary: UpBQ Update details of the chargeback in a card case
      description: UpBQ Update details of the chargeback in a card case
      operationId: UpdateChargeback
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/chargebackid'
      requestBody:
        $ref: '#/components/requestBodies/Chargeback'
      responses:
        '200':
          $ref: '#/components/responses/Chargeback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Chargeback/{chargebackid}/Retrieve':
    get:
      tags:
        - BQ - Chargeback
      summary: ReBQ Retrieve details about the chargeback for a card case
      description: ReBQ Retrieve details about the chargeback for a card case
      operationId: RetrieveChargeback
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/chargebackid'
      responses:
        '200':
          $ref: '#/components/responses/Chargeback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Arbitration/{arbitrationid}/Update':
    put:
      tags:
        - BQ - Arbitration
      summary: UpBQ Update details of the arbitration request of a card case
      description: UpBQ Update details of the arbitration request of a card case
      operationId: UpdateArbitration
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/arbitrationid'
      requestBody:
        $ref: '#/components/requestBodies/Arbitration'
      responses:
        '200':
          $ref: '#/components/responses/Arbitration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Arbitration/{arbitrationid}/Exchange':
    put:
      tags:
        - BQ - Arbitration
      summary: 'EcBQ Accept, verify, reject etc. the arbitration result of a card case'
      description: 'EcBQ Accept, verify, reject etc. the arbitration result of a card case'
      operationId: ExchangeArbitration
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/arbitrationid'
      requestBody:
        $ref: '#/components/requestBodies/Arbitration'
      responses:
        '200':
          $ref: '#/components/responses/Arbitration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Arbitration/{arbitrationid}/Retrieve':
    get:
      tags:
        - BQ - Arbitration
      summary: ReBQ Retrieve details about the arbitration request for a card case
      description: ReBQ Retrieve details about the arbitration request for a card case
      operationId: RetrieveArbitration
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/arbitrationid'
      responses:
        '200':
          $ref: '#/components/responses/Arbitration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Resolution/{resolutionid}/Update':
    put:
      tags:
        - BQ - Resolution
      summary: UpBQ Update details of the resolution of a card case
      description: UpBQ Update details of the resolution of a card case
      operationId: UpdateResolution
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/resolutionid'
      requestBody:
        $ref: '#/components/requestBodies/Resolution'
      responses:
        '200':
          $ref: '#/components/responses/Resolution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Resolution/{resolutionid}/Exchange':
    put:
      tags:
        - BQ - Resolution
      summary: 'EcBQ Accept, verify, reject etc. resolution actions for a card case'
      description: 'EcBQ Accept, verify, reject etc. resolution actions for a card case'
      operationId: ExchangeResolution
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/resolutionid'
      requestBody:
        $ref: '#/components/requestBodies/Resolution'
      responses:
        '200':
          $ref: '#/components/responses/Resolution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CardCase/{cardcaseid}/Resolution/{resolutionid}/Retrieve':
    get:
      tags:
        - BQ - Resolution
      summary: ReBQ Retrieve details about the resolution actions for a card case
      description: ReBQ Retrieve details about the resolution actions for a card case
      operationId: RetrieveResolution
      parameters:
        - $ref: '#/components/parameters/cardcaseid'
        - $ref: '#/components/parameters/resolutionid'
      responses:
        '200':
          $ref: '#/components/responses/Resolution'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: The currency that the transaction is made in CurrencyCode|CurrencyCode (https://www.iso20022.org/standardsrepository/type/CurrencyCode)|Standard|ISO20022 BM ()
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "Decimal point position starts calulating from the right\n"
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: 'Type of amount (e.g. original amount, billing currency amount, conversion rate, FX Mark-up) TypeOfAmountCode|TypeOfAmountCode (https://www.iso20022.org/standardsrepository/type/TypeOfAmountCode)|Standard|ISO20022 BM ()'
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: The amount corresponding to the type CurrencyAndAmount|CurrencyAndAmount (https://www.iso20022.org/standardsrepository/type/CurrencyAndAmount)|Standard|ISO20022  ()
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: "Significant dates and times associated with the transaction ||\r\n|"
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Refers to the merchant initiating settlement ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The tracked status (e.g. under construction or repair, inhabited, vacant).'
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: Refers to the point of sale location Location|Location (https://www.iso20022.org/standardsrepository/type/Location)|Standard|ISO20022 BM  ()
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    transactionchanneltypevalues:
      enum:
        - Mailorder
        - Telephoneorder
        - Electroniccommerce
        - Televisionpayment
        - Officeorbranch
        - Homebanking
        - Financialadvisor
        - Mobilepayment
        - Securedelectroniccommerce
        - Mobilepos
      type: string
      description: ">\r\n* `Mailorder` - Mail order.\r\n* `Telephoneorder` - Telephone order.\r\n* `Electroniccommerce` - Electronic commerce.\r\n* `Televisionpayment` - Payment on television.\r\n* `Officeorbranch` - Office or branch.\r\n* `Homebanking` - Home banking.\r\n* `Financialadvisor` - Financial advisor.\r\n* `Mobilepayment` - Payment performed through a cardholder mobile device.\r\n* `Securedelectroniccommerce` - Electronic commerce with cardholder authentication.\r\n* `Mobilepos` - Payment performed through a merchant mobile device.\r\n"
    pointofservice:
      type: object
      properties:
        PointOfService:
          type: string
          description: "Point at which a service is offered and/or fulfilled. \n"
          format: class
      description: Describes the Point of Interaction through which the payment by card was initiated. (ISO20022)
    transactionenvironmenttypevalues:
      enum:
        - Merchant
        - Private
        - Public
        - Branch
        - Other
      type: string
      description: ">\r\n* `Merchant` - Merchant environment.\r\n* `Private` - Private environment.\r\n* `Public` - Public environment.\r\n* `Branch` - Bank environment.\r\n* `Other` - Other environments, for instance a mall or an airport.\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the merchant where the transaction took place. (ISO20022)
    cardnetwork:
      type: object
      properties:
        CardNetwork:
          type: string
          description: "Network for handling the card based transaction (e.g. Visa, MC, AMEX, Diners, etc.)\n\nA card network are networks of issuing and acquiring banks through which payment cards of some certain brand are processed. two types of card networks can be pointed out, namely, credit card associations (Visa, MasterCard, Discover, Amex, etc.) and PINless debit card networks (NYCE, PULSE, Maestro, Interlink, Cirrus, etc.).\n\nCard networks are financial services companies that enables, processes and settles payments between card issuing banks and merchant banks worldwide. Examples are Visa, MasterCard, Discover, RuPay etc.\n\nA card network is a system of connecting merchants and card issuers.  A middle person that collects funds from card issuer and pays it to the merchant.  Visa and MasterCard are examples of card networks."
          format: class
      description: "Reference to the network the card transaction is handled by as recorded with the transaction ||\r\n|"
    amountqualifiertypevalues:
      enum:
        - Cashback
        - Gratuity
        - Fees
        - Rebates
        - Valueaddedtax
        - Actual
        - Replacement
        - Maximum
        - Default
        - Estimated
        - Original
        - Surcharge
        - Servicefee
        - Interchangefee
        - Discount
        - Atmcommissionfee
        - Authorisedamount
        - Cardremainingbalance
        - Maximumallowedamount
        - Minimumallowedamount
        - Requestedamount
        - Issuerfees
        - Issuercommission
        - Interchangefees
        - Processingfees
        - Currencyconversionfees
        - Internationalserviceassessmentfees
        - Commission
        - Donation
        - Tax
        - Incremental
        - Decremental
        - Reserved
        - Confirmedamount
        - Instructedamount
        - Atmaccessfee
        - Cardholderbillingfee
        - Clearingfee
        - Credittransactionfee
        - Cumulative
        - Debittransactionfee
        - Extra
        - Foreignexchangefee
        - Fundstransfer
        - Instantpaymentfee
        - Instanttransferfee
        - Issuercardholderfee
        - Limit
        - Othernational
        - Otherprivate
        - Reconciliationfee
        - Settlementfee
        - Transactionfee
        - Anticipated
        - Baggage
        - Chargedtocard
        - Clearingpriorityfee
        - Dental
        - Deposit
        - Fundstransferfee
        - Otherqualifiedmedical
        - Prescription
        - Proxy
        - Requestedcashback
        - Settlementpriorityfee
        - Totalhealthcare
        - Transit
        - Vision
        - Connect
        - Data
        - Exchangeticket
        - Exchangeticketfee
        - Fare
        - Foodbeverage
        - Insurance
        - Longdistance
        - Miscellaneous
        - Phone
        - Prepayment
        - Total
        - Usage
        - Predcc
        - Upgrade
        - Clubfee
        - Cargo
        - Dutyfree
        - Ticketdelivery
        - Petcarrier
        - Tourorder
        - Minimuminterchangefee
        - Maximuminterchangefee
        - Cashbackinterchangefee
      type: string
      description: ">\r\n* `Cashback` - Cash-back amount.\r\n* `Gratuity` - Gratuity amount.\r\n* `Fees` - Fees.\r\n* `Rebates` - Global rebate of the transaction. This amount is counted as a negative amount.\r\n* `Valueaddedtax` - Value added tax amount.\r\n* `Actual` - Actual amount.\r\n* `Replacement` - Replacement amount.\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Original` - Original amount authorised during the real-time authorisation process.\r\n* `Surcharge` - Extra fee for a purchase or a withdrawal.\r\n* `Servicefee` - Service fee.\r\n* `Interchangefee` - Interchange fee.\r\n* `Discount` - Discount, rebate or voucher, related to loyalty programs. This amount is counted as a negative amount.\r\n* `Atmcommissionfee` - Commission that the issuer will charge to the cardholder, which should be shown and accepted by the cardholder before the money is disbursed.\r\n* `Authorisedamount` - Transaction amount that has been authorised.\r\n* `Cardremainingbalance` - Remaining allowed amount for this type of transaction with this card, after the transaction, until the end of the card limit period.\r\n* `Maximumallowedamount` - Maximum amount allowed for the transaction in the transaction amount currency if the transaction amount of the request was declined.\r\n* `Minimumallowedamount` - Minimum amount allowed in the TransactionAmount currency if the transaction amount of the request was declined.\r\n* `Requestedamount` - Transaction amount that has been requested to be authorised.\r\n* `Issuerfees` - Fees amount from the card issuer.\r\n* `Issuercommission` - Commission from the card issuer.\r\n* `Interchangefees` - Interchange fees.\r\n* `Processingfees` - Processing fees.\r\n* `Currencyconversionfees` - Currency conversion fees.\r\n* `Internationalserviceassessmentfees` - International service assessment fees.\r\n* `Commission` - Commission, for example for DCC (Dynamic Currency Conversion) transactions.\r\n* `Donation` - Donation amount.\r\n* `Tax` - Taxes applicable to the transaction.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Confirmedamount` - Actual amount that has been paid to the ultimate beneficiary, after all charges etc... have been deducted.\r\n* `Instructedamount` - Amount of money to be moved between the debtor (ordering customer) and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\r\n* `Atmaccessfee` - Fee for giving access to an ATM.\r\n* `Cardholderbillingfee` - Fee related to a cardholder billing.\r\n* `Clearingfee` - Fee related to a clearing transaction.\r\n* `Credittransactionfee` - Fee related to a credit transaction.\r\n* `Cumulative` - Contains the total amount of all authorisations related to the same cardholder purchase activities. Example: total of all incremental or splitted shipment authorisations for the same purchase.\r\n* `Debittransactionfee` - Fee related to a debit transaction.\r\n* `Extra` - Extra charges (for example,  minibar, etc.)\r\n* `Foreignexchangefee` - Fee related to a foreign exchange transaction.\r\n* `Fundstransfer` - Fee related to a funds transfer transaction\r\n* `Instantpaymentfee` - Fee related to an instant payment.\r\n* `Instanttransferfee` - Fee related to an instant transfer transaction.\r\n* `Issuercardholderfee` - Fee applied by the card issuer to the cardholder.\r\n* `Limit` - Limit of amounts for the transaction.\r\n* `Othernational` - Other type of amount defined at national level.\r\n* `Otherprivate` - Other type of amount defined at private level.\r\n* `Reconciliationfee` - Fee related to a reconciliation transaction.\r\n* `Settlementfee` - Fee related to a settlement transaction.\r\n* `Transactionfee` - Fee related to a transaction.\r\n* `Anticipated` - Amount anticipated for the transaction\r\n* `Baggage` - Baggage related fees\r\n* `Chargedtocard` - Amount that has been charged to card account\r\n* `Clearingpriorityfee` - Fee related to a clearing transaction for a given priority.\r\n* `Dental` - Amount qualified for dental prescriptions\r\n* `Deposit` - Deposit amount.\r\n* `Fundstransferfee` - Fee related to a funds transfer.\r\n* `Otherqualifiedmedical` - Amount qualified for other medical expenses\r\n* `Prescription` - Amount for medical prescription\r\n* `Proxy` - Substitute for an amount to be authorised.\r\n* `Requestedcashback` - Requested cashback amount\r\n* `Settlementpriorityfee` - Fee related to a settlement transaction for a given priority.\r\n* `Totalhealthcare` - Total healthcare amount\r\n* `Transit` - Amount in transit\r\n* `Vision` - Amount qualified for medical vision expenses\r\n* `Connect` - Telephone connection-related charge\r\n* `Data` - Data communication related charges\r\n* `Exchangeticket` - Fee for exchanging a ticket (modifying an itinerary)\r\n* `Exchangeticketfee` - Fee for exchanging a ticket (modifying an itinerary)\r\n* `Fare` - Amount of fare\r\n* `Foodbeverage` - Amount of food and beverages\r\n* `Insurance` - Insurance charges\r\n* `Longdistance` - Charges related to a long distance call.\r\n* `Miscellaneous` - Miscellaneous charges not elsewhere defined\r\n* `Phone` - Phone charges\r\n* `Prepayment` - Amount of prepayment\r\n* `Total` - Total amount of charges\r\n* `Usage` - Telephone usage-related charge\r\n* `Predcc` - Local amount before DCC (Dynamic Currency Conversion) was applied.\r\n* `Upgrade` - Amount for an upgrade.\r\n* `Clubfee` - Amount for club fee.\r\n* `Cargo` - Cargo Amount.\r\n* `Dutyfree` - Duty free amount\r\n* `Ticketdelivery` - Ticket delivery amount.\r\n* `Petcarrier` - Pet carrier.\r\n* `Tourorder` - Tour order amount.\r\n* `Minimuminterchangefee` - Minimum interchange fee applicable.\r\n* `Maximuminterchangefee` - Maximum applicable interchange fee.\r\n* `Cashbackinterchangefee` - Interchange fee applicable to cash back amount.\r\n"
    cardtransactioncategorytypevalues:
      type: object
      properties:
        Cardtransactioncategorytypevalues:
          type: string
          description: ''
          format: enumeration
      description: Specifies the category to which the card transaction belongs. (ISO20022)
    cardpaymenttransactionidentificationtypevalues:
      enum:
        - Issuercitidentification
        - Merchantcitidentification
      type: string
      description: ">\r\n* `Issuercitidentification` - Identification, given by the Issuer, of the transaction processed with the cardholder that legitimates this merchant initiated transaction. (ISO20022)\r\n* `Merchantcitidentification` - Identification, given by the merchant, of the transaction processed with the cardholder that legitimates this merchant initiated transaction. (ISO20022)\r\n"
    cardpaymenttransactionidentification:
      type: object
      properties:
        CardPaymentTransactionIdentification:
          $ref: '#/components/schemas/identifier'
        CardPaymentTransactionIdentificationType:
          $ref: '#/components/schemas/cardpaymenttransactionidentificationtypevalues'
      description: Identification of the transaction assigned by the initiator of the request. For instance refers to POITransactionIdentification if used inside an authorisation request or to SaleTransactionIdentification if the message is a payment request initiated by a sale system. (ISO20022)
    cardpaymenttransactionservicetypevalues:
      enum:
        - Cardsfundtransfer
        - Originalcredit
        - Cardpayment
        - Cashback
        - Cashadvance
        - Cashdeposit
        - Deferredpayment
        - Reservation
        - Loading
        - Refund
        - Quasicash
        - Balance
        - Cardactivation
        - Cardverification
        - Pinchange
        - Validitycheck
        - Aggregation
        - DCC
        - Gratuity
        - Instalment
        - Loyalty
        - Noshow
        - Purchasecorporate
        - Recurringpayment
        - Solicitedavailablefunds
        - Unsolicitedavailablefunds
        - Voiceauthorisation
        - Initialreservation
        - Updatereservation
        - Paymentreservation
        - Additionalpayment
        - Firstrecurring
        - Followingrecurring
        - Persontobusiness
        - Persontoperson
        - Acceptorinstalment
        - Issuerinstalment
        - Unloading
        - Cardsfundtransferpush
        - Cardsfundtransferpull
        - Cashwithdrawal
        - Pinunblock
        - Chosenwithdrawal
        - Preauthorisedwithdrawal
        - Profilewithdrawal
        - Standardwithdrawal
        - Transfercardbillpayment
        - Transferfromcash
        - Transferfromcheque
        - Transferfundsdisbursementgeneral
        - Transfergovernmentdisbursement
        - Transfermerchantdisbursement
        - Transferpayrollpensiondisbursement
        - Nonrefundable
        - Instant
        - Creditadjustement
        - Debitadjustement
        - Createcertificate
        - Renewcerificate
        - Revokecertificate
        - Addwhitelist
        - Removewhitelist
        - Cardinitiatingdirectdebit
        - Guaranteeofpayment
      type: string
      description: ">\r\n* `Cardsfundtransfer` - Transfer of funds to and/or from a card account.\r\n* `Originalcredit` - Original credit.\r\n* `Cardpayment` - Card payment.\r\n* `Cashback` - Card payment with cash-back.\r\n* `Cashadvance` - Cash advance or withdrawals on a POI (Point Of Interaction), or at a bank counter.\r\n* `Cashdeposit` - Cash deposit.\r\n* `Deferredpayment` - Deferred payment.\r\n* `Reservation` - Reservation (pre-authorisation).\r\n* `Loading` - Loading or reloading non-financial account.\r\n* `Refund` - Refund transaction.\r\n* `Quasicash` - Quasi-cash.\r\n* `Balance` - Balance enquiry.\r\n* `Cardactivation` - Card activation.\r\n* `Cardverification` - Card verification.\r\n* `Pinchange` - PIN (Personal Identification Number) change.\r\n* `Validitycheck` - Card validity check.\r\n* `Aggregation` - Aggregation of low payments.\r\n* `DCC` - Dynamic currency conversion (DCC).\r\n* `Gratuity` - Card payment with gratuity.\r\n* `Instalment` - Instalment payment.\r\n* `Loyalty` - Loyalty services.\r\n* `Noshow` - No show after reservation.\r\n* `Purchasecorporate` - Purchase and corporate data.\r\n* `Recurringpayment` - Recurring payment.\r\n* `Solicitedavailablefunds` - Solicited available funds.\r\n* `Unsolicitedavailablefunds` - Unsolicited available funds.\r\n* `Voiceauthorisation` - Voice authorisation.\r\n* `Initialreservation` - Initial reservation.\r\n* `Updatereservation` - Update reservation.\r\n* `Paymentreservation` - Payment after reservation.\r\n* `Additionalpayment` - Additional payment after reservation.\r\n* `Firstrecurring` - Initial recurring payment.\r\n* `Followingrecurring` - Repeat recurring payment.\r\n* `Persontobusiness` - Card payment transaction transfer from person to business.\r\n* `Persontoperson` - Card payment transaction transfer from person to person.\r\n* `Acceptorinstalment` - Instalment payment transaction performed by the acceptor or the acquirer.\r\n* `Issuerinstalment` - Instalment payment transaction performed by the card issuer.\r\n* `Unloading` - Unloading non-financial account.\r\n* `Cardsfundtransferpush` - Transfer of funds to a card or an account.\r\n* `Cardsfundtransferpull` - Transfer of funds from a card or an account.\r\n* `Cashwithdrawal` - Withdrawal of cash on an ATM.\r\n* `Pinunblock` - Unblock the cardholder PIN.\r\n* `Chosenwithdrawal` - Amount and notes values are chosen by the customer.\r\n* `Preauthorisedwithdrawal` - Withdrawal transaction was pre-authorised by another channel (amount could be absent).\r\n* `Profilewithdrawal` - Amount and Notes Values are pre-defined by the customer profile.\r\n* `Standardwithdrawal` - Customer pressed a button associated with a withdrawal of unique amount and notes mix.\r\n* `Transfercardbillpayment` - Transfer for payment of bills.\r\n* `Transferfromcash` - Transfer from cash deposit.\r\n* `Transferfromcheque` - Transfer from cheque deposit.\r\n* `Transferfundsdisbursementgeneral` - Transfer for general disbursement.\r\n* `Transfergovernmentdisbursement` - Transfer for government disbursement.\r\n* `Transfermerchantdisbursement` - Transfer for merchant disbursement.\r\n* `Transferpayrollpensiondisbursement` - Transfer for payroll pension disbursement.\r\n* `Nonrefundable` - Payment of goods or services which are not refundable, for instance low cost airline tickets.\r\n* `Instant` - Instant transaction.\r\n* `Creditadjustement` - Credit adjustment to a previous transaction.\r\n* `Debitadjustement` - Debit adjustment to a previous transaction.\r\n* `Createcertificate` - Creation of an X.509 certificate with the public key and the information of the owner of the asymmetric key provided by the requestor.\r\n* `Renewcerificate` - Renewal of an X.509 certificate, protected by the certificate to renew.\r\n* `Revokecertificate` - Revocation of an active X.509 certificate.\r\n* `Addwhitelist` - Add a POI in the white list of the terminal manager.\r\n* `Removewhitelist` - Remove a POI from the white list of the terminal manager.\r\n* `Cardinitiatingdirectdebit` - Direct Debit initiated by Card.\r\n* `Guaranteeofpayment` - Acceptor claims for guarantee of payment.\r\n"
    cardpaymenttransaction:
      type: object
      properties:
        Amount:
          $ref: '#/components/schemas/amount'
        MerchantLocation:
          $ref: '#/components/schemas/location'
        DebitCreditDirection:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        CardTransactionChannel:
          $ref: '#/components/schemas/transactionchanneltypevalues'
        PointOfInteraction:
          $ref: '#/components/schemas/pointofservice'
        CardTransactionDateTime:
          $ref: '#/components/schemas/datetime'
        CardTransactionEnvironmentType:
          $ref: '#/components/schemas/transactionenvironmenttypevalues'
        MerchantCountry:
          $ref: '#/components/schemas/country'
        CardNetwork:
          $ref: '#/components/schemas/cardnetwork'
        AmountQualifier:
          $ref: '#/components/schemas/amountqualifiertypevalues'
        CardPaymentStatus:
          $ref: '#/components/schemas/status'
        CardTransactionCategory:
          $ref: '#/components/schemas/cardtransactioncategorytypevalues'
        CardPaymentTransactionIdentification:
          $ref: '#/components/schemas/cardpaymenttransactionidentification'
        CardPaymentTransactionServiceType:
          $ref: '#/components/schemas/cardpaymenttransactionservicetypevalues'
      description: The card transaction for the customer case (can be multiple transactions) CardPayment|CardPayment (https://www.iso20022.org/standardsrepository/type/CardPayment)|Standard|ISO20022 BM ()
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: The record of a specific verification task
    cardpaymentinstruction:
      type: object
      properties:
        CardPaymentInstruction:
          type: string
          description: A PaymentInstruction initiated by PaymentCard
          format: class
      description: 'The instruction message to the merchant to provide card transaction related paperwork, includes issued device details, transaction identification information and the retrieval reason'
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: Reference to the document request messages sent to the merchant
    documentdirectoryentry:
      type: object
      properties:
        DocumentDirectoryEntryIdentification:
          type: string
          description: Identification allowing the retrieval of a document from a Document Directory
          format: string
      description: Reference to documents obtained
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          $ref: '#/components/schemas/identifier'
      description: 'Work documentation, forms and schedules produced and referenced during the analysis'
    Consolidation:
      type: object
      properties:
        ConsolidationCardTransactionRecordReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
        ConsolidationTaskRecord:
          $ref: '#/components/schemas/task'
        ConsolidationInstruction:
          $ref: '#/components/schemas/cardpaymentinstruction'
        CorrespondenceReference:
          $ref: '#/components/schemas/document'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        ConsolidationTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        ConsolidationTaskResult:
          $ref: '#/components/schemas/text'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    correspondencetypevalues:
      enum:
        - UnsolicitedMessage
        - Complaint
      type: string
      description: ">\r\n* `UnsolicitedMessage` - \r\n* `Complaint` - \r\n"
    correspondencecommunicationmethodtypevalues:
      enum:
        - Fax
        - Email
        - Proprietary
        - Online
        - Phone
        - Postalservice
        - File
      type: string
      description: ">\r\n* `Fax` - Transmission by fax.\r\n* `Email` - Transmission by e-mail.\r\n* `Proprietary` - Transmission by proprietary method.\r\n* `Online` - Transmission on line, for example, in a web portal.\r\n* `Phone` - Transmission by telephone.\r\n* `Postalservice` - Transmission by postal service.\r\n* `File` - Transmission by file transfer.\r\n"
    correspondencemediumtypevalues:
      enum:
        - Paper
        - Electronic
        - Paperelectronic
        - Biometric
      type: string
      description: ">\r\n* `Paper` - Presentation is made on paper.\r\n* `Electronic` - Presentation is made electronically.\r\n* `Paperelectronic` - Presentation is made on paper and/or electronically.\r\n* `Biometric` - Biometric medium.\r\n"
    correspondence:
      type: object
      properties:
        CorrespondenceType:
          $ref: '#/components/schemas/correspondencetypevalues'
        CorrespondenceAddress:
          $ref: '#/components/schemas/address'
        CorrespondenceDateTime:
          $ref: '#/components/schemas/datetime'
        CorrespondenceContent:
          $ref: '#/components/schemas/text'
        CorrespondenceTemplate:
          $ref: '#/components/schemas/text'
        CorrespondenceCommunicationMethod:
          $ref: '#/components/schemas/correspondencecommunicationmethodtypevalues'
        CorrespondenceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        CorrespondenceMedium:
          $ref: '#/components/schemas/correspondencemediumtypevalues'
      description: Reference to the correspondence generated and received
    businessunit:
      type: object
      properties:
        BusinessFunction:
          type: string
          description: ''
          format: string
        Goal:
          type: string
          description: ''
          format: string
      description: "The business unit where the customer case was reported ||\r\n|"
    cardpaymentcaseresolution:
      type: object
      properties:
        CardPaymentCaseResolution:
          type: string
          description: 'Dispute resolution for a card case. '
          format: class
      description: Reference to the resolution payment order when financial adjustments are required to resolve the card case
    Resolution:
      type: object
      properties:
        ResolutionCardTransactionRecordReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
        ResolutionTaskRecord:
          $ref: '#/components/schemas/task'
        CorrespondenceInstanceReference:
          $ref: '#/components/schemas/correspondence'
        CorrespondenceContent:
          $ref: '#/components/schemas/correspondence'
        DocumentDirectoryEntryInstanceReference:
          $ref: '#/components/schemas/documentdirectoryentry'
        DocumentContent:
          $ref: '#/components/schemas/document'
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/businessunit'
        PaymentOrderReference:
          $ref: '#/components/schemas/cardpaymentcaseresolution'
        ResolutionTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        ResolutionTaskResult:
          $ref: '#/components/schemas/text'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    chargebackinstruction:
      type: object
      properties:
        ChargebackInstruction:
          type: string
          description: 'An instruction to book chargeback for the transaction. '
          format: class
      description: The instruction to book chargeback for the transaction - could be partial chargeback
    Chargeback:
      type: object
      properties:
        ChargebackCardTransactionRecordReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
        ChargebackInstruction:
          $ref: '#/components/schemas/chargebackinstruction'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    cardnetworkparticpantservice:
      type: object
      properties:
        NetworkParticipantServiceType:
          type: string
          description: 'The type of Network Participant Service  (e.g. merchant alert, chargeback arbitration, chargeback reduction)'
          format: string
        NetworkParticipantServiceCharge:
          type: string
          description: Details of service charge levied against the Network Participant Facility.
          format: string
        NetworkParticipantServiceDate/Time:
          type: string
          description: Key dates and times associated with the provision of the service (e.g. initiation of service fulfillment)
          format: string
      description: Reference to participant's use of a Network service
    servicetypevalues:
      enum:
        - ITService
        - AdministrativeService
        - SystemService
        - FinancialService
        - InformationService
        - BusinessService
      type: string
      description: ">\r\n* `ITService` - \r\n* `AdministrativeService` - \r\n* `SystemService` - \r\n* `FinancialService` - \r\n* `InformationService` - \r\n* `BusinessService` - \r\n"
    Arbitration:
      type: object
      properties:
        ArbitrationCardTransactionRecordReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
        NetworkParticipantNetworkServiceRequestReference:
          $ref: '#/components/schemas/cardnetworkparticpantservice'
        NetworkParticipantNetworkServiceRequestRecord:
          $ref: '#/components/schemas/cardnetworkparticpantservice'
        NetworkParticipantServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        NetworkParticipantServiceDateandTime:
          $ref: '#/components/schemas/datetime'
        NetworkParticipantServiceResult:
          $ref: '#/components/schemas/text'
      description: "The main worsteps to be followed in th eexecution of the procedure\n\nExamples: Invoice generation"
    cardcasetypevalues:
      enum:
        - DisputedCharges
        - MerchantFraud
      type: string
      description: "The type of card dispute including any supporting narrative (e.g. disputed charges, merchant fraud) ||\r\n|"
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    productagreement:
      type: object
      properties:
        ProductAgreementType:
          $ref: '#/components/schemas/productagreementtypevalues'
      description: "Details of the transaction (e.g. purchased service/product, purpose) ||\r\n|"
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: "The card case processing schedule including key tasks and dates for resolution (target and actual dates/times ) ||\r\n|"
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: ''
    customercontact:
      type: object
      properties:
        ContactType:
          $ref: '#/components/schemas/text'
        ContactDateTime:
          $ref: '#/components/schemas/datetime'
        ContactLocation:
          $ref: '#/components/schemas/location'
        ContactSchedule:
          $ref: '#/components/schemas/schedule'
        ContactResult:
          $ref: '#/components/schemas/text'
        ContactPurpose:
          $ref: '#/components/schemas/text'
        ContactDevice:
          $ref: '#/components/schemas/device'
        ContactIndicator:
          $ref: '#/components/schemas/text'
        ContactContent:
          $ref: '#/components/schemas/text'
      description: "Reference to the complete contact record assembled during the contact where the card case was raised if appropriate ||\r\n|"
    issueddevicestatustypevalues:
      enum:
        - Issued
        - IssuedButNotActivated
        - Activated
        - Suspended
        - Retrieved
      type: string
      description: ">\r\n* `Issued` - \r\n* `IssuedButNotActivated` - \r\n* `Activated` - \r\n* `Suspended` - \r\n* `Retrieved` - \r\n"
    branch:
      type: object
      properties:
        BranchIdentification:
          $ref: '#/components/schemas/identifier'
        BranchLegalEntityIdentification:
          $ref: '#/components/schemas/identifier'
        BranchAddress:
          $ref: '#/components/schemas/address'
        BranchName:
          $ref: '#/components/schemas/name'
      description: The name of the branch where the party will collect the device
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productstatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productstatus:
      type: object
      properties:
        ProductStatus:
          $ref: '#/components/schemas/status'
        ProductStatusType:
          $ref: '#/components/schemas/productstatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productstatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: The product or service to which the Issued Device will be attached
    devicecustomizationtypevalues:
      enum:
        - CardDesign
      type: string
      description: ">\r\n* `CardDesign` - \r\n"
    issueddevice:
      type: object
      properties:
        IssuedDeviceStatus:
          $ref: '#/components/schemas/issueddevicestatustypevalues'
        IssuedDevicePartyReference:
          $ref: '#/components/schemas/party'
        IssuedDeviceConfiguration:
          $ref: '#/components/schemas/text'
        IssuedDeviceReference:
          $ref: '#/components/schemas/device'
        IssuedDeviceValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        IssuedDeviceDeliveryMethod:
          $ref: '#/components/schemas/text'
        DeviceIssueDate:
          $ref: '#/components/schemas/datetime'
        IssuedDeviceCollectLocation:
          $ref: '#/components/schemas/branch'
        IssuedDeviceProductReference:
          $ref: '#/components/schemas/bankingproduct'
        IssedDeviceCustomizationType:
          $ref: '#/components/schemas/devicecustomizationtypevalues'
      description: "Reference to the issued device submitted to authorize the transaction (e.g. card number) ||\r\n|"
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: "The type of transaction (purchase, cash advance, etc.) ||\r\n|"
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
        - ChequeRelatedFee
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n* `ChequeRelatedFee` - \r\n"
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: 'Rate used to calculate the amount of the adjustment, allowance, charge or fee. (ISO20022)'
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goaltypevalues:
      enum:
        - Short-TermGoal
        - Long-TermGoal
        - BusinessGoal
        - PerformanceGoal
        - FinancialGoal
        - OutcomeGoal
        - SMARTGoal
      type: string
      description: ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
    goaldatetimetypevalues:
      enum:
        - SettingDate
        - PlanningDate
        - StartDate
        - ReviewDate
        - CompletionDate
      type: string
      description: ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
    goaldatetime:
      type: object
      properties:
        GoalDateAndTime:
          $ref: '#/components/schemas/datetime'
        GoalDateAndTimeType:
          $ref: '#/components/schemas/goaldatetimetypevalues'
      description: 'The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date.'
    goalstatustypevalues:
      enum:
        - Setting
        - Planning
        - Execution
        - MonitoringAndEvaluation
        - CompletionOrAchievement
        - MaintenanceOrSustainment
        - ClosureOrRenewal
      type: string
      description: ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
    goalstatus:
      type: object
      properties:
        GoalStatus:
          $ref: '#/components/schemas/status'
        GoalStatusType:
          $ref: '#/components/schemas/goalstatustypevalues'
      description: 'The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal'
    goal:
      type: object
      properties:
        GoalType:
          $ref: '#/components/schemas/goaltypevalues'
        GoalDefinition:
          $ref: '#/components/schemas/text'
        GoalName:
          $ref: '#/components/schemas/name'
        GoalDateAndTime:
          $ref: '#/components/schemas/goaldatetime'
        GoalStatus:
          $ref: '#/components/schemas/goalstatus'
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
        - DevelopmentPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n* `DevelopmentPlan` - \r\n"
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: The applied intercharge fee Adjustment|Adjustment (https://www.iso20022.org/standardsrepository/type/Adjustment)|Standard|ISO20022 BM ()
    authorization:
      type: object
      properties:
        Authorization:
          type: string
          description: "An evaluation whether a party or system is allowed to do something.\n\nThe consent given by a participant (or a third party acting on behalf of that participant) in order to transfer funds or securities. (ECB)\n\nAuthorization is a mechanism by which a computer system determines whether to allow or deny specific action to a user. Authorization is often controlled by rather complex rules and algorithms, usually specified as part of an access control model. Authorization often follows (and required) authentication, however, authentication and authorization are two separate mechanisms. In rare cases, \"authorization\" is understood as a process of allowing access, granting permissions or giving approval. Such as \"authorization\" of a request to join a group. (ISO/IEC 24760-1:2019 - IT Security and Privacy)"
          format: class
      description: "Details the reference, amount, timestamp of the transaction authorization ||\r\n|"
    CardCaseProcedure:
      type: object
      properties:
        CardCaseType:
          $ref: '#/components/schemas/cardcasetypevalues'
        ProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerContactRecordReference:
          $ref: '#/components/schemas/customercontact'
        CaseLocation:
          $ref: '#/components/schemas/location'
        Date:
          $ref: '#/components/schemas/datetime'
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/businessunit'
        CardTransactionReference:
          $ref: '#/components/schemas/cardpaymenttransaction'
        CardTransactionRecord:
          $ref: '#/components/schemas/cardpaymenttransaction'
        CardTransactionProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
        CardHolderReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionIssuedDeviceReference:
          $ref: '#/components/schemas/issueddevice'
        CardTransactionNetworkReference:
          $ref: '#/components/schemas/cardnetwork'
        CardTransactionIssuingBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionMerchantAcquiringBankReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        CardTransactionCurrency:
          $ref: '#/components/schemas/currencycode'
        CardTransactionAmountType:
          $ref: '#/components/schemas/amounttypevalues'
        CardTransactionAmount:
          $ref: '#/components/schemas/amount'
        CardTransactionMerchantReference:
          $ref: '#/components/schemas/involvedparty'
        CardTransactionLocationReference:
          $ref: '#/components/schemas/location'
        CardTransactionProductandServiceReference:
          $ref: '#/components/schemas/productagreement'
        CardTransactionDateandTime:
          $ref: '#/components/schemas/datetime'
        CardTransactionFXConversionCharge:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionInterchargeFee:
          $ref: '#/components/schemas/feearrangement'
        CardTransactionAuthorizationRecord:
          $ref: '#/components/schemas/authorization'
        CardCaseResolutionSchedule:
          $ref: '#/components/schemas/schedule'
      description: 'Complete work tasks following a defined procedure in support of general office activities and product and service delivery within Card Case. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CardCaseProcedure:
      description: CardCaseProcedure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardCaseProcedure'
    Consolidation:
      description: Consolidation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Consolidation'
    Chargeback:
      description: Chargeback
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chargeback'
    Arbitration:
      description: Arbitration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Arbitration'
    Resolution:
      description: Resolution
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Resolution'
  parameters:
    cardcaseid:
      name: cardcaseid
      in: path
      required: true
      style: simple
      schema:
        type: string
    consolidationid:
      name: consolidationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    chargebackid:
      name: chargebackid
      in: path
      required: true
      style: simple
      schema:
        type: string
    arbitrationid:
      name: arbitrationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    resolutionid:
      name: resolutionid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CardCaseProcedure:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardCaseProcedure'
      required: true
    Consolidation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Consolidation'
      required: true
    Chargeback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chargeback'
      required: true
    Arbitration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Arbitration'
      required: true
    Resolution:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Resolution'
      required: true