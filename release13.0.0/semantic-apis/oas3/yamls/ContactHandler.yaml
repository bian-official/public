openapi: 3.0.1
info:
  title: Contact Handler
  description: This service domain handles a customer's interactive contact with the bank. This will typically involve launching of one or more channel/device specific dialogue sessions as necessary within the customer contact
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/ContactHandler/13.0.0
paths:
  /ContactHandler/Initiate:
    post:
      tags:
        - CR - CustomerContactOperatingSession
      summary: InCR Initiate a contact
      description: InCR Initiate a contact
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CustomerContactOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CustomerContactOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Update':
    put:
      tags:
        - CR - CustomerContactOperatingSession
      summary: UpCR Update details for a customer contact
      description: UpCR Update details for a customer contact
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerContactOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CustomerContactOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Control':
    put:
      tags:
        - CR - CustomerContactOperatingSession
      summary: CoCR Control a customer contact (e.g. terminate)
      description: CoCR Control a customer contact (e.g. terminate)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerContactOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CustomerContactOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Exchange':
    put:
      tags:
        - CR - CustomerContactOperatingSession
      summary: 'EcCR Accept, reject, etc a contact action'
      description: 'EcCR Accept, reject, etc a contact action'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerContactOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CustomerContactOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Execute':
    put:
      tags:
        - CR - CustomerContactOperatingSession
      summary: ExCR Execute an automated task for a contact (e.g. route to specialist)
      description: ExCR Execute an automated task for a contact (e.g. route to specialist)
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerContactOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CustomerContactOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Request':
    put:
      tags:
        - CR - CustomerContactOperatingSession
      summary: RqCR Request manual intervention in a contact (e.g. override routing decision)
      description: RqCR Request manual intervention in a contact (e.g. override routing decision)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerContactOperatingSession'
      responses:
        '200':
          $ref: '#/components/responses/CustomerContactOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Retrieve':
    get:
      tags:
        - CR - CustomerContactOperatingSession
      summary: ReCR Retrieve details about a customer contact
      description: ReCR Retrieve details about a customer contact
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerContactOperatingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Authentication/{authenticationid}/Retrieve':
    get:
      tags:
        - BQ - Authentication
      summary: ReBQ Retrieve details about an authentication task
      description: ReBQ Retrieve details about an authentication task
      operationId: RetrieveAuthentication
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/authenticationid'
      responses:
        '200':
          $ref: '#/components/responses/Authentication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Routing/{routingid}/Retrieve':
    get:
      tags:
        - BQ - Routing
      summary: ReBQ Retrieve details about a routing task
      description: ReBQ Retrieve details about a routing task
      operationId: RetrieveRouting
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/routingid'
      responses:
        '200':
          $ref: '#/components/responses/Routing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Session/Initiate':
    post:
      tags:
        - BQ - Session
      summary: InBQ Initiate a servicing session
      description: InBQ Initiate a servicing session
      operationId: InitiateSession
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
      requestBody:
        $ref: '#/components/requestBodies/Session'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Session/{sessionid}/Update':
    put:
      tags:
        - BQ - Session
      summary: UpBQ Update details about a servicing session
      description: UpBQ Update details about a servicing session
      operationId: UpdateSession
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/sessionid'
      requestBody:
        $ref: '#/components/requestBodies/Session'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Session/{sessionid}/Control':
    put:
      tags:
        - BQ - Session
      summary: CoBQ Control the processing of a session (e.g. reroute)
      description: CoBQ Control the processing of a session (e.g. reroute)
      operationId: ControlSession
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/sessionid'
      requestBody:
        $ref: '#/components/requestBodies/Session'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Session/{sessionid}/Execute':
    put:
      tags:
        - BQ - Session
      summary: ExBQ Execute an automated task in a session (e.g. re-authenticate)
      description: ExBQ Execute an automated task in a session (e.g. re-authenticate)
      operationId: ExecuteSession
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/sessionid'
      requestBody:
        $ref: '#/components/requestBodies/Session'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/Session/{sessionid}/Retrieve':
    get:
      tags:
        - BQ - Session
      summary: ReBQ Retrieve details about a customer servicing session
      description: ReBQ Retrieve details about a customer servicing session
      operationId: RetrieveSession
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/sessionid'
      responses:
        '200':
          $ref: '#/components/responses/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/History/{historyid}/Update':
    put:
      tags:
        - BQ - History
      summary: UpBQ Update a contact history record content
      description: UpBQ Update a contact history record content
      operationId: UpdateHistory
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/historyid'
      requestBody:
        $ref: '#/components/requestBodies/History'
      responses:
        '200':
          $ref: '#/components/responses/History'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/ContactHandler/{contacthandlerid}/History/{historyid}/Retrieve':
    get:
      tags:
        - BQ - History
      summary: ReBQ Retrieve historical details about a contact event
      description: ReBQ Retrieve historical details about a contact event
      operationId: RetrieveHistory
      parameters:
        - $ref: '#/components/parameters/contacthandlerid'
        - $ref: '#/components/parameters/historyid'
      responses:
        '200':
          $ref: '#/components/responses/History'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: The task updates the contact record activity record fields and handles the interaction with the Contact Dialogue service domain to initiate the servicing session
    duration:
      type: object
      properties:
        Duration:
          type: string
          description: 'A duration is the specification of a length of time without a fixed start or end time, expressed in Gregorian calendar time units (Year, Month, Week, Day) and Hours, Minutes or Seconds. (UN/CEFACT)'
          format: datatype
      description: Records the start and end date times for the contact Duration|Duration (https://www.iso20022.org/standardsrepository/type/duration)|Standard|ISO20022 BM ()
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "Describes the interpreted result of the contact (e.g. completed, customer terminated, timed-out) ||\r\n|"
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          $ref: '#/components/schemas/text'
        TimeZoneCode:
          $ref: '#/components/schemas/text'
        DaylightSavingIndicator:
          $ref: '#/components/schemas/text'
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: Key dates and times for the session
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "The customer reference as provided by the contacting party and verified by the authentication function ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: The routing selections made through the contact Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()
    sessiontypevalues:
      enum:
        - ContactHandlingSession
        - CustomerDialogueSession
        - ChannelOperatingSession
        - GatewayOperatingSession
        - SwitchOperatingSession
        - DeviceOperatingSession
        - InterbankTransactionOperatingSession
        - CorrespondenceOperatingSession
        - InteractiveHelpOperatingSession
        - ACHOperatingSession
      type: string
      description: ">\r\n* `ContactHandlingSession` - \r\n* `CustomerDialogueSession` - \r\n* `ChannelOperatingSession` - \r\n* `GatewayOperatingSession` - \r\n* `SwitchOperatingSession` - \r\n* `DeviceOperatingSession` - \r\n* `InterbankTransactionOperatingSession` - \r\n* `CorrespondenceOperatingSession` - \r\n* `InteractiveHelpOperatingSession` - \r\n* `ACHOperatingSession` - \r\n"
    sessiontype:
      type: object
      properties:
        SessionTypeName:
          $ref: '#/components/schemas/name'
        SessionType:
          $ref: '#/components/schemas/sessiontypevalues'
      description: 'Specifies the classification of session like Customer Contact Session, Channel Operating Session, Device Operating Session, etc.'
    schedule:
      type: object
      properties:
        ScheduleType:
          $ref: '#/components/schemas/text'
      description: ''
    session:
      type: object
      properties:
        SessionDuration:
          $ref: '#/components/schemas/duration'
        SessionDateTime:
          $ref: '#/components/schemas/datetime'
        SessionStatus:
          $ref: '#/components/schemas/status'
        SessionType:
          $ref: '#/components/schemas/sessiontype'
        SessionScheduel:
          $ref: '#/components/schemas/schedule'
      description: "Reference to the active voice network used to access customer ||\r\n|"
    Session:
      type: object
      properties:
        SessionTaskRecord:
          $ref: '#/components/schemas/task'
        SessionResult:
          $ref: '#/components/schemas/session'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    Authentication:
      type: object
      properties:
        AuthenticationTaskRecord:
          $ref: '#/components/schemas/task'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    History:
      type: object
      properties:
        HistoryTaskRecord:
          $ref: '#/components/schemas/task'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    Routing:
      type: object
      properties:
        RoutingTaskRecord:
          $ref: '#/components/schemas/task'
      description: "The collection of operational serivces/functions offered by the operational facility\n\nExamples: messages, capture, routines"
    yesnoindicator:
      type: object
      properties:
        Yesnoindicator:
          type: string
          description: "Indicates a \"Yes\" or \"No\" type of answer for an element. (ISO20022)\ntrue: Yes\nfalse: No"
          format: datatype
      description: 'Indicates whether this is an inbound or outbound contact (inbound is customer initiated, outbound is servicing resource initiated) YesNoIndicator|YesNoIndicator (https://www.iso20022.org/standardsrepository/type/YesNoIndicator)|Standard|ISO20022 BM ()'
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: "The contact device can be determined by the channel operations facilities (e.g. URL/ANI-phone number) ||\r\n|"
    customercontact:
      type: object
      properties:
        ContactType:
          $ref: '#/components/schemas/text'
        ContactDateTime:
          $ref: '#/components/schemas/datetime'
        ContactLocation:
          $ref: '#/components/schemas/location'
        ContactSchedule:
          $ref: '#/components/schemas/schedule'
        ContactResult:
          $ref: '#/components/schemas/text'
        ContactPurpose:
          $ref: '#/components/schemas/text'
        ContactDevice:
          $ref: '#/components/schemas/device'
        ContactIndicator:
          $ref: '#/components/schemas/text'
        ContactContent:
          $ref: '#/components/schemas/text'
      description: "The contact record consolidates all aspects of the contact that is cross-referenced by all  contact functions and called servicing sessions that make up the contact ||\r\n|"
    instructiondatetimetypevalues:
      enum:
        - DueDate
        - ExecutionDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n* `FulfillmentDate` - \r\n"
    instructiondatetime:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/datetime'
        InstructionDateType:
          $ref: '#/components/schemas/instructiondatetimetypevalues'
      description: ''
    instructionstatustypevalues:
      enum:
        - Pendingprocessing
        - Acknowledgedaccepted
        - Rejected
        - Accepted
        - Completed
        - Notreceived
        - Cancelled
        - Beingcancelled
        - Receivedbyissuerorregistrar
        - Pending
        - Standinginstruction
        - Queued
        - Cancelledbysubcustodian
        - Forwarded
      type: string
      description: ">\r\n* `Pendingprocessing` - Processing of the instruction is pending.\r\n* `Acknowledgedaccepted` - Instruction has been acknowledged and accepted and is validated for further processing.\r\n* `Rejected` - Instruction has been rejected.\r\n* `Accepted` - Instruction has been accepted and is validated for further processing.\r\n* `Completed` - Processing has been completed.\r\n* `Notreceived` - No instruction has been received (to be used in a reminder).\r\n* `Cancelled` - Instruction has been cancelled.\r\n* `Beingcancelled` - Cancel request is being processed.\r\n* `Receivedbyissuerorregistrar` - Instruction has been received by Issuer.\r\n* `Pending` - Instruction is pending.\r\n* `Standinginstruction` - Standing instruction is applied.\r\n* `Queued` - Instruction is queued.\r\n* `Cancelledbysubcustodian` - Instruction has been cancelled by the agent, for example, due to an event deadline extension.\r\n* `Forwarded` - Accepted and sent along the chain.\r\n"
    instructionstatus:
      type: object
      properties:
        InstructionStatusType:
          $ref: '#/components/schemas/instructionstatustypevalues'
        InstructionStatus:
          $ref: '#/components/schemas/status'
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instructionidentificationtypevalues:
      enum:
        - OrderNumber
        - InstructionNumber
      type: string
      description: ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
    instructionidentification:
      type: object
      properties:
        InstructionIdentification:
          $ref: '#/components/schemas/identifier'
        InstructionIdentificationType:
          $ref: '#/components/schemas/instructionidentificationtypevalues'
      description: "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
    instructiontypevalues:
      enum:
        - PaymentInstruction
        - DeliveryOrder
        - InformationRequest
        - ExchangeInstruction
        - AllocationInstruction
        - MaintenanceInstruction
      type: string
      description: ">\r\n* `PaymentInstruction` - \r\n* `DeliveryOrder` - \r\n* `InformationRequest` - \r\n* `ExchangeInstruction` - \r\n* `AllocationInstruction` - \r\n* `MaintenanceInstruction` - \r\n"
    log:
      type: object
      properties:
        LogType:
          $ref: '#/components/schemas/text'
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    instruction:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/instructiondatetime'
        InstructionStatus:
          $ref: '#/components/schemas/instructionstatus'
        InstructionIdentifier:
          $ref: '#/components/schemas/instructionidentification'
        InstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        InstructionResult:
          $ref: '#/components/schemas/text'
        InstructionDescription:
          $ref: '#/components/schemas/text'
        InstructionLog:
          $ref: '#/components/schemas/log'
        InstructionPurpose:
          $ref: '#/components/schemas/text'
      description: "The customer may provide details of servicing resource request when initiating or during contact ||\r\n|"
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
        - DuePayable
        - Minimum
        - Open
        - Unknown
        - Fixed
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n* `DuePayable` - \r\n* `Minimum` - \r\n* `Open` - The amount is open.(ISO20022)\r\n* `Unknown` - The amount is unkown.(ISO20022)\r\n* `Fixed` - The amount represents a fixed value.(ISO20022)\r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          $ref: '#/components/schemas/text'
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: ''
    position:
      type: object
      properties:
        PositionValue:
          $ref: '#/components/schemas/value'
        PositionQuantity:
          type: string
          description: ''
          format: number
        PositionDate:
          $ref: '#/components/schemas/datetime'
        PositionAmount:
          $ref: '#/components/schemas/amount'
      description: 'Reference to the servicing position - can be where an inbound contact is routed, or the source of an outbound contact request Position |Position  (https://www.iso20022.org/standardsrepository/type/Position)|Standard|ISO20022 BM ()'
    servicingresource:
      type: object
      properties:
        ServicingResource:
          type: string
          description: 'A resource that is required for servicing a customer. '
          format: class
      description: "Reference to the servicing resource - can be to handle an inbound contact or the source of an outbound contact request ||\r\n|"
    customereventlog:
      type: object
      properties:
        CustomerEventLog:
          type: string
          description: A record of the customer's events.
          format: class
      description: "Records the actions performed during contact, including all dialogue sessions ||\r\n|"
    customerdialoguesession:
      type: object
      properties:
        CustomerContactReference:
          $ref: '#/components/schemas/customercontact'
        SessionDialogueContent:
          $ref: '#/components/schemas/text'
      description: "Reference to any contact session dialogue records created during the contact - there can be several ||\r\n|"
    CustomerContactOperatingSession:
      type: object
      properties:
        CustomerContactInboundorOutboundIndicator:
          $ref: '#/components/schemas/yesnoindicator'
        eBranchOperatingSessionReference:
          $ref: '#/components/schemas/session'
        AdvancedVoiceServiceOperatingSessionReference:
          $ref: '#/components/schemas/session'
        CustomerContactRecordReference:
          $ref: '#/components/schemas/customercontact'
        CustomerContactRecord:
          $ref: '#/components/schemas/customercontact'
        CustomerContactRecordCustomerReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerContactRecordContactDevice:
          $ref: '#/components/schemas/device'
        CustomerContactRecordAuthenticationStatus:
          $ref: '#/components/schemas/status'
        CustomerContactRecordRoutingSelectionStatus:
          $ref: '#/components/schemas/status'
        CustomerContactRecordMenuSelection:
          $ref: '#/components/schemas/text'
        CustomerContactRecordServicingRequest:
          $ref: '#/components/schemas/instruction'
        CustomerContactRecordServicingEventHistory:
          $ref: '#/components/schemas/text'
        CustomerContactRecordServicingPositionReference:
          $ref: '#/components/schemas/position'
        CustomerContactRecordServicingResourceReference:
          $ref: '#/components/schemas/servicingresource'
        CustomerContactRecordActivityRecord:
          $ref: '#/components/schemas/customereventlog'
        CustomerSessionDialogueReference:
          $ref: '#/components/schemas/customerdialoguesession'
        CustomerSessionDialogueRecord:
          type: string
          description: The customer session dialogue details and log
          format: object
        CustomerContactRecordDuration:
          $ref: '#/components/schemas/duration'
        CustomerContactRecordResult:
          $ref: '#/components/schemas/text'
      description: 'Operate equipment and/or a largely automated facility within Contact Handler. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerContactOperatingSession:
      description: CustomerContactOperatingSession
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerContactOperatingSession'
    Authentication:
      description: Authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authentication'
    Routing:
      description: Routing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Routing'
    Session:
      description: Session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'
    History:
      description: History
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/History'
  parameters:
    contacthandlerid:
      name: contacthandlerid
      in: path
      required: true
      style: simple
      schema:
        type: string
    authenticationid:
      name: authenticationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    routingid:
      name: routingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    sessionid:
      name: sessionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    historyid:
      name: historyid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerContactOperatingSession:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerContactOperatingSession'
      required: true
    Session:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'
      required: true
    History:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/History'
      required: true